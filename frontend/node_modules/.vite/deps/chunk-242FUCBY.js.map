{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/ada.js"],
  "sourcesContent": ["/*\r\nLanguage: Ada\r\nAuthor: Lars Schulna <kartoffelbrei.mit.muskatnuss@gmail.org>\r\nDescription: Ada is a general-purpose programming language that has great support for saftey critical and real-time applications.\r\n             It has been developed by the DoD and thus has been used in military and safety-critical applications (like civil aviation).\r\n             The first version appeared in the 80s, but it's still actively developed today with\r\n             the newest standard being Ada2012.\r\n*/\r\n\r\n// We try to support full Ada2012\r\n//\r\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\r\n// and titles (user defined function/procedure/package)\r\n// CSS classes are set accordingly\r\n//\r\n// Languages causing problems for language detection:\r\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\r\n// sql (ada default.txt has a lot of sql keywords)\r\n\r\n/** @type LanguageFn */\r\nfunction ada(hljs) {\r\n  // Regular expression for Ada numeric literals.\r\n  // stolen form the VHDL highlighter\r\n\r\n  // Decimal literal:\r\n  const INTEGER_RE = '\\\\d(_|\\\\d)*';\r\n  const EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\r\n  const DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\r\n\r\n  // Based literal:\r\n  const BASED_INTEGER_RE = '\\\\w+';\r\n  const BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\r\n\r\n  const NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\r\n\r\n  // Identifier regex\r\n  const ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\r\n\r\n  // bad chars, only allowed in literals\r\n  const BAD_CHARS = `[]\\\\{\\\\}%#'\"`;\r\n\r\n  // Ada doesn't have block comments, only line comments\r\n  const COMMENTS = hljs.COMMENT('--', '$');\r\n\r\n  // variable declarations of the form\r\n  // Foo : Bar := Baz;\r\n  // where only Bar will be highlighted\r\n  const VAR_DECLS = {\r\n    // TODO: These spaces are not required by the Ada syntax\r\n    // however, I have yet to see handwritten Ada code where\r\n    // someone does not put spaces around :\r\n    begin: '\\\\s+:\\\\s+',\r\n    end: '\\\\s*(:=|;|\\\\)|=>|$)',\r\n    // endsWithParent: true,\r\n    // returnBegin: true,\r\n    illegal: BAD_CHARS,\r\n    contains: [\r\n      {\r\n        // workaround to avoid highlighting\r\n        // named loops and declare blocks\r\n        beginKeywords: 'loop for declare others',\r\n        endsParent: true\r\n      },\r\n      {\r\n        // properly highlight all modifiers\r\n        className: 'keyword',\r\n        beginKeywords: 'not null constant access function procedure in out aliased exception'\r\n      },\r\n      {\r\n        className: 'type',\r\n        begin: ID_REGEX,\r\n        endsParent: true,\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n\r\n  return {\r\n    name: 'Ada',\r\n    case_insensitive: true,\r\n    keywords: {\r\n      keyword:\r\n                'abort else new return abs elsif not reverse abstract end ' +\r\n                'accept entry select access exception of separate aliased exit or some ' +\r\n                'all others subtype and for out synchronized array function overriding ' +\r\n                'at tagged generic package task begin goto pragma terminate ' +\r\n                'body private then if procedure type case in protected constant interface ' +\r\n                'is raise use declare range delay limited record when delta loop rem while ' +\r\n                'digits renames with do mod requeue xor',\r\n      literal:\r\n                'True False'\r\n    },\r\n    contains: [\r\n      COMMENTS,\r\n      // strings \"foobar\"\r\n      {\r\n        className: 'string',\r\n        begin: /\"/,\r\n        end: /\"/,\r\n        contains: [{\r\n          begin: /\"\"/,\r\n          relevance: 0\r\n        }]\r\n      },\r\n      // characters ''\r\n      {\r\n        // character literals always contain one char\r\n        className: 'string',\r\n        begin: /'.'/\r\n      },\r\n      {\r\n        // number literals\r\n        className: 'number',\r\n        begin: NUMBER_RE,\r\n        relevance: 0\r\n      },\r\n      {\r\n        // Attributes\r\n        className: 'symbol',\r\n        begin: \"'\" + ID_REGEX\r\n      },\r\n      {\r\n        // package definition, maybe inside generic\r\n        className: 'title',\r\n        begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?',\r\n        end: '(is|$)',\r\n        keywords: 'package body',\r\n        excludeBegin: true,\r\n        excludeEnd: true,\r\n        illegal: BAD_CHARS\r\n      },\r\n      {\r\n        // function/procedure declaration/definition\r\n        // maybe inside generic\r\n        begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+',\r\n        end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\r\n        keywords: 'overriding function procedure with is renames return',\r\n        // we need to re-match the 'function' keyword, so that\r\n        // the title mode below matches only exactly once\r\n        returnBegin: true,\r\n        contains:\r\n                [\r\n                  COMMENTS,\r\n                  {\r\n                    // name of the function/procedure\r\n                    className: 'title',\r\n                    begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\r\n                    end: '(\\\\(|\\\\s+|$)',\r\n                    excludeBegin: true,\r\n                    excludeEnd: true,\r\n                    illegal: BAD_CHARS\r\n                  },\r\n                  // 'self'\r\n                  // // parameter types\r\n                  VAR_DECLS,\r\n                  {\r\n                    // return type\r\n                    className: 'type',\r\n                    begin: '\\\\breturn\\\\s+',\r\n                    end: '(\\\\s+|;|$)',\r\n                    keywords: 'return',\r\n                    excludeBegin: true,\r\n                    excludeEnd: true,\r\n                    // we are done with functions\r\n                    endsParent: true,\r\n                    illegal: BAD_CHARS\r\n\r\n                  }\r\n                ]\r\n      },\r\n      {\r\n        // new type declarations\r\n        // maybe inside generic\r\n        className: 'type',\r\n        begin: '\\\\b(sub)?type\\\\s+',\r\n        end: '\\\\s+',\r\n        keywords: 'type',\r\n        excludeBegin: true,\r\n        illegal: BAD_CHARS\r\n      },\r\n\r\n      // see comment above the definition\r\n      VAR_DECLS\r\n\r\n      // no markup\r\n      // relevance boosters for small snippets\r\n      // {begin: '\\\\s*=>\\\\s*'},\r\n      // {begin: '\\\\s*:=\\\\s*'},\r\n      // {begin: '\\\\s+:=\\\\s+'},\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = ada;\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAoBA,aAAS,IAAI,MAAM;AAKjB,YAAM,aAAa;AACnB,YAAM,cAAc,cAAc;AAClC,YAAM,qBAAqB,aAAa,SAAS,aAAa,QAAa,cAAc;AAGzF,YAAM,mBAAmB;AACzB,YAAM,mBAAmB,aAAa,MAAM,mBAAmB,SAAS,mBAAmB,SAAmB,cAAc;AAE5H,YAAM,YAAY,SAAS,mBAAmB,MAAM,qBAAqB;AAGzE,YAAM,WAAW;AAGjB,YAAM,YAAY;AAGlB,YAAM,WAAW,KAAK,QAAQ,MAAM,GAAG;AAKvC,YAAM,YAAY;AAAA;AAAA;AAAA;AAAA,QAIhB,OAAO;AAAA,QACP,KAAK;AAAA;AAAA;AAAA,QAGL,SAAS;AAAA,QACT,UAAU;AAAA,UACR;AAAA;AAAA;AAAA,YAGE,eAAe;AAAA,YACf,YAAY;AAAA,UACd;AAAA,UACA;AAAA;AAAA,YAEE,WAAW;AAAA,YACX,eAAe;AAAA,UACjB;AAAA,UACA;AAAA,YACE,WAAW;AAAA,YACX,OAAO;AAAA,YACP,YAAY;AAAA,YACZ,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,QACL,MAAM;AAAA,QACN,kBAAkB;AAAA,QAClB,UAAU;AAAA,UACR,SACU;AAAA,UAOV,SACU;AAAA,QACZ;AAAA,QACA,UAAU;AAAA,UACR;AAAA;AAAA,UAEA;AAAA,YACE,WAAW;AAAA,YACX,OAAO;AAAA,YACP,KAAK;AAAA,YACL,UAAU,CAAC;AAAA,cACT,OAAO;AAAA,cACP,WAAW;AAAA,YACb,CAAC;AAAA,UACH;AAAA;AAAA,UAEA;AAAA;AAAA,YAEE,WAAW;AAAA,YACX,OAAO;AAAA,UACT;AAAA,UACA;AAAA;AAAA,YAEE,WAAW;AAAA,YACX,OAAO;AAAA,YACP,WAAW;AAAA,UACb;AAAA,UACA;AAAA;AAAA,YAEE,WAAW;AAAA,YACX,OAAO,MAAM;AAAA,UACf;AAAA,UACA;AAAA;AAAA,YAEE,WAAW;AAAA,YACX,OAAO;AAAA,YACP,KAAK;AAAA,YACL,UAAU;AAAA,YACV,cAAc;AAAA,YACd,YAAY;AAAA,YACZ,SAAS;AAAA,UACX;AAAA,UACA;AAAA;AAAA;AAAA,YAGE,OAAO;AAAA,YACP,KAAK;AAAA,YACL,UAAU;AAAA;AAAA;AAAA,YAGV,aAAa;AAAA,YACb,UACQ;AAAA,cACE;AAAA,cACA;AAAA;AAAA,gBAEE,WAAW;AAAA,gBACX,OAAO;AAAA,gBACP,KAAK;AAAA,gBACL,cAAc;AAAA,gBACd,YAAY;AAAA,gBACZ,SAAS;AAAA,cACX;AAAA;AAAA;AAAA,cAGA;AAAA,cACA;AAAA;AAAA,gBAEE,WAAW;AAAA,gBACX,OAAO;AAAA,gBACP,KAAK;AAAA,gBACL,UAAU;AAAA,gBACV,cAAc;AAAA,gBACd,YAAY;AAAA;AAAA,gBAEZ,YAAY;AAAA,gBACZ,SAAS;AAAA,cAEX;AAAA,YACF;AAAA,UACV;AAAA,UACA;AAAA;AAAA;AAAA,YAGE,WAAW;AAAA,YACX,OAAO;AAAA,YACP,KAAK;AAAA,YACL,UAAU;AAAA,YACV,cAAc;AAAA,YACd,SAAS;AAAA,UACX;AAAA;AAAA,UAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOF;AAAA,MACF;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
