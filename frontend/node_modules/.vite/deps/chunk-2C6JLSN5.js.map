{
  "version": 3,
  "sources": ["../../refractor/lang/avisynth.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = avisynth\r\navisynth.displayName = 'avisynth'\r\navisynth.aliases = ['avs']\r\nfunction avisynth(Prism) {\r\n  // http://avisynth.nl/index.php/The_full_AviSynth_grammar\r\n  ;(function (Prism) {\r\n    function replace(pattern, replacements) {\r\n      return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\r\n        return replacements[+index]\r\n      })\r\n    }\r\n    function re(pattern, replacements, flags) {\r\n      return RegExp(replace(pattern, replacements), flags || '')\r\n    }\r\n    var types = /bool|clip|float|int|string|val/.source\r\n    var internals = [\r\n      // bools\r\n      /is(?:bool|clip|float|int|string)|defined|(?:(?:internal)?function|var)?exists?/\r\n        .source, // control\r\n      /apply|assert|default|eval|import|nop|select|undefined/.source, // global\r\n      /opt_(?:allowfloataudio|avipadscanlines|dwchannelmask|enable_(?:b64a|planartopackedrgb|v210|y3_10_10|y3_10_16)|usewaveextensible|vdubplanarhack)|set(?:cachemode|maxcpu|memorymax|planarlegacyalignment|workingdir)/\r\n        .source, // conv\r\n      /hex(?:value)?|value/.source, // numeric\r\n      /abs|ceil|continued(?:denominator|numerator)?|exp|floor|fmod|frac|log(?:10)?|max|min|muldiv|pi|pow|rand|round|sign|spline|sqrt/\r\n        .source, // trig\r\n      /a?sinh?|a?cosh?|a?tan[2h]?/.source, // bit\r\n      /(?:bit(?:and|not|x?or|[lr]?shift[aslu]?|sh[lr]|sa[lr]|[lr]rotatel?|ro[rl]|te?st|set(?:count)?|cl(?:ea)?r|ch(?:an)?ge?))/\r\n        .source, // runtime\r\n      /average(?:[bgr]|chroma[uv]|luma)|(?:[rgb]|chroma[uv]|luma|rgb|[yuv](?=difference(?:fromprevious|tonext)))difference(?:fromprevious|tonext)?|[yuvrgb]plane(?:median|min|max|minmaxdifference)/\r\n        .source, // script\r\n      /getprocessinfo|logmsg|script(?:dir(?:utf8)?|file(?:utf8)?|name(?:utf8)?)|setlogparams/\r\n        .source, // string\r\n      /chr|(?:fill|find|left|mid|replace|rev|right)str|format|[lu]case|ord|str(?:cmpi?|fromutf8|len|toutf8)|time|trim(?:all|left|right)/\r\n        .source, // version\r\n      /isversionorgreater|version(?:number|string)/.source, // helper\r\n      /buildpixeltype|colorspacenametopixeltype/.source, // avsplus\r\n      /addautoloaddir|on(?:cpu|cuda)|prefetch|setfiltermtmode/.source\r\n    ].join('|')\r\n    var properties = [\r\n      // content\r\n      /has(?:audio|video)/.source, // resolution\r\n      /height|width/.source, // framerate\r\n      /frame(?:count|rate)|framerate(?:denominator|numerator)/.source, // interlacing\r\n      /getparity|is(?:field|frame)based/.source, // color format\r\n      /bitspercomponent|componentsize|hasalpha|is(?:planar(?:rgba?)?|interleaved|rgb(?:24|32|48|64)?|y(?:8|u(?:va?|y2))?|yv(?:12|16|24|411)|420|422|444|packedrgb)|numcomponents|pixeltype/\r\n        .source, // audio\r\n      /audio(?:bits|channels|duration|length(?:[fs]|hi|lo)?|rate)|isaudio(?:float|int)/\r\n        .source\r\n    ].join('|')\r\n    var filters = [\r\n      // source\r\n      /avi(?:file)?source|directshowsource|image(?:reader|source|sourceanim)|opendmlsource|segmented(?:avisource|directshowsource)|wavsource/\r\n        .source, // color\r\n      /coloryuv|convertbacktoyuy2|convertto(?:RGB(?:24|32|48|64)|(?:planar)?RGBA?|Y8?|YV(?:12|16|24|411)|YUVA?(?:411|420|422|444)|YUY2)|fixluminance|gr[ae]yscale|invert|levels|limiter|mergea?rgb|merge(?:chroma|luma)|rgbadjust|show(?:alpha|blue|green|red)|swapuv|tweak|[uv]toy8?|ytouv/\r\n        .source, // overlay\r\n      /(?:colorkey|reset)mask|layer|mask(?:hs)?|merge|overlay|subtract/.source, // geometry\r\n      /addborders|(?:bicubic|bilinear|blackman|gauss|lanczos4|lanczos|point|sinc|spline(?:16|36|64))resize|crop(?:bottom)?|flip(?:horizontal|vertical)|(?:horizontal|vertical)?reduceby2|letterbox|skewrows|turn(?:180|left|right)/\r\n        .source, // pixel\r\n      /blur|fixbrokenchromaupsampling|generalconvolution|(?:spatial|temporal)soften|sharpen/\r\n        .source, // timeline\r\n      /trim|(?:un)?alignedsplice|(?:assume|assumescaled|change|convert)FPS|(?:delete|duplicate)frame|dissolve|fade(?:in|io|out)[02]?|freezeframe|interleave|loop|reverse|select(?:even|odd|(?:range)?every)/\r\n        .source, // interlace\r\n      /assume[bt]ff|assume(?:field|frame)based|bob|complementparity|doubleweave|peculiarblend|pulldown|separate(?:columns|fields|rows)|swapfields|weave(?:columns|rows)?/\r\n        .source, // audio\r\n      /amplify(?:db)?|assumesamplerate|audiodub(?:ex)?|audiotrim|convertaudioto(?:(?:8|16|24|32)bit|float)|converttomono|delayaudio|ensurevbrmp3sync|get(?:left|right)?channel|kill(?:audio|video)|mergechannels|mixaudio|monotostereo|normalize|resampleaudio|ssrc|supereq|timestretch/\r\n        .source, // conditional\r\n      /animate|applyrange|conditional(?:filter|reader|select)|frameevaluate|scriptclip|tcp(?:server|source)|writefile(?:end|if|start)?/\r\n        .source, // export\r\n      /imagewriter/.source, // debug\r\n      /blackness|blankclip|colorbars(?:hd)?|compare|dumpfiltergraph|echo|histogram|info|messageclip|preroll|setgraphanalysis|show(?:framenumber|smpte|time)|showfiveversions|stack(?:horizontal|vertical)|subtitle|tone|version/\r\n        .source\r\n    ].join('|')\r\n    var allinternals = [internals, properties, filters].join('|')\r\n    Prism.languages.avisynth = {\r\n      comment: [\r\n        {\r\n          // Matches [* *] nestable block comments, but only supports 1 level of nested comments\r\n          // /\\[\\*(?:[^\\[*]|\\[(?!\\*)|\\*(?!\\])|<self>)*\\*\\]/\r\n          pattern:\r\n            /(^|[^\\\\])\\[\\*(?:[^\\[*]|\\[(?!\\*)|\\*(?!\\])|\\[\\*(?:[^\\[*]|\\[(?!\\*)|\\*(?!\\]))*\\*\\])*\\*\\]/,\r\n          lookbehind: true,\r\n          greedy: true\r\n        },\r\n        {\r\n          // Matches /* */ block comments\r\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\r\n          lookbehind: true,\r\n          greedy: true\r\n        },\r\n        {\r\n          // Matches # comments\r\n          pattern: /(^|[^\\\\$])#.*/,\r\n          lookbehind: true,\r\n          greedy: true\r\n        }\r\n      ],\r\n      // Handle before strings because optional arguments are surrounded by double quotes\r\n      argument: {\r\n        pattern: re(/\\b(?:<<0>>)\\s+(\"?)\\w+\\1/.source, [types], 'i'),\r\n        inside: {\r\n          keyword: /^\\w+/\r\n        }\r\n      },\r\n      // Optional argument assignment\r\n      'argument-label': {\r\n        pattern: /([,(][\\s\\\\]*)\\w+\\s*=(?!=)/,\r\n        lookbehind: true,\r\n        inside: {\r\n          'argument-name': {\r\n            pattern: /^\\w+/,\r\n            alias: 'punctuation'\r\n          },\r\n          punctuation: /=$/\r\n        }\r\n      },\r\n      string: [\r\n        {\r\n          // triple double-quoted\r\n          pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\r\n          greedy: true\r\n        },\r\n        {\r\n          // single double-quoted\r\n          pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\r\n          greedy: true,\r\n          inside: {\r\n            constant: {\r\n              // These *are* case-sensitive!\r\n              pattern:\r\n                /\\b(?:DEFAULT_MT_MODE|(?:MAINSCRIPT|PROGRAM|SCRIPT)DIR|(?:MACHINE|USER)_(?:CLASSIC|PLUS)_PLUGINS)\\b/\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      // The special \"last\" variable that takes the value of the last implicitly returned clip\r\n      variable: /\\b(?:last)\\b/i,\r\n      boolean: /\\b(?:false|no|true|yes)\\b/i,\r\n      keyword:\r\n        /\\b(?:catch|else|for|function|global|if|return|try|while|__END__)\\b/i,\r\n      constant: /\\bMT_(?:MULTI_INSTANCE|NICE_FILTER|SERIALIZED|SPECIAL_MT)\\b/,\r\n      // AviSynth's internal functions, filters, and properties\r\n      'builtin-function': {\r\n        pattern: re(/\\b(?:<<0>>)\\b/.source, [allinternals], 'i'),\r\n        alias: 'function'\r\n      },\r\n      'type-cast': {\r\n        pattern: re(/\\b(?:<<0>>)(?=\\s*\\()/.source, [types], 'i'),\r\n        alias: 'keyword'\r\n      },\r\n      // External/user-defined filters\r\n      function: {\r\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\()|(\\.)[a-z_]\\w*\\b/i,\r\n        lookbehind: true\r\n      },\r\n      // Matches a \\ as the first or last character on a line\r\n      'line-continuation': {\r\n        pattern: /(^[ \\t]*)\\\\|\\\\(?=[ \\t]*$)/m,\r\n        lookbehind: true,\r\n        alias: 'punctuation'\r\n      },\r\n      number:\r\n        /\\B\\$(?:[\\da-f]{6}|[\\da-f]{8})\\b|(?:(?:\\b|\\B-)\\d+(?:\\.\\d*)?\\b|\\B\\.\\d+\\b)/i,\r\n      operator: /\\+\\+?|[!=<>]=?|&&|\\|\\||[?:*/%-]/,\r\n      punctuation: /[{}\\[\\]();,.]/\r\n    }\r\n    Prism.languages.avs = Prism.languages.avisynth\r\n  })(Prism)\r\n}\r\n"],
  "mappings": "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",
  "names": ["Prism"]
}
