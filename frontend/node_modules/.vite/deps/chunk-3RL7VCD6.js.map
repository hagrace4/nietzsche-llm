{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/xquery.js"],
  "sourcesContent": ["/*\r\nLanguage: XQuery\r\nAuthor: Dirk Kirsten <dk@basex.org>\r\nContributor: Duncan Paterson\r\nDescription: Supports XQuery 3.1 including XQuery Update 3, so also XPath (as it is a superset)\r\nRefactored to process xml constructor syntax and function-bodies. Added missing data-types, xpath operands, inbuilt functions, and query prologs\r\nWebsite: https://www.w3.org/XML/Query/\r\nCategory: functional\r\nAudit: 2020\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction xquery(_hljs) {\r\n  // see https://www.w3.org/TR/xquery/#id-terminal-delimitation\r\n  const KEYWORDS =\r\n    'module schema namespace boundary-space preserve no-preserve strip default collation base-uri ordering context decimal-format decimal-separator copy-namespaces empty-sequence except exponent-separator external grouping-separator inherit no-inherit lax minus-sign per-mille percent schema-attribute schema-element strict unordered zero-digit ' +\r\n    'declare import option function validate variable ' +\r\n    'for at in let where order group by return if then else ' +\r\n    'tumbling sliding window start when only end previous next stable ' +\r\n    'ascending descending allowing empty greatest least some every satisfies switch case typeswitch try catch ' +\r\n    'and or to union intersect instance of treat as castable cast map array ' +\r\n    'delete insert into replace value rename copy modify update';\r\n\r\n  // Node Types (sorted by inheritance)\r\n  // atomic types (sorted by inheritance)\r\n  const TYPE =\r\n    'item document-node node attribute document element comment namespace namespace-node processing-instruction text construction ' +\r\n    'xs:anyAtomicType xs:untypedAtomic xs:duration xs:time xs:decimal xs:float xs:double xs:gYearMonth xs:gYear xs:gMonthDay xs:gMonth xs:gDay xs:boolean xs:base64Binary xs:hexBinary xs:anyURI xs:QName xs:NOTATION xs:dateTime xs:dateTimeStamp xs:date xs:string xs:normalizedString xs:token xs:language xs:NMTOKEN xs:Name xs:NCName xs:ID xs:IDREF xs:ENTITY xs:integer xs:nonPositiveInteger xs:negativeInteger xs:long xs:int xs:short xs:byte xs:nonNegativeInteger xs:unisignedLong xs:unsignedInt xs:unsignedShort xs:unsignedByte xs:positiveInteger xs:yearMonthDuration xs:dayTimeDuration';\r\n\r\n  const LITERAL =\r\n    'eq ne lt le gt ge is ' +\r\n    'self:: child:: descendant:: descendant-or-self:: attribute:: following:: following-sibling:: parent:: ancestor:: ancestor-or-self:: preceding:: preceding-sibling:: ' +\r\n    'NaN';\r\n\r\n  // functions (TODO: find regex for op: without breaking build)\r\n  const BUILT_IN = {\r\n    className: 'built_in',\r\n    variants: [\r\n      {\r\n        begin: /\\barray:/,\r\n        end: /(?:append|filter|flatten|fold-(?:left|right)|for-each(?:-pair)?|get|head|insert-before|join|put|remove|reverse|size|sort|subarray|tail)\\b/\r\n      },\r\n      {\r\n        begin: /\\bmap:/,\r\n        end: /(?:contains|entry|find|for-each|get|keys|merge|put|remove|size)\\b/\r\n      },\r\n      {\r\n        begin: /\\bmath:/,\r\n        end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\\b/\r\n      },\r\n      {\r\n        begin: /\\bop:/,\r\n        end: /\\(/,\r\n        excludeEnd: true\r\n      },\r\n      {\r\n        begin: /\\bfn:/,\r\n        end: /\\(/,\r\n        excludeEnd: true\r\n      },\r\n      // do not highlight inbuilt strings as variable or xml element names\r\n      {\r\n        begin: /[^</$:'\"-]\\b(?:abs|accumulator-(?:after|before)|adjust-(?:date(?:Time)?|time)-to-timezone|analyze-string|apply|available-(?:environment-variables|system-properties)|avg|base-uri|boolean|ceiling|codepoints?-(?:equal|to-string)|collation-key|collection|compare|concat|contains(?:-token)?|copy-of|count|current(?:-)?(?:date(?:Time)?|time|group(?:ing-key)?|output-uri|merge-(?:group|key))?data|dateTime|days?-from-(?:date(?:Time)?|duration)|deep-equal|default-(?:collation|language)|distinct-values|document(?:-uri)?|doc(?:-available)?|element-(?:available|with-id)|empty|encode-for-uri|ends-with|environment-variable|error|escape-html-uri|exactly-one|exists|false|filter|floor|fold-(?:left|right)|for-each(?:-pair)?|format-(?:date(?:Time)?|time|integer|number)|function-(?:arity|available|lookup|name)|generate-id|has-children|head|hours-from-(?:dateTime|duration|time)|id(?:ref)?|implicit-timezone|in-scope-prefixes|index-of|innermost|insert-before|iri-to-uri|json-(?:doc|to-xml)|key|lang|last|load-xquery-module|local-name(?:-from-QName)?|(?:lower|upper)-case|matches|max|minutes-from-(?:dateTime|duration|time)|min|months?-from-(?:date(?:Time)?|duration)|name(?:space-uri-?(?:for-prefix|from-QName)?)?|nilled|node-name|normalize-(?:space|unicode)|not|number|one-or-more|outermost|parse-(?:ietf-date|json)|path|position|(?:prefix-from-)?QName|random-number-generator|regex-group|remove|replace|resolve-(?:QName|uri)|reverse|root|round(?:-half-to-even)?|seconds-from-(?:dateTime|duration|time)|snapshot|sort|starts-with|static-base-uri|stream-available|string-?(?:join|length|to-codepoints)?|subsequence|substring-?(?:after|before)?|sum|system-property|tail|timezone-from-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type-available|unordered|unparsed-(?:entity|text)?-?(?:public-id|uri|available|lines)?|uri-collection|xml-to-json|years?-from-(?:date(?:Time)?|duration)|zero-or-one)\\b/\r\n      },\r\n      {\r\n        begin: /\\blocal:/,\r\n        end: /\\(/,\r\n        excludeEnd: true\r\n      },\r\n      {\r\n        begin: /\\bzip:/,\r\n        end: /(?:zip-file|(?:xml|html|text|binary)-entry| (?:update-)?entries)\\b/\r\n      },\r\n      {\r\n        begin: /\\b(?:util|db|functx|app|xdmp|xmldb):/,\r\n        end: /\\(/,\r\n        excludeEnd: true\r\n      }\r\n    ]\r\n  };\r\n\r\n  const TITLE = {\r\n    className: 'title',\r\n    begin: /\\bxquery version \"[13]\\.[01]\"\\s?(?:encoding \".+\")?/,\r\n    end: /;/\r\n  };\r\n\r\n  const VAR = {\r\n    className: 'variable',\r\n    begin: /[$][\\w\\-:]+/\r\n  };\r\n\r\n  const NUMBER = {\r\n    className: 'number',\r\n    begin: /(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b/,\r\n    relevance: 0\r\n  };\r\n\r\n  const STRING = {\r\n    className: 'string',\r\n    variants: [\r\n      {\r\n        begin: /\"/,\r\n        end: /\"/,\r\n        contains: [\r\n          {\r\n            begin: /\"\"/,\r\n            relevance: 0\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        begin: /'/,\r\n        end: /'/,\r\n        contains: [\r\n          {\r\n            begin: /''/,\r\n            relevance: 0\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const ANNOTATION = {\r\n    className: 'meta',\r\n    begin: /%[\\w\\-:]+/\r\n  };\r\n\r\n  const COMMENT = {\r\n    className: 'comment',\r\n    begin: /\\(:/,\r\n    end: /:\\)/,\r\n    relevance: 10,\r\n    contains: [\r\n      {\r\n        className: 'doctag',\r\n        begin: /@\\w+/\r\n      }\r\n    ]\r\n  };\r\n\r\n  // see https://www.w3.org/TR/xquery/#id-computedConstructors\r\n  // mocha: computed_inbuilt\r\n  // see https://www.regexpal.com/?fam=99749\r\n  const COMPUTED = {\r\n    beginKeywords: 'element attribute comment document processing-instruction',\r\n    end: /\\{/,\r\n    excludeEnd: true\r\n  };\r\n\r\n  // mocha: direct_method\r\n  const DIRECT = {\r\n    begin: /<([\\w._:-]+)(\\s+\\S*=('|\").*('|\"))?>/,\r\n    end: /(\\/[\\w._:-]+>)/,\r\n    subLanguage: 'xml',\r\n    contains: [\r\n      {\r\n        begin: /\\{/,\r\n        end: /\\}/,\r\n        subLanguage: 'xquery'\r\n      },\r\n      'self'\r\n    ]\r\n  };\r\n\r\n  const CONTAINS = [\r\n    VAR,\r\n    BUILT_IN,\r\n    STRING,\r\n    NUMBER,\r\n    COMMENT,\r\n    ANNOTATION,\r\n    TITLE,\r\n    COMPUTED,\r\n    DIRECT\r\n  ];\r\n\r\n  return {\r\n    name: 'XQuery',\r\n    aliases: [\r\n      'xpath',\r\n      'xq'\r\n    ],\r\n    case_insensitive: false,\r\n    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,\r\n    keywords: {\r\n      $pattern: /[a-zA-Z$][a-zA-Z0-9_:-]*/,\r\n      keyword: KEYWORDS,\r\n      type: TYPE,\r\n      literal: LITERAL\r\n    },\r\n    contains: CONTAINS\r\n  };\r\n}\r\n\r\nmodule.exports = xquery;\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAYA,aAAS,OAAO,OAAO;AAErB,YAAM,WACJ;AAUF,YAAM,OACJ;AAGF,YAAM,UACJ;AAKF,YAAM,WAAW;AAAA,QACf,WAAW;AAAA,QACX,UAAU;AAAA,UACR;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,UACP;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,UACP;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,UACP;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,YACL,YAAY;AAAA,UACd;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,YACL,YAAY;AAAA,UACd;AAAA;AAAA,UAEA;AAAA,YACE,OAAO;AAAA,UACT;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,YACL,YAAY;AAAA,UACd;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,UACP;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,YACL,YAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAEA,YAAM,QAAQ;AAAA,QACZ,WAAW;AAAA,QACX,OAAO;AAAA,QACP,KAAK;AAAA,MACP;AAEA,YAAM,MAAM;AAAA,QACV,WAAW;AAAA,QACX,OAAO;AAAA,MACT;AAEA,YAAM,SAAS;AAAA,QACb,WAAW;AAAA,QACX,OAAO;AAAA,QACP,WAAW;AAAA,MACb;AAEA,YAAM,SAAS;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,UACR;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,YACL,UAAU;AAAA,cACR;AAAA,gBACE,OAAO;AAAA,gBACP,WAAW;AAAA,cACb;AAAA,YACF;AAAA,UACF;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,YACL,UAAU;AAAA,cACR;AAAA,gBACE,OAAO;AAAA,gBACP,WAAW;AAAA,cACb;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,YAAM,aAAa;AAAA,QACjB,WAAW;AAAA,QACX,OAAO;AAAA,MACT;AAEA,YAAM,UAAU;AAAA,QACd,WAAW;AAAA,QACX,OAAO;AAAA,QACP,KAAK;AAAA,QACL,WAAW;AAAA,QACX,UAAU;AAAA,UACR;AAAA,YACE,WAAW;AAAA,YACX,OAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAKA,YAAM,WAAW;AAAA,QACf,eAAe;AAAA,QACf,KAAK;AAAA,QACL,YAAY;AAAA,MACd;AAGA,YAAM,SAAS;AAAA,QACb,OAAO;AAAA,QACP,KAAK;AAAA,QACL,aAAa;AAAA,QACb,UAAU;AAAA,UACR;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,YACL,aAAa;AAAA,UACf;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAEA,YAAM,WAAW;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS;AAAA,UACP;AAAA,UACA;AAAA,QACF;AAAA,QACA,kBAAkB;AAAA,QAClB,SAAS;AAAA,QACT,UAAU;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,UACT,MAAM;AAAA,UACN,SAAS;AAAA,QACX;AAAA,QACA,UAAU;AAAA,MACZ;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
