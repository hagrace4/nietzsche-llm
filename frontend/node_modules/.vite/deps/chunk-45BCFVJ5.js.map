{
  "version": 3,
  "sources": ["../../refractor/lang/typescript.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = typescript\r\ntypescript.displayName = 'typescript'\r\ntypescript.aliases = ['ts']\r\nfunction typescript(Prism) {\r\n  ;(function (Prism) {\r\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\r\n      'class-name': {\r\n        pattern:\r\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: null // see below\r\n      },\r\n      builtin:\r\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\r\n    }) // The keywords TypeScript adds to JavaScript\r\n    Prism.languages.typescript.keyword.push(\r\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\r\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\r\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\r\n    ) // doesn't work with TS because TS is too complex\r\n    delete Prism.languages.typescript['parameter']\r\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\r\n    var typeInside = Prism.languages.extend('typescript', {})\r\n    delete typeInside['class-name']\r\n    Prism.languages.typescript['class-name'].inside = typeInside\r\n    Prism.languages.insertBefore('typescript', 'function', {\r\n      decorator: {\r\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\r\n        inside: {\r\n          at: {\r\n            pattern: /^@/,\r\n            alias: 'operator'\r\n          },\r\n          function: /^[\\s\\S]+/\r\n        }\r\n      },\r\n      'generic-function': {\r\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\r\n        pattern:\r\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\r\n        greedy: true,\r\n        inside: {\r\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\r\n          generic: {\r\n            pattern: /<[\\s\\S]+/,\r\n            // everything after the first <\r\n            alias: 'class-name',\r\n            inside: typeInside\r\n          }\r\n        }\r\n      }\r\n    })\r\n    Prism.languages.ts = Prism.languages.typescript\r\n  })(Prism)\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,eAAW,cAAc;AACzB,eAAW,UAAU,CAAC,IAAI;AAC1B,aAAS,WAAW,OAAO;AACzB;AAAC,OAAC,SAAUA,QAAO;AACjB,QAAAA,OAAM,UAAU,aAAaA,OAAM,UAAU,OAAO,cAAc;AAAA,UAChE,cAAc;AAAA,YACZ,SACE;AAAA,YACF,YAAY;AAAA,YACZ,QAAQ;AAAA,YACR,QAAQ;AAAA;AAAA,UACV;AAAA,UACA,SACE;AAAA,QACJ,CAAC;AACD,QAAAA,OAAM,UAAU,WAAW,QAAQ;AAAA,UACjC;AAAA;AAAA,UACA;AAAA;AAAA,UACA;AAAA,QACF;AACA,eAAOA,OAAM,UAAU,WAAW,WAAW;AAC7C,eAAOA,OAAM,UAAU,WAAW,kBAAkB;AACpD,YAAI,aAAaA,OAAM,UAAU,OAAO,cAAc,CAAC,CAAC;AACxD,eAAO,WAAW,YAAY;AAC9B,QAAAA,OAAM,UAAU,WAAW,YAAY,EAAE,SAAS;AAClD,QAAAA,OAAM,UAAU,aAAa,cAAc,YAAY;AAAA,UACrD,WAAW;AAAA,YACT,SAAS;AAAA,YACT,QAAQ;AAAA,cACN,IAAI;AAAA,gBACF,SAAS;AAAA,gBACT,OAAO;AAAA,cACT;AAAA,cACA,UAAU;AAAA,YACZ;AAAA,UACF;AAAA,UACA,oBAAoB;AAAA;AAAA,YAElB,SACE;AAAA,YACF,QAAQ;AAAA,YACR,QAAQ;AAAA,cACN,UAAU;AAAA,cACV,SAAS;AAAA,gBACP,SAAS;AAAA;AAAA,gBAET,OAAO;AAAA,gBACP,QAAQ;AAAA,cACV;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AACD,QAAAA,OAAM,UAAU,KAAKA,OAAM,UAAU;AAAA,MACvC,GAAG,KAAK;AAAA,IACV;AAAA;AAAA;",
  "names": ["Prism"]
}
