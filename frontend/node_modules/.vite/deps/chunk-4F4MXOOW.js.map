{
  "version": 3,
  "sources": ["../../refractor/lang/mermaid.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = mermaid\r\nmermaid.displayName = 'mermaid'\r\nmermaid.aliases = []\r\nfunction mermaid(Prism) {\r\n  Prism.languages.mermaid = {\r\n    comment: {\r\n      pattern: /%%.*/,\r\n      greedy: true\r\n    },\r\n    style: {\r\n      pattern:\r\n        /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\r\n      lookbehind: true,\r\n      inside: {\r\n        property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\r\n        operator: /:/,\r\n        punctuation: /,/\r\n      }\r\n    },\r\n    'inter-arrow-label': {\r\n      pattern:\r\n        /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\r\n      lookbehind: true,\r\n      greedy: true,\r\n      inside: {\r\n        arrow: {\r\n          pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\r\n          alias: 'operator'\r\n        },\r\n        label: {\r\n          pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\r\n          lookbehind: true,\r\n          alias: 'property'\r\n        },\r\n        'arrow-head': {\r\n          pattern: /^\\S+/,\r\n          alias: ['arrow', 'operator']\r\n        }\r\n      }\r\n    },\r\n    arrow: [\r\n      // This might look complex but it really isn't.\r\n      // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The\r\n      // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow\r\n      // characters in the one lookbehind because that would create too many false negatives. So we have to split the\r\n      // arrows into different patterns.\r\n      {\r\n        // ER diagram\r\n        pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\r\n        lookbehind: true,\r\n        alias: 'operator'\r\n      },\r\n      {\r\n        // flow chart\r\n        // (?:==+|--+|-\\.*-)\r\n        pattern:\r\n          /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\r\n        lookbehind: true,\r\n        alias: 'operator'\r\n      },\r\n      {\r\n        // sequence diagram\r\n        pattern:\r\n          /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\r\n        lookbehind: true,\r\n        alias: 'operator'\r\n      },\r\n      {\r\n        // class diagram\r\n        pattern:\r\n          /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\r\n        lookbehind: true,\r\n        alias: 'operator'\r\n      }\r\n    ],\r\n    label: {\r\n      pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\r\n      lookbehind: true,\r\n      greedy: true,\r\n      alias: 'property'\r\n    },\r\n    text: {\r\n      pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\r\n      alias: 'string'\r\n    },\r\n    string: {\r\n      pattern: /\"[^\"\\r\\n]*\"/,\r\n      greedy: true\r\n    },\r\n    annotation: {\r\n      pattern:\r\n        /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\r\n      alias: 'important'\r\n    },\r\n    keyword: [\r\n      // This language has both case-sensitive and case-insensitive keywords\r\n      {\r\n        pattern:\r\n          /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\r\n        lookbehind: true,\r\n        greedy: true\r\n      },\r\n      {\r\n        pattern:\r\n          /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }\r\n    ],\r\n    entity: /#[a-z0-9]+;/,\r\n    operator: {\r\n      pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\r\n      lookbehind: true\r\n    },\r\n    punctuation: /[(){};]/\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,YAAQ,cAAc;AACtB,YAAQ,UAAU,CAAC;AACnB,aAAS,QAAQ,OAAO;AACtB,YAAM,UAAU,UAAU;AAAA,QACxB,SAAS;AAAA,UACP,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,QACA,OAAO;AAAA,UACL,SACE;AAAA,UACF,YAAY;AAAA,UACZ,QAAQ;AAAA,YACN,UAAU;AAAA,YACV,UAAU;AAAA,YACV,aAAa;AAAA,UACf;AAAA,QACF;AAAA,QACA,qBAAqB;AAAA,UACnB,SACE;AAAA,UACF,YAAY;AAAA,UACZ,QAAQ;AAAA,UACR,QAAQ;AAAA,YACN,OAAO;AAAA,cACL,SAAS;AAAA,cACT,OAAO;AAAA,YACT;AAAA,YACA,OAAO;AAAA,cACL,SAAS;AAAA,cACT,YAAY;AAAA,cACZ,OAAO;AAAA,YACT;AAAA,YACA,cAAc;AAAA,cACZ,SAAS;AAAA,cACT,OAAO,CAAC,SAAS,UAAU;AAAA,YAC7B;AAAA,UACF;AAAA,QACF;AAAA,QACA,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAML;AAAA;AAAA,YAEE,SAAS;AAAA,YACT,YAAY;AAAA,YACZ,OAAO;AAAA,UACT;AAAA,UACA;AAAA;AAAA;AAAA,YAGE,SACE;AAAA,YACF,YAAY;AAAA,YACZ,OAAO;AAAA,UACT;AAAA,UACA;AAAA;AAAA,YAEE,SACE;AAAA,YACF,YAAY;AAAA,YACZ,OAAO;AAAA,UACT;AAAA,UACA;AAAA;AAAA,YAEE,SACE;AAAA,YACF,YAAY;AAAA,YACZ,OAAO;AAAA,UACT;AAAA,QACF;AAAA,QACA,OAAO;AAAA,UACL,SAAS;AAAA,UACT,YAAY;AAAA,UACZ,QAAQ;AAAA,UACR,OAAO;AAAA,QACT;AAAA,QACA,MAAM;AAAA,UACJ,SAAS;AAAA,UACT,OAAO;AAAA,QACT;AAAA,QACA,QAAQ;AAAA,UACN,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,QACA,YAAY;AAAA,UACV,SACE;AAAA,UACF,OAAO;AAAA,QACT;AAAA,QACA,SAAS;AAAA;AAAA,UAEP;AAAA,YACE,SACE;AAAA,YACF,YAAY;AAAA,YACZ,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,YACE,SACE;AAAA,YACF,YAAY;AAAA,YACZ,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,QACA,QAAQ;AAAA,QACR,UAAU;AAAA,UACR,SAAS;AAAA,UACT,YAAY;AAAA,QACd;AAAA,QACA,aAAa;AAAA,MACf;AAAA,IACF;AAAA;AAAA;",
  "names": []
}
