{
  "version": 3,
  "sources": ["../../refractor/lang/docker.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = docker\r\ndocker.displayName = 'docker'\r\ndocker.aliases = ['dockerfile']\r\nfunction docker(Prism) {\r\n  ;(function (Prism) {\r\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\r\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\r\n    var spaceAfterBackSlash =\r\n      /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source // At least one space, comment, or line break\r\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(\r\n      /<SP_BS>/g,\r\n      function () {\r\n        return spaceAfterBackSlash\r\n      }\r\n    )\r\n    var string =\r\n      /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/\r\n        .source\r\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(\r\n      /<STR>/g,\r\n      function () {\r\n        return string\r\n      }\r\n    )\r\n    var stringRule = {\r\n      pattern: RegExp(string),\r\n      greedy: true\r\n    }\r\n    var commentRule = {\r\n      pattern: /(^[ \\t]*)#.*/m,\r\n      lookbehind: true,\r\n      greedy: true\r\n    }\r\n    /**\r\n     * @param {string} source\r\n     * @param {string} flags\r\n     * @returns {RegExp}\r\n     */\r\n    function re(source, flags) {\r\n      source = source\r\n        .replace(/<OPT>/g, function () {\r\n          return option\r\n        })\r\n        .replace(/<SP>/g, function () {\r\n          return space\r\n        })\r\n      return RegExp(source, flags)\r\n    }\r\n    Prism.languages.docker = {\r\n      instruction: {\r\n        pattern:\r\n          /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          options: {\r\n            pattern: re(\r\n              /(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source,\r\n              'i'\r\n            ),\r\n            lookbehind: true,\r\n            greedy: true,\r\n            inside: {\r\n              property: {\r\n                pattern: /(^|\\s)--[\\w-]+/,\r\n                lookbehind: true\r\n              },\r\n              string: [\r\n                stringRule,\r\n                {\r\n                  pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\r\n                  lookbehind: true\r\n                }\r\n              ],\r\n              operator: /\\\\$/m,\r\n              punctuation: /=/\r\n            }\r\n          },\r\n          keyword: [\r\n            {\r\n              // https://docs.docker.com/engine/reference/builder/#healthcheck\r\n              pattern: re(\r\n                /(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/\r\n                  .source,\r\n                'i'\r\n              ),\r\n              lookbehind: true,\r\n              greedy: true\r\n            },\r\n            {\r\n              // https://docs.docker.com/engine/reference/builder/#from\r\n              pattern: re(\r\n                /(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/\r\n                  .source,\r\n                'i'\r\n              ),\r\n              lookbehind: true,\r\n              greedy: true\r\n            },\r\n            {\r\n              // https://docs.docker.com/engine/reference/builder/#onbuild\r\n              pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\r\n              lookbehind: true,\r\n              greedy: true\r\n            },\r\n            {\r\n              pattern: /^\\w+/,\r\n              greedy: true\r\n            }\r\n          ],\r\n          comment: commentRule,\r\n          string: stringRule,\r\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\r\n          operator: /\\\\$/m\r\n        }\r\n      },\r\n      comment: commentRule\r\n    }\r\n    Prism.languages.dockerfile = Prism.languages.docker\r\n  })(Prism)\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,WAAO,cAAc;AACrB,WAAO,UAAU,CAAC,YAAY;AAC9B,aAAS,OAAO,OAAO;AACrB;AAAC,OAAC,SAAUA,QAAO;AAGjB,YAAI,sBACF,sDAAsD;AACxD,YAAI,QAAQ,0CAA0C,OAAO;AAAA,UAC3D;AAAA,UACA,WAAY;AACV,mBAAO;AAAA,UACT;AAAA,QACF;AACA,YAAI,SACF,0EACG;AACL,YAAI,SAAS,8CAA8C,OAAO;AAAA,UAChE;AAAA,UACA,WAAY;AACV,mBAAO;AAAA,UACT;AAAA,QACF;AACA,YAAI,aAAa;AAAA,UACf,SAAS,OAAO,MAAM;AAAA,UACtB,QAAQ;AAAA,QACV;AACA,YAAI,cAAc;AAAA,UAChB,SAAS;AAAA,UACT,YAAY;AAAA,UACZ,QAAQ;AAAA,QACV;AAMA,iBAAS,GAAG,QAAQ,OAAO;AACzB,mBAAS,OACN,QAAQ,UAAU,WAAY;AAC7B,mBAAO;AAAA,UACT,CAAC,EACA,QAAQ,SAAS,WAAY;AAC5B,mBAAO;AAAA,UACT,CAAC;AACH,iBAAO,OAAO,QAAQ,KAAK;AAAA,QAC7B;AACA,QAAAA,OAAM,UAAU,SAAS;AAAA,UACvB,aAAa;AAAA,YACX,SACE;AAAA,YACF,YAAY;AAAA,YACZ,QAAQ;AAAA,YACR,QAAQ;AAAA,cACN,SAAS;AAAA,gBACP,SAAS;AAAA,kBACP,gDAAgD;AAAA,kBAChD;AAAA,gBACF;AAAA,gBACA,YAAY;AAAA,gBACZ,QAAQ;AAAA,gBACR,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,SAAS;AAAA,oBACT,YAAY;AAAA,kBACd;AAAA,kBACA,QAAQ;AAAA,oBACN;AAAA,oBACA;AAAA,sBACE,SAAS;AAAA,sBACT,YAAY;AAAA,oBACd;AAAA,kBACF;AAAA,kBACA,UAAU;AAAA,kBACV,aAAa;AAAA,gBACf;AAAA,cACF;AAAA,cACA,SAAS;AAAA,gBACP;AAAA;AAAA,kBAEE,SAAS;AAAA,oBACP,iEACG;AAAA,oBACH;AAAA,kBACF;AAAA,kBACA,YAAY;AAAA,kBACZ,QAAQ;AAAA,gBACV;AAAA,gBACA;AAAA;AAAA,kBAEE,SAAS;AAAA,oBACP,iEACG;AAAA,oBACH;AAAA,kBACF;AAAA,kBACA,YAAY;AAAA,kBACZ,QAAQ;AAAA,gBACV;AAAA,gBACA;AAAA;AAAA,kBAEE,SAAS,GAAG,oBAAoB,QAAQ,GAAG;AAAA,kBAC3C,YAAY;AAAA,kBACZ,QAAQ;AAAA,gBACV;AAAA,gBACA;AAAA,kBACE,SAAS;AAAA,kBACT,QAAQ;AAAA,gBACV;AAAA,cACF;AAAA,cACA,SAAS;AAAA,cACT,QAAQ;AAAA,cACR,UAAU;AAAA,cACV,UAAU;AAAA,YACZ;AAAA,UACF;AAAA,UACA,SAAS;AAAA,QACX;AACA,QAAAA,OAAM,UAAU,aAAaA,OAAM,UAAU;AAAA,MAC/C,GAAG,KAAK;AAAA,IACV;AAAA;AAAA;",
  "names": ["Prism"]
}
