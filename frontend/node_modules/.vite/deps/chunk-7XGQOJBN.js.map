{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/julia.js"],
  "sourcesContent": ["/*\r\nLanguage: Julia\r\nDescription: Julia is a high-level, high-performance, dynamic programming language.\r\nAuthor: Kenta Sato <bicycle1885@gmail.com>\r\nContributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>\r\nWebsite: https://julialang.org\r\n*/\r\n\r\nfunction julia(hljs) {\r\n  // Since there are numerous special names in Julia, it is too much trouble\r\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\r\n  // built-ins) are automatically generated from Julia 1.5.2 itself through\r\n  // the following scripts for each.\r\n\r\n  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\r\n  var VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*';\r\n\r\n  // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)\r\n  // import REPL.REPLCompletions\r\n  // res = String[\"in\", \"isa\", \"where\"]\r\n  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(\"\"))\r\n  //     if !(contains(kw, \" \") || kw == \"struct\")\r\n  //         push!(res, kw)\r\n  //     end\r\n  // end\r\n  // sort!(unique!(res))\r\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\r\n  var KEYWORD_LIST = [\r\n    'baremodule',\r\n    'begin',\r\n    'break',\r\n    'catch',\r\n    'ccall',\r\n    'const',\r\n    'continue',\r\n    'do',\r\n    'else',\r\n    'elseif',\r\n    'end',\r\n    'export',\r\n    'false',\r\n    'finally',\r\n    'for',\r\n    'function',\r\n    'global',\r\n    'if',\r\n    'import',\r\n    'in',\r\n    'isa',\r\n    'let',\r\n    'local',\r\n    'macro',\r\n    'module',\r\n    'quote',\r\n    'return',\r\n    'true',\r\n    'try',\r\n    'using',\r\n    'where',\r\n    'while',\r\n  ];\r\n\r\n  // # literal generator (Julia 1.5.2)\r\n  // import REPL.REPLCompletions\r\n  // res = String[\"true\", \"false\"]\r\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\r\n  //                     REPLCompletions.completions(\"\", 0)[1])\r\n  //     try\r\n  //         v = eval(Symbol(compl.mod))\r\n  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\r\n  //             push!(res, compl.mod)\r\n  //         end\r\n  //     catch e\r\n  //     end\r\n  // end\r\n  // sort!(unique!(res))\r\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\r\n  var LITERAL_LIST = [\r\n    'ARGS',\r\n    'C_NULL',\r\n    'DEPOT_PATH',\r\n    'ENDIAN_BOM',\r\n    'ENV',\r\n    'Inf',\r\n    'Inf16',\r\n    'Inf32',\r\n    'Inf64',\r\n    'InsertionSort',\r\n    'LOAD_PATH',\r\n    'MergeSort',\r\n    'NaN',\r\n    'NaN16',\r\n    'NaN32',\r\n    'NaN64',\r\n    'PROGRAM_FILE',\r\n    'QuickSort',\r\n    'RoundDown',\r\n    'RoundFromZero',\r\n    'RoundNearest',\r\n    'RoundNearestTiesAway',\r\n    'RoundNearestTiesUp',\r\n    'RoundToZero',\r\n    'RoundUp',\r\n    'VERSION|0',\r\n    'devnull',\r\n    'false',\r\n    'im',\r\n    'missing',\r\n    'nothing',\r\n    'pi',\r\n    'stderr',\r\n    'stdin',\r\n    'stdout',\r\n    'true',\r\n    'undef',\r\n    'π',\r\n    'ℯ',\r\n  ];\r\n\r\n  // # built_in generator (Julia 1.5.2)\r\n  // import REPL.REPLCompletions\r\n  // res = String[]\r\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\r\n  //                     REPLCompletions.completions(\"\", 0)[1])\r\n  //     try\r\n  //         v = eval(Symbol(compl.mod))\r\n  //         if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\r\n  //             push!(res, compl.mod)\r\n  //         end\r\n  //     catch e\r\n  //     end\r\n  // end\r\n  // sort!(unique!(res))\r\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\r\n  var BUILT_IN_LIST = [\r\n    'AbstractArray',\r\n    'AbstractChannel',\r\n    'AbstractChar',\r\n    'AbstractDict',\r\n    'AbstractDisplay',\r\n    'AbstractFloat',\r\n    'AbstractIrrational',\r\n    'AbstractMatrix',\r\n    'AbstractRange',\r\n    'AbstractSet',\r\n    'AbstractString',\r\n    'AbstractUnitRange',\r\n    'AbstractVecOrMat',\r\n    'AbstractVector',\r\n    'Any',\r\n    'ArgumentError',\r\n    'Array',\r\n    'AssertionError',\r\n    'BigFloat',\r\n    'BigInt',\r\n    'BitArray',\r\n    'BitMatrix',\r\n    'BitSet',\r\n    'BitVector',\r\n    'Bool',\r\n    'BoundsError',\r\n    'CapturedException',\r\n    'CartesianIndex',\r\n    'CartesianIndices',\r\n    'Cchar',\r\n    'Cdouble',\r\n    'Cfloat',\r\n    'Channel',\r\n    'Char',\r\n    'Cint',\r\n    'Cintmax_t',\r\n    'Clong',\r\n    'Clonglong',\r\n    'Cmd',\r\n    'Colon',\r\n    'Complex',\r\n    'ComplexF16',\r\n    'ComplexF32',\r\n    'ComplexF64',\r\n    'CompositeException',\r\n    'Condition',\r\n    'Cptrdiff_t',\r\n    'Cshort',\r\n    'Csize_t',\r\n    'Cssize_t',\r\n    'Cstring',\r\n    'Cuchar',\r\n    'Cuint',\r\n    'Cuintmax_t',\r\n    'Culong',\r\n    'Culonglong',\r\n    'Cushort',\r\n    'Cvoid',\r\n    'Cwchar_t',\r\n    'Cwstring',\r\n    'DataType',\r\n    'DenseArray',\r\n    'DenseMatrix',\r\n    'DenseVecOrMat',\r\n    'DenseVector',\r\n    'Dict',\r\n    'DimensionMismatch',\r\n    'Dims',\r\n    'DivideError',\r\n    'DomainError',\r\n    'EOFError',\r\n    'Enum',\r\n    'ErrorException',\r\n    'Exception',\r\n    'ExponentialBackOff',\r\n    'Expr',\r\n    'Float16',\r\n    'Float32',\r\n    'Float64',\r\n    'Function',\r\n    'GlobalRef',\r\n    'HTML',\r\n    'IO',\r\n    'IOBuffer',\r\n    'IOContext',\r\n    'IOStream',\r\n    'IdDict',\r\n    'IndexCartesian',\r\n    'IndexLinear',\r\n    'IndexStyle',\r\n    'InexactError',\r\n    'InitError',\r\n    'Int',\r\n    'Int128',\r\n    'Int16',\r\n    'Int32',\r\n    'Int64',\r\n    'Int8',\r\n    'Integer',\r\n    'InterruptException',\r\n    'InvalidStateException',\r\n    'Irrational',\r\n    'KeyError',\r\n    'LinRange',\r\n    'LineNumberNode',\r\n    'LinearIndices',\r\n    'LoadError',\r\n    'MIME',\r\n    'Matrix',\r\n    'Method',\r\n    'MethodError',\r\n    'Missing',\r\n    'MissingException',\r\n    'Module',\r\n    'NTuple',\r\n    'NamedTuple',\r\n    'Nothing',\r\n    'Number',\r\n    'OrdinalRange',\r\n    'OutOfMemoryError',\r\n    'OverflowError',\r\n    'Pair',\r\n    'PartialQuickSort',\r\n    'PermutedDimsArray',\r\n    'Pipe',\r\n    'ProcessFailedException',\r\n    'Ptr',\r\n    'QuoteNode',\r\n    'Rational',\r\n    'RawFD',\r\n    'ReadOnlyMemoryError',\r\n    'Real',\r\n    'ReentrantLock',\r\n    'Ref',\r\n    'Regex',\r\n    'RegexMatch',\r\n    'RoundingMode',\r\n    'SegmentationFault',\r\n    'Set',\r\n    'Signed',\r\n    'Some',\r\n    'StackOverflowError',\r\n    'StepRange',\r\n    'StepRangeLen',\r\n    'StridedArray',\r\n    'StridedMatrix',\r\n    'StridedVecOrMat',\r\n    'StridedVector',\r\n    'String',\r\n    'StringIndexError',\r\n    'SubArray',\r\n    'SubString',\r\n    'SubstitutionString',\r\n    'Symbol',\r\n    'SystemError',\r\n    'Task',\r\n    'TaskFailedException',\r\n    'Text',\r\n    'TextDisplay',\r\n    'Timer',\r\n    'Tuple',\r\n    'Type',\r\n    'TypeError',\r\n    'TypeVar',\r\n    'UInt',\r\n    'UInt128',\r\n    'UInt16',\r\n    'UInt32',\r\n    'UInt64',\r\n    'UInt8',\r\n    'UndefInitializer',\r\n    'UndefKeywordError',\r\n    'UndefRefError',\r\n    'UndefVarError',\r\n    'Union',\r\n    'UnionAll',\r\n    'UnitRange',\r\n    'Unsigned',\r\n    'Val',\r\n    'Vararg',\r\n    'VecElement',\r\n    'VecOrMat',\r\n    'Vector',\r\n    'VersionNumber',\r\n    'WeakKeyDict',\r\n    'WeakRef',\r\n  ];\r\n\r\n  var KEYWORDS = {\r\n    $pattern: VARIABLE_NAME_RE,\r\n    keyword: KEYWORD_LIST,\r\n    literal: LITERAL_LIST,\r\n    built_in: BUILT_IN_LIST,\r\n  };\r\n\r\n  // placeholder for recursive self-reference\r\n  var DEFAULT = {\r\n    keywords: KEYWORDS, illegal: /<\\//\r\n  };\r\n\r\n  // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/\r\n  var NUMBER = {\r\n    className: 'number',\r\n    // supported numeric literals:\r\n    //  * binary literal (e.g. 0x10)\r\n    //  * octal literal (e.g. 0o76543210)\r\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\r\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\r\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\r\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\r\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\r\n    relevance: 0\r\n  };\r\n\r\n  var CHAR = {\r\n    className: 'string',\r\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\r\n  };\r\n\r\n  var INTERPOLATION = {\r\n    className: 'subst',\r\n    begin: /\\$\\(/, end: /\\)/,\r\n    keywords: KEYWORDS\r\n  };\r\n\r\n  var INTERPOLATED_VARIABLE = {\r\n    className: 'variable',\r\n    begin: '\\\\$' + VARIABLE_NAME_RE\r\n  };\r\n\r\n  // TODO: neatly escape normal code in string literal\r\n  var STRING = {\r\n    className: 'string',\r\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\r\n    variants: [\r\n      { begin: /\\w*\"\"\"/, end: /\"\"\"\\w*/, relevance: 10 },\r\n      { begin: /\\w*\"/, end: /\"\\w*/ }\r\n    ]\r\n  };\r\n\r\n  var COMMAND = {\r\n    className: 'string',\r\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\r\n    begin: '`', end: '`'\r\n  };\r\n\r\n  var MACROCALL = {\r\n    className: 'meta',\r\n    begin: '@' + VARIABLE_NAME_RE\r\n  };\r\n\r\n  var COMMENT = {\r\n    className: 'comment',\r\n    variants: [\r\n      { begin: '#=', end: '=#', relevance: 10 },\r\n      { begin: '#', end: '$' }\r\n    ]\r\n  };\r\n\r\n  DEFAULT.name = 'Julia';\r\n  DEFAULT.contains = [\r\n    NUMBER,\r\n    CHAR,\r\n    STRING,\r\n    COMMAND,\r\n    MACROCALL,\r\n    COMMENT,\r\n    hljs.HASH_COMMENT_MODE,\r\n    {\r\n      className: 'keyword',\r\n      begin:\r\n        '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\r\n    },\r\n    {begin: /<:/}  // relevance booster\r\n  ];\r\n  INTERPOLATION.contains = DEFAULT.contains;\r\n\r\n  return DEFAULT;\r\n}\r\n\r\nmodule.exports = julia;\r\n"],
  "mappings": "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",
  "names": []
}
