{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/coq.js"],
  "sourcesContent": ["/*\r\nLanguage: Coq\r\nAuthor: Stephan Boyer <stephan@stephanboyer.com>\r\nCategory: functional\r\nWebsite: https://coq.inria.fr\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction coq(hljs) {\r\n  return {\r\n    name: 'Coq',\r\n    keywords: {\r\n      keyword:\r\n        '_|0 as at cofix else end exists exists2 fix for forall fun if IF in let ' +\r\n        'match mod Prop return Set then Type using where with ' +\r\n        'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' +\r\n        'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' +\r\n        'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' +\r\n        'Conjectures Constant constr Constraint Constructors Context Corollary ' +\r\n        'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent ' +\r\n        'Derive Drop eauto End Equality Eval Example Existential Existentials ' +\r\n        'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' +\r\n        'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' +\r\n        'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' +\r\n        'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' +\r\n        'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' +\r\n        'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' +\r\n        'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' +\r\n        'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' +\r\n        'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' +\r\n        'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' +\r\n        'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' +\r\n        'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' +\r\n        'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' +\r\n        'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' +\r\n        'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' +\r\n        'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' +\r\n        'Verbose Visibility where with',\r\n      built_in:\r\n        'abstract absurd admit after apply as assert assumption at auto autorewrite ' +\r\n        'autounfold before bottom btauto by case case_eq cbn cbv change ' +\r\n        'classical_left classical_right clear clearbody cofix compare compute ' +\r\n        'congruence constr_eq constructor contradict contradiction cut cutrewrite ' +\r\n        'cycle decide decompose dependent destruct destruction dintuition ' +\r\n        'discriminate discrR do double dtauto eapply eassumption eauto ecase ' +\r\n        'econstructor edestruct ediscriminate eelim eexact eexists einduction ' +\r\n        'einjection eleft elim elimtype enough equality erewrite eright ' +\r\n        'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' +\r\n        'field field_simplify field_simplify_eq first firstorder fix fold fourier ' +\r\n        'functional generalize generalizing gfail give_up has_evar hnf idtac in ' +\r\n        'induction injection instantiate intro intro_pattern intros intuition ' +\r\n        'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' +\r\n        'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' +\r\n        'record red refine reflexivity remember rename repeat replace revert ' +\r\n        'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' +\r\n        'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' +\r\n        'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' +\r\n        'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' +\r\n        'symmetry tactic tauto time timeout top transitivity trivial try tryif ' +\r\n        'unfold unify until using vm_compute with'\r\n    },\r\n    contains: [\r\n      hljs.QUOTE_STRING_MODE,\r\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\r\n      hljs.C_NUMBER_MODE,\r\n      {\r\n        className: 'type',\r\n        excludeBegin: true,\r\n        begin: '\\\\|\\\\s*',\r\n        end: '\\\\w+'\r\n      },\r\n      { // relevance booster\r\n        begin: /[-=]>/\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = coq;\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAQA,aAAS,IAAI,MAAM;AACjB,aAAO;AAAA,QACL,MAAM;AAAA,QACN,UAAU;AAAA,UACR,SACE;AAAA,UAyBF,UACE;AAAA,QAqBJ;AAAA,QACA,UAAU;AAAA,UACR,KAAK;AAAA,UACL,KAAK,QAAQ,UAAU,QAAQ;AAAA,UAC/B,KAAK;AAAA,UACL;AAAA,YACE,WAAW;AAAA,YACX,cAAc;AAAA,YACd,OAAO;AAAA,YACP,KAAK;AAAA,UACP;AAAA,UACA;AAAA;AAAA,YACE,OAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
