{
  "version": 3,
  "sources": ["../../refractor/lang/sml.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = sml\r\nsml.displayName = 'sml'\r\nsml.aliases = ['smlnj']\r\nfunction sml(Prism) {\r\n  // https://smlfamily.github.io/sml97-defn.pdf\r\n  // https://people.mpi-sws.org/~rossberg/sml.html\r\n  ;(function (Prism) {\r\n    var keywords =\r\n      /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i\r\n    Prism.languages.sml = {\r\n      // allow one level of nesting\r\n      comment:\r\n        /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\r\n      string: {\r\n        pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\r\n        greedy: true\r\n      },\r\n      'class-name': [\r\n        {\r\n          // This is only an approximation since the real grammar is context-free\r\n          //\r\n          // Why the main loop so complex?\r\n          // The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot\r\n          // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be\r\n          // followed by a long identifier.\r\n          pattern: RegExp(\r\n            /((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source\r\n              .replace(/<NOT-LAST>/g, function () {\r\n                return /\\s*(?:[*,]|->)/.source\r\n              })\r\n              .replace(/<TERMINAL>/g, function () {\r\n                return /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/\r\n                  .source\r\n              })\r\n              .replace(/<LONG-ID>/g, function () {\r\n                return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source\r\n              })\r\n              .replace(/<KEYWORD>/g, function () {\r\n                return keywords.source\r\n              }),\r\n            'i'\r\n          ),\r\n          lookbehind: true,\r\n          greedy: true,\r\n          inside: null // see below\r\n        },\r\n        {\r\n          pattern:\r\n            /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\r\n          lookbehind: true\r\n        }\r\n      ],\r\n      function: {\r\n        pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\r\n        lookbehind: true\r\n      },\r\n      keyword: keywords,\r\n      variable: {\r\n        pattern: /(^|[^\\w'])'[\\w']*/,\r\n        lookbehind: true\r\n      },\r\n      number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\r\n      word: {\r\n        pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\r\n        alias: 'constant'\r\n      },\r\n      boolean: /\\b(?:false|true)\\b/i,\r\n      operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\r\n      punctuation: /[(){}\\[\\].:,;]/\r\n    }\r\n    Prism.languages.sml['class-name'][0].inside = Prism.languages.sml\r\n    Prism.languages.smlnj = Prism.languages.sml\r\n  })(Prism)\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,QAAI,cAAc;AAClB,QAAI,UAAU,CAAC,OAAO;AACtB,aAAS,IAAI,OAAO;AAGlB;AAAC,OAAC,SAAUA,QAAO;AACjB,YAAI,WACF;AACF,QAAAA,OAAM,UAAU,MAAM;AAAA;AAAA,UAEpB,SACE;AAAA,UACF,QAAQ;AAAA,YACN,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,UACA,cAAc;AAAA,YACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAOE,SAAS;AAAA,gBACP,2HAA2H,OACxH,QAAQ,eAAe,WAAY;AAClC,yBAAO,iBAAiB;AAAA,gBAC1B,CAAC,EACA,QAAQ,eAAe,WAAY;AAClC,yBAAO,6FACJ;AAAA,gBACL,CAAC,EACA,QAAQ,cAAc,WAAY;AACjC,yBAAO,+BAA+B;AAAA,gBACxC,CAAC,EACA,QAAQ,cAAc,WAAY;AACjC,yBAAO,SAAS;AAAA,gBAClB,CAAC;AAAA,gBACH;AAAA,cACF;AAAA,cACA,YAAY;AAAA,cACZ,QAAQ;AAAA,cACR,QAAQ;AAAA;AAAA,YACV;AAAA,YACA;AAAA,cACE,SACE;AAAA,cACF,YAAY;AAAA,YACd;AAAA,UACF;AAAA,UACA,UAAU;AAAA,YACR,SAAS;AAAA,YACT,YAAY;AAAA,UACd;AAAA,UACA,SAAS;AAAA,UACT,UAAU;AAAA,YACR,SAAS;AAAA,YACT,YAAY;AAAA,UACd;AAAA,UACA,QAAQ;AAAA,UACR,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,OAAO;AAAA,UACT;AAAA,UACA,SAAS;AAAA,UACT,UAAU;AAAA,UACV,aAAa;AAAA,QACf;AACA,QAAAA,OAAM,UAAU,IAAI,YAAY,EAAE,CAAC,EAAE,SAASA,OAAM,UAAU;AAC9D,QAAAA,OAAM,UAAU,QAAQA,OAAM,UAAU;AAAA,MAC1C,GAAG,KAAK;AAAA,IACV;AAAA;AAAA;",
  "names": ["Prism"]
}
