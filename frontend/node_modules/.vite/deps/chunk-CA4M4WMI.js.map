{
  "version": 3,
  "sources": ["../../refractor/lang/jsx.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = jsx\r\njsx.displayName = 'jsx'\r\njsx.aliases = []\r\nfunction jsx(Prism) {\r\n  ;(function (Prism) {\r\n    var javascript = Prism.util.clone(Prism.languages.javascript)\r\n    var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source\r\n    var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source\r\n    var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source\r\n    /**\r\n     * @param {string} source\r\n     * @param {string} [flags]\r\n     */\r\n    function re(source, flags) {\r\n      source = source\r\n        .replace(/<S>/g, function () {\r\n          return space\r\n        })\r\n        .replace(/<BRACES>/g, function () {\r\n          return braces\r\n        })\r\n        .replace(/<SPREAD>/g, function () {\r\n          return spread\r\n        })\r\n      return RegExp(source, flags)\r\n    }\r\n    spread = re(spread).source\r\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript)\r\n    Prism.languages.jsx.tag.pattern = re(\r\n      /<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/\r\n        .source\r\n    )\r\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/\r\n    Prism.languages.jsx.tag.inside['attr-value'].pattern =\r\n      /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/\r\n    Prism.languages.jsx.tag.inside['tag'].inside['class-name'] =\r\n      /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/\r\n    Prism.languages.jsx.tag.inside['comment'] = javascript['comment']\r\n    Prism.languages.insertBefore(\r\n      'inside',\r\n      'attr-name',\r\n      {\r\n        spread: {\r\n          pattern: re(/<SPREAD>/.source),\r\n          inside: Prism.languages.jsx\r\n        }\r\n      },\r\n      Prism.languages.jsx.tag\r\n    )\r\n    Prism.languages.insertBefore(\r\n      'inside',\r\n      'special-attr',\r\n      {\r\n        script: {\r\n          // Allow for two levels of nesting\r\n          pattern: re(/=<BRACES>/.source),\r\n          alias: 'language-javascript',\r\n          inside: {\r\n            'script-punctuation': {\r\n              pattern: /^=(?=\\{)/,\r\n              alias: 'punctuation'\r\n            },\r\n            rest: Prism.languages.jsx\r\n          }\r\n        }\r\n      },\r\n      Prism.languages.jsx.tag\r\n    ) // The following will handle plain text inside tags\r\n    var stringifyToken = function (token) {\r\n      if (!token) {\r\n        return ''\r\n      }\r\n      if (typeof token === 'string') {\r\n        return token\r\n      }\r\n      if (typeof token.content === 'string') {\r\n        return token.content\r\n      }\r\n      return token.content.map(stringifyToken).join('')\r\n    }\r\n    var walkTokens = function (tokens) {\r\n      var openedTags = []\r\n      for (var i = 0; i < tokens.length; i++) {\r\n        var token = tokens[i]\r\n        var notTagNorBrace = false\r\n        if (typeof token !== 'string') {\r\n          if (\r\n            token.type === 'tag' &&\r\n            token.content[0] &&\r\n            token.content[0].type === 'tag'\r\n          ) {\r\n            // We found a tag, now find its kind\r\n            if (token.content[0].content[0].content === '</') {\r\n              // Closing tag\r\n              if (\r\n                openedTags.length > 0 &&\r\n                openedTags[openedTags.length - 1].tagName ===\r\n                  stringifyToken(token.content[0].content[1])\r\n              ) {\r\n                // Pop matching opening tag\r\n                openedTags.pop()\r\n              }\r\n            } else {\r\n              if (token.content[token.content.length - 1].content === '/>') {\r\n                // Autoclosed tag, ignore\r\n              } else {\r\n                // Opening tag\r\n                openedTags.push({\r\n                  tagName: stringifyToken(token.content[0].content[1]),\r\n                  openedBraces: 0\r\n                })\r\n              }\r\n            }\r\n          } else if (\r\n            openedTags.length > 0 &&\r\n            token.type === 'punctuation' &&\r\n            token.content === '{'\r\n          ) {\r\n            // Here we might have entered a JSX context inside a tag\r\n            openedTags[openedTags.length - 1].openedBraces++\r\n          } else if (\r\n            openedTags.length > 0 &&\r\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\r\n            token.type === 'punctuation' &&\r\n            token.content === '}'\r\n          ) {\r\n            // Here we might have left a JSX context inside a tag\r\n            openedTags[openedTags.length - 1].openedBraces--\r\n          } else {\r\n            notTagNorBrace = true\r\n          }\r\n        }\r\n        if (notTagNorBrace || typeof token === 'string') {\r\n          if (\r\n            openedTags.length > 0 &&\r\n            openedTags[openedTags.length - 1].openedBraces === 0\r\n          ) {\r\n            // Here we are inside a tag, and not inside a JSX context.\r\n            // That's plain text: drop any tokens matched.\r\n            var plainText = stringifyToken(token) // And merge text with adjacent text\r\n            if (\r\n              i < tokens.length - 1 &&\r\n              (typeof tokens[i + 1] === 'string' ||\r\n                tokens[i + 1].type === 'plain-text')\r\n            ) {\r\n              plainText += stringifyToken(tokens[i + 1])\r\n              tokens.splice(i + 1, 1)\r\n            }\r\n            if (\r\n              i > 0 &&\r\n              (typeof tokens[i - 1] === 'string' ||\r\n                tokens[i - 1].type === 'plain-text')\r\n            ) {\r\n              plainText = stringifyToken(tokens[i - 1]) + plainText\r\n              tokens.splice(i - 1, 1)\r\n              i--\r\n            }\r\n            tokens[i] = new Prism.Token(\r\n              'plain-text',\r\n              plainText,\r\n              null,\r\n              plainText\r\n            )\r\n          }\r\n        }\r\n        if (token.content && typeof token.content !== 'string') {\r\n          walkTokens(token.content)\r\n        }\r\n      }\r\n    }\r\n    Prism.hooks.add('after-tokenize', function (env) {\r\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\r\n        return\r\n      }\r\n      walkTokens(env.tokens)\r\n    })\r\n  })(Prism)\r\n}\r\n"],
  "mappings": "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",
  "names": ["Prism"]
}
