{
  "version": 3,
  "sources": ["../../refractor/lang/dhall.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = dhall\r\ndhall.displayName = 'dhall'\r\ndhall.aliases = []\r\nfunction dhall(Prism) {\r\n  // ABNF grammar:\r\n  // https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\r\n  Prism.languages.dhall = {\r\n    // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\r\n    // The multi-line pattern is essentially this:\r\n    //   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\r\n    comment:\r\n      /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\r\n    string: {\r\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\r\n      greedy: true,\r\n      inside: {\r\n        interpolation: {\r\n          pattern: /\\$\\{[^{}]*\\}/,\r\n          inside: {\r\n            expression: {\r\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\r\n              lookbehind: true,\r\n              alias: 'language-dhall',\r\n              inside: null // see blow\r\n            },\r\n            punctuation: /\\$\\{|\\}/\r\n          }\r\n        }\r\n      }\r\n    },\r\n    label: {\r\n      pattern: /`[^`]*`/,\r\n      greedy: true\r\n    },\r\n    url: {\r\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\r\n      pattern:\r\n        /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\r\n      greedy: true\r\n    },\r\n    env: {\r\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\r\n      pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\r\n      greedy: true,\r\n      inside: {\r\n        function: /^env/,\r\n        operator: /^:/,\r\n        variable: /[\\s\\S]+/\r\n      }\r\n    },\r\n    hash: {\r\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\r\n      pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\r\n      inside: {\r\n        function: /sha256/,\r\n        operator: /:/,\r\n        number: /[\\da-fA-F]{64}/\r\n      }\r\n    },\r\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\r\n    keyword:\r\n      /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\r\n    builtin: /\\b(?:None|Some)\\b/,\r\n    boolean: /\\b(?:False|True)\\b/,\r\n    number:\r\n      /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\r\n    operator:\r\n      /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\r\n    punctuation: /\\.\\.|[{}\\[\\](),./]/,\r\n    // we'll just assume that every capital word left is a type name\r\n    'class-name': /\\b[A-Z]\\w*\\b/\r\n  }\r\n  Prism.languages.dhall.string.inside.interpolation.inside.expression.inside =\r\n    Prism.languages.dhall\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,UAAM,cAAc;AACpB,UAAM,UAAU,CAAC;AACjB,aAAS,MAAM,OAAO;AAGpB,YAAM,UAAU,QAAQ;AAAA;AAAA;AAAA;AAAA,QAItB,SACE;AAAA,QACF,QAAQ;AAAA,UACN,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,QAAQ;AAAA,YACN,eAAe;AAAA,cACb,SAAS;AAAA,cACT,QAAQ;AAAA,gBACN,YAAY;AAAA,kBACV,SAAS;AAAA,kBACT,YAAY;AAAA,kBACZ,OAAO;AAAA,kBACP,QAAQ;AAAA;AAAA,gBACV;AAAA,gBACA,aAAa;AAAA,cACf;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,QACA,OAAO;AAAA,UACL,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,QACA,KAAK;AAAA;AAAA,UAEH,SACE;AAAA,UACF,QAAQ;AAAA,QACV;AAAA,QACA,KAAK;AAAA;AAAA,UAEH,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,QAAQ;AAAA,YACN,UAAU;AAAA,YACV,UAAU;AAAA,YACV,UAAU;AAAA,UACZ;AAAA,QACF;AAAA,QACA,MAAM;AAAA;AAAA,UAEJ,SAAS;AAAA,UACT,QAAQ;AAAA,YACN,UAAU;AAAA,YACV,UAAU;AAAA,YACV,QAAQ;AAAA,UACV;AAAA,QACF;AAAA;AAAA,QAEA,SACE;AAAA,QACF,SAAS;AAAA,QACT,SAAS;AAAA,QACT,QACE;AAAA,QACF,UACE;AAAA,QACF,aAAa;AAAA;AAAA,QAEb,cAAc;AAAA,MAChB;AACA,YAAM,UAAU,MAAM,OAAO,OAAO,cAAc,OAAO,WAAW,SAClE,MAAM,UAAU;AAAA,IACpB;AAAA;AAAA;",
  "names": []
}
