{
  "version": 3,
  "sources": ["../../refractor/lang/javadoclike.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = javadoclike\r\njavadoclike.displayName = 'javadoclike'\r\njavadoclike.aliases = []\r\nfunction javadoclike(Prism) {\r\n  ;(function (Prism) {\r\n    var javaDocLike = (Prism.languages.javadoclike = {\r\n      parameter: {\r\n        pattern:\r\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\r\n        lookbehind: true\r\n      },\r\n      keyword: {\r\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\r\n        // @word, {@word}\r\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\r\n        lookbehind: true\r\n      },\r\n      punctuation: /[{}]/\r\n    })\r\n    /**\r\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\r\n     *\r\n     * @param {string} lang the language add doc comment support to.\r\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\r\n     */\r\n    function docCommentSupport(lang, callback) {\r\n      var tokenName = 'doc-comment'\r\n      var grammar = Prism.languages[lang]\r\n      if (!grammar) {\r\n        return\r\n      }\r\n      var token = grammar[tokenName]\r\n      if (!token) {\r\n        // add doc comment: /** */\r\n        var definition = {}\r\n        definition[tokenName] = {\r\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\r\n          lookbehind: true,\r\n          alias: 'comment'\r\n        }\r\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\r\n        token = grammar[tokenName]\r\n      }\r\n      if (token instanceof RegExp) {\r\n        // convert regex to object\r\n        token = grammar[tokenName] = {\r\n          pattern: token\r\n        }\r\n      }\r\n      if (Array.isArray(token)) {\r\n        for (var i = 0, l = token.length; i < l; i++) {\r\n          if (token[i] instanceof RegExp) {\r\n            token[i] = {\r\n              pattern: token[i]\r\n            }\r\n          }\r\n          callback(token[i])\r\n        }\r\n      } else {\r\n        callback(token)\r\n      }\r\n    }\r\n    /**\r\n     * Adds doc-comment support to the given languages for the given documentation language.\r\n     *\r\n     * @param {string[]|string} languages\r\n     * @param {Object} docLanguage\r\n     */\r\n    function addSupport(languages, docLanguage) {\r\n      if (typeof languages === 'string') {\r\n        languages = [languages]\r\n      }\r\n      languages.forEach(function (lang) {\r\n        docCommentSupport(lang, function (pattern) {\r\n          if (!pattern.inside) {\r\n            pattern.inside = {}\r\n          }\r\n          pattern.inside.rest = docLanguage\r\n        })\r\n      })\r\n    }\r\n    Object.defineProperty(javaDocLike, 'addSupport', {\r\n      value: addSupport\r\n    })\r\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\r\n  })(Prism)\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,gBAAY,cAAc;AAC1B,gBAAY,UAAU,CAAC;AACvB,aAAS,YAAY,OAAO;AAC1B;AAAC,OAAC,SAAUA,QAAO;AACjB,YAAI,cAAeA,OAAM,UAAU,cAAc;AAAA,UAC/C,WAAW;AAAA,YACT,SACE;AAAA,YACF,YAAY;AAAA,UACd;AAAA,UACA,SAAS;AAAA;AAAA;AAAA,YAGP,SAAS;AAAA,YACT,YAAY;AAAA,UACd;AAAA,UACA,aAAa;AAAA,QACf;AAOA,iBAAS,kBAAkB,MAAM,UAAU;AACzC,cAAI,YAAY;AAChB,cAAI,UAAUA,OAAM,UAAU,IAAI;AAClC,cAAI,CAAC,SAAS;AACZ;AAAA,UACF;AACA,cAAI,QAAQ,QAAQ,SAAS;AAC7B,cAAI,CAAC,OAAO;AAEV,gBAAI,aAAa,CAAC;AAClB,uBAAW,SAAS,IAAI;AAAA,cACtB,SAAS;AAAA,cACT,YAAY;AAAA,cACZ,OAAO;AAAA,YACT;AACA,sBAAUA,OAAM,UAAU,aAAa,MAAM,WAAW,UAAU;AAClE,oBAAQ,QAAQ,SAAS;AAAA,UAC3B;AACA,cAAI,iBAAiB,QAAQ;AAE3B,oBAAQ,QAAQ,SAAS,IAAI;AAAA,cAC3B,SAAS;AAAA,YACX;AAAA,UACF;AACA,cAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,qBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,GAAG,KAAK;AAC5C,kBAAI,MAAM,CAAC,aAAa,QAAQ;AAC9B,sBAAM,CAAC,IAAI;AAAA,kBACT,SAAS,MAAM,CAAC;AAAA,gBAClB;AAAA,cACF;AACA,uBAAS,MAAM,CAAC,CAAC;AAAA,YACnB;AAAA,UACF,OAAO;AACL,qBAAS,KAAK;AAAA,UAChB;AAAA,QACF;AAOA,iBAAS,WAAW,WAAW,aAAa;AAC1C,cAAI,OAAO,cAAc,UAAU;AACjC,wBAAY,CAAC,SAAS;AAAA,UACxB;AACA,oBAAU,QAAQ,SAAU,MAAM;AAChC,8BAAkB,MAAM,SAAU,SAAS;AACzC,kBAAI,CAAC,QAAQ,QAAQ;AACnB,wBAAQ,SAAS,CAAC;AAAA,cACpB;AACA,sBAAQ,OAAO,OAAO;AAAA,YACxB,CAAC;AAAA,UACH,CAAC;AAAA,QACH;AACA,eAAO,eAAe,aAAa,cAAc;AAAA,UAC/C,OAAO;AAAA,QACT,CAAC;AACD,oBAAY,WAAW,CAAC,QAAQ,cAAc,KAAK,GAAG,WAAW;AAAA,MACnE,GAAG,KAAK;AAAA,IACV;AAAA;AAAA;",
  "names": ["Prism"]
}
