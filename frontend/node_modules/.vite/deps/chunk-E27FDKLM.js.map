{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/clojure.js"],
  "sourcesContent": ["/*\r\nLanguage: Clojure\r\nDescription: Clojure syntax (based on lisp.js)\r\nAuthor: mfornos\r\nWebsite: https://clojure.org\r\nCategory: lisp\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction clojure(hljs) {\r\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\r\n  const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\r\n  const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';\r\n  const keywords = {\r\n    $pattern: SYMBOL_RE,\r\n    'builtin-name':\r\n      // Clojure keywords\r\n      globals + ' ' +\r\n      'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem ' +\r\n      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? ' +\r\n      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? ' +\r\n      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? ' +\r\n      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . ' +\r\n      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last ' +\r\n      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate ' +\r\n      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext ' +\r\n      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends ' +\r\n      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler ' +\r\n      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter ' +\r\n      'monitor-exit macroexpand macroexpand-1 for dosync and or ' +\r\n      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert ' +\r\n      'peek pop doto proxy first rest cons cast coll last butlast ' +\r\n      'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import ' +\r\n      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! ' +\r\n      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger ' +\r\n      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline ' +\r\n      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking ' +\r\n      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! ' +\r\n      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! ' +\r\n      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty ' +\r\n      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list ' +\r\n      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer ' +\r\n      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate ' +\r\n      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta ' +\r\n      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\r\n  };\r\n\r\n  const SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\r\n\r\n  const SYMBOL = {\r\n    begin: SYMBOL_RE,\r\n    relevance: 0\r\n  };\r\n  const NUMBER = {\r\n    className: 'number',\r\n    begin: SIMPLE_NUMBER_RE,\r\n    relevance: 0\r\n  };\r\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\r\n    illegal: null\r\n  });\r\n  const COMMENT = hljs.COMMENT(\r\n    ';',\r\n    '$',\r\n    {\r\n      relevance: 0\r\n    }\r\n  );\r\n  const LITERAL = {\r\n    className: 'literal',\r\n    begin: /\\b(true|false|nil)\\b/\r\n  };\r\n  const COLLECTION = {\r\n    begin: '[\\\\[\\\\{]',\r\n    end: '[\\\\]\\\\}]'\r\n  };\r\n  const HINT = {\r\n    className: 'comment',\r\n    begin: '\\\\^' + SYMBOL_RE\r\n  };\r\n  const HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\r\n  const KEY = {\r\n    className: 'symbol',\r\n    begin: '[:]{1,2}' + SYMBOL_RE\r\n  };\r\n  const LIST = {\r\n    begin: '\\\\(',\r\n    end: '\\\\)'\r\n  };\r\n  const BODY = {\r\n    endsWithParent: true,\r\n    relevance: 0\r\n  };\r\n  const NAME = {\r\n    keywords: keywords,\r\n    className: 'name',\r\n    begin: SYMBOL_RE,\r\n    relevance: 0,\r\n    starts: BODY\r\n  };\r\n  const DEFAULT_CONTAINS = [\r\n    LIST,\r\n    STRING,\r\n    HINT,\r\n    HINT_COL,\r\n    COMMENT,\r\n    KEY,\r\n    COLLECTION,\r\n    NUMBER,\r\n    LITERAL,\r\n    SYMBOL\r\n  ];\r\n\r\n  const GLOBAL = {\r\n    beginKeywords: globals,\r\n    lexemes: SYMBOL_RE,\r\n    end: '(\\\\[|#|\\\\d|\"|:|\\\\{|\\\\)|\\\\(|$)',\r\n    contains: [\r\n      {\r\n        className: 'title',\r\n        begin: SYMBOL_RE,\r\n        relevance: 0,\r\n        excludeEnd: true,\r\n        // we can only have a single title\r\n        endsParent: true\r\n      }\r\n    ].concat(DEFAULT_CONTAINS)\r\n  };\r\n\r\n  LIST.contains = [\r\n    hljs.COMMENT('comment', ''),\r\n    GLOBAL,\r\n    NAME,\r\n    BODY\r\n  ];\r\n  BODY.contains = DEFAULT_CONTAINS;\r\n  COLLECTION.contains = DEFAULT_CONTAINS;\r\n  HINT_COL.contains = [ COLLECTION ];\r\n\r\n  return {\r\n    name: 'Clojure',\r\n    aliases: [ 'clj' ],\r\n    illegal: /\\S/,\r\n    contains: [\r\n      LIST,\r\n      STRING,\r\n      HINT,\r\n      HINT_COL,\r\n      COMMENT,\r\n      KEY,\r\n      COLLECTION,\r\n      NUMBER,\r\n      LITERAL\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = clojure;\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AASA,aAAS,QAAQ,MAAM;AACrB,YAAM,cAAc;AACpB,YAAM,YAAY,MAAM,cAAc,OAAO,cAAc;AAC3D,YAAM,UAAU;AAChB,YAAM,WAAW;AAAA,QACf,UAAU;AAAA,QACV;AAAA;AAAA,UAEE,UAAU;AAAA;AAAA,MA4Bd;AAEA,YAAM,mBAAmB;AAEzB,YAAM,SAAS;AAAA,QACb,OAAO;AAAA,QACP,WAAW;AAAA,MACb;AACA,YAAM,SAAS;AAAA,QACb,WAAW;AAAA,QACX,OAAO;AAAA,QACP,WAAW;AAAA,MACb;AACA,YAAM,SAAS,KAAK,QAAQ,KAAK,mBAAmB;AAAA,QAClD,SAAS;AAAA,MACX,CAAC;AACD,YAAM,UAAU,KAAK;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,UACE,WAAW;AAAA,QACb;AAAA,MACF;AACA,YAAM,UAAU;AAAA,QACd,WAAW;AAAA,QACX,OAAO;AAAA,MACT;AACA,YAAM,aAAa;AAAA,QACjB,OAAO;AAAA,QACP,KAAK;AAAA,MACP;AACA,YAAM,OAAO;AAAA,QACX,WAAW;AAAA,QACX,OAAO,QAAQ;AAAA,MACjB;AACA,YAAM,WAAW,KAAK,QAAQ,UAAU,KAAK;AAC7C,YAAM,MAAM;AAAA,QACV,WAAW;AAAA,QACX,OAAO,aAAa;AAAA,MACtB;AACA,YAAM,OAAO;AAAA,QACX,OAAO;AAAA,QACP,KAAK;AAAA,MACP;AACA,YAAM,OAAO;AAAA,QACX,gBAAgB;AAAA,QAChB,WAAW;AAAA,MACb;AACA,YAAM,OAAO;AAAA,QACX;AAAA,QACA,WAAW;AAAA,QACX,OAAO;AAAA,QACP,WAAW;AAAA,QACX,QAAQ;AAAA,MACV;AACA,YAAM,mBAAmB;AAAA,QACvB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,YAAM,SAAS;AAAA,QACb,eAAe;AAAA,QACf,SAAS;AAAA,QACT,KAAK;AAAA,QACL,UAAU;AAAA,UACR;AAAA,YACE,WAAW;AAAA,YACX,OAAO;AAAA,YACP,WAAW;AAAA,YACX,YAAY;AAAA;AAAA,YAEZ,YAAY;AAAA,UACd;AAAA,QACF,EAAE,OAAO,gBAAgB;AAAA,MAC3B;AAEA,WAAK,WAAW;AAAA,QACd,KAAK,QAAQ,WAAW,EAAE;AAAA,QAC1B;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,WAAK,WAAW;AAChB,iBAAW,WAAW;AACtB,eAAS,WAAW,CAAE,UAAW;AAEjC,aAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS,CAAE,KAAM;AAAA,QACjB,SAAS;AAAA,QACT,UAAU;AAAA,UACR;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
