{
  "version": 3,
  "sources": ["../../refractor/lang/puppet.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = puppet\r\npuppet.displayName = 'puppet'\r\npuppet.aliases = []\r\nfunction puppet(Prism) {\r\n  ;(function (Prism) {\r\n    Prism.languages.puppet = {\r\n      heredoc: [\r\n        // Matches the content of a quoted heredoc string (subject to interpolation)\r\n        {\r\n          pattern:\r\n            /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\r\n          lookbehind: true,\r\n          alias: 'string',\r\n          inside: {\r\n            // Matches the end tag\r\n            punctuation: /(?=\\S).*\\S(?= *$)/ // See interpolation below\r\n          }\r\n        }, // Matches the content of an unquoted heredoc string (no interpolation)\r\n        {\r\n          pattern:\r\n            /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          alias: 'string',\r\n          inside: {\r\n            // Matches the end tag\r\n            punctuation: /(?=\\S).*\\S(?= *$)/\r\n          }\r\n        }, // Matches the start tag of heredoc strings\r\n        {\r\n          pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\r\n          alias: 'string',\r\n          inside: {\r\n            punctuation: {\r\n              pattern: /(\\().+?(?=\\))/,\r\n              lookbehind: true\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      'multiline-comment': {\r\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        alias: 'comment'\r\n      },\r\n      regex: {\r\n        // Must be prefixed with the keyword \"node\" or a non-word char\r\n        pattern:\r\n          /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          // Extended regexes must have the x flag. They can contain single-line comments.\r\n          'extended-regex': {\r\n            pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\r\n            inside: {\r\n              comment: /#.*/\r\n            }\r\n          }\r\n        }\r\n      },\r\n      comment: {\r\n        pattern: /(^|[^\\\\])#.*/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      },\r\n      string: {\r\n        // Allow for one nested level of double quotes inside interpolation\r\n        pattern:\r\n          /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|\\$(?!\\{)|(?!\\1)[^\\\\$]|\\\\[\\s\\S])*\\1/,\r\n        greedy: true,\r\n        inside: {\r\n          'double-quoted': {\r\n            pattern: /^\"[\\s\\S]*\"$/,\r\n            inside: {\r\n              // See interpolation below\r\n            }\r\n          }\r\n        }\r\n      },\r\n      variable: {\r\n        pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\r\n        inside: {\r\n          punctuation: /::/\r\n        }\r\n      },\r\n      'attr-name': /(?:\\b\\w+|\\*)(?=\\s*=>)/,\r\n      function: [\r\n        {\r\n          pattern: /(\\.)(?!\\d)\\w+/,\r\n          lookbehind: true\r\n        },\r\n        /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/\r\n      ],\r\n      number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\r\n      boolean: /\\b(?:false|true)\\b/,\r\n      // Includes words reserved for future use\r\n      keyword:\r\n        /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\r\n      datatype: {\r\n        pattern:\r\n          /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\r\n        alias: 'symbol'\r\n      },\r\n      operator:\r\n        /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\r\n      punctuation: /[\\[\\]{}().,;]|:+/\r\n    }\r\n    var interpolation = [\r\n      {\r\n        // Allow for one nested level of braces inside interpolation\r\n        pattern:\r\n          /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\r\n        lookbehind: true,\r\n        inside: {\r\n          'short-variable': {\r\n            // Negative look-ahead prevent wrong highlighting of functions\r\n            pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\r\n            lookbehind: true,\r\n            alias: 'variable',\r\n            inside: {\r\n              punctuation: /::/\r\n            }\r\n          },\r\n          delimiter: {\r\n            pattern: /^\\$/,\r\n            alias: 'variable'\r\n          },\r\n          rest: Prism.languages.puppet\r\n        }\r\n      },\r\n      {\r\n        pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\r\n        lookbehind: true,\r\n        alias: 'variable',\r\n        inside: {\r\n          punctuation: /::/\r\n        }\r\n      }\r\n    ]\r\n    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation\r\n    Prism.languages.puppet['string'].inside[\r\n      'double-quoted'\r\n    ].inside.interpolation = interpolation\r\n  })(Prism)\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,WAAO,cAAc;AACrB,WAAO,UAAU,CAAC;AAClB,aAAS,OAAO,OAAO;AACrB;AAAC,OAAC,SAAUA,QAAO;AACjB,QAAAA,OAAM,UAAU,SAAS;AAAA,UACvB,SAAS;AAAA;AAAA,YAEP;AAAA,cACE,SACE;AAAA,cACF,YAAY;AAAA,cACZ,OAAO;AAAA,cACP,QAAQ;AAAA;AAAA,gBAEN,aAAa;AAAA;AAAA,cACf;AAAA,YACF;AAAA;AAAA,YACA;AAAA,cACE,SACE;AAAA,cACF,YAAY;AAAA,cACZ,QAAQ;AAAA,cACR,OAAO;AAAA,cACP,QAAQ;AAAA;AAAA,gBAEN,aAAa;AAAA,cACf;AAAA,YACF;AAAA;AAAA,YACA;AAAA,cACE,SAAS;AAAA,cACT,OAAO;AAAA,cACP,QAAQ;AAAA,gBACN,aAAa;AAAA,kBACX,SAAS;AAAA,kBACT,YAAY;AAAA,gBACd;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA,qBAAqB;AAAA,YACnB,SAAS;AAAA,YACT,YAAY;AAAA,YACZ,QAAQ;AAAA,YACR,OAAO;AAAA,UACT;AAAA,UACA,OAAO;AAAA;AAAA,YAEL,SACE;AAAA,YACF,YAAY;AAAA,YACZ,QAAQ;AAAA,YACR,QAAQ;AAAA;AAAA,cAEN,kBAAkB;AAAA,gBAChB,SAAS;AAAA,gBACT,QAAQ;AAAA,kBACN,SAAS;AAAA,gBACX;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA,SAAS;AAAA,YACP,SAAS;AAAA,YACT,YAAY;AAAA,YACZ,QAAQ;AAAA,UACV;AAAA,UACA,QAAQ;AAAA;AAAA,YAEN,SACE;AAAA,YACF,QAAQ;AAAA,YACR,QAAQ;AAAA,cACN,iBAAiB;AAAA,gBACf,SAAS;AAAA,gBACT,QAAQ;AAAA;AAAA,gBAER;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA,UAAU;AAAA,YACR,SAAS;AAAA,YACT,QAAQ;AAAA,cACN,aAAa;AAAA,YACf;AAAA,UACF;AAAA,UACA,aAAa;AAAA,UACb,UAAU;AAAA,YACR;AAAA,cACE,SAAS;AAAA,cACT,YAAY;AAAA,YACd;AAAA,YACA;AAAA,UACF;AAAA,UACA,QAAQ;AAAA,UACR,SAAS;AAAA;AAAA,UAET,SACE;AAAA,UACF,UAAU;AAAA,YACR,SACE;AAAA,YACF,OAAO;AAAA,UACT;AAAA,UACA,UACE;AAAA,UACF,aAAa;AAAA,QACf;AACA,YAAI,gBAAgB;AAAA,UAClB;AAAA;AAAA,YAEE,SACE;AAAA,YACF,YAAY;AAAA,YACZ,QAAQ;AAAA,cACN,kBAAkB;AAAA;AAAA,gBAEhB,SAAS;AAAA,gBACT,YAAY;AAAA,gBACZ,OAAO;AAAA,gBACP,QAAQ;AAAA,kBACN,aAAa;AAAA,gBACf;AAAA,cACF;AAAA,cACA,WAAW;AAAA,gBACT,SAAS;AAAA,gBACT,OAAO;AAAA,cACT;AAAA,cACA,MAAMA,OAAM,UAAU;AAAA,YACxB;AAAA,UACF;AAAA,UACA;AAAA,YACE,SAAS;AAAA,YACT,YAAY;AAAA,YACZ,OAAO;AAAA,YACP,QAAQ;AAAA,cACN,aAAa;AAAA,YACf;AAAA,UACF;AAAA,QACF;AACA,QAAAA,OAAM,UAAU,OAAO,SAAS,EAAE,CAAC,EAAE,OAAO,gBAAgB;AAC5D,QAAAA,OAAM,UAAU,OAAO,QAAQ,EAAE,OAC/B,eACF,EAAE,OAAO,gBAAgB;AAAA,MAC3B,GAAG,KAAK;AAAA,IACV;AAAA;AAAA;",
  "names": ["Prism"]
}
