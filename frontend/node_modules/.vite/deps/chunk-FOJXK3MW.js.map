{
  "version": 3,
  "sources": ["../../refractor/lang/prolog.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = prolog\r\nprolog.displayName = 'prolog'\r\nprolog.aliases = []\r\nfunction prolog(Prism) {\r\n  Prism.languages.prolog = {\r\n    // Syntax depends on the implementation\r\n    comment: {\r\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\r\n      greedy: true\r\n    },\r\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\r\n    string: {\r\n      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1(?!\\1)/,\r\n      greedy: true\r\n    },\r\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\r\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\r\n    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\r\n    number: /\\b\\d+(?:\\.\\d*)?/,\r\n    // Custom operators are allowed\r\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\r\n    punctuation: /[(){}\\[\\],]/\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,WAAO,cAAc;AACrB,WAAO,UAAU,CAAC;AAClB,aAAS,OAAO,OAAO;AACrB,YAAM,UAAU,SAAS;AAAA;AAAA,QAEvB,SAAS;AAAA,UACP,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA;AAAA,QAEA,QAAQ;AAAA,UACN,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,QACA,SAAS;AAAA;AAAA,QAET,UAAU;AAAA,QACV,QAAQ;AAAA;AAAA,QAER,UAAU;AAAA,QACV,aAAa;AAAA,MACf;AAAA,IACF;AAAA;AAAA;",
  "names": []
}
