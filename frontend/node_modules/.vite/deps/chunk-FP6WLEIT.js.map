{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/hy.js"],
  "sourcesContent": ["/*\r\nLanguage: Hy\r\nDescription: Hy is a wonderful dialect of Lisp thatâ€™s embedded in Python.\r\nAuthor: Sergey Sobko <s.sobko@profitware.ru>\r\nWebsite: http://docs.hylang.org/en/stable/\r\nCategory: lisp\r\n*/\r\n\r\nfunction hy(hljs) {\r\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\r\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\r\n  var keywords = {\r\n    $pattern: SYMBOL_RE,\r\n    'builtin-name':\r\n      // keywords\r\n      '!= % %= & &= * ** **= *= *map ' +\r\n      '+ += , --build-class-- --import-- -= . / // //= ' +\r\n      '/= < << <<= <= = > >= >> >>= ' +\r\n      '@ @= ^ ^= abs accumulate all and any ap-compose ' +\r\n      'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' +\r\n      'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' +\r\n      'callable calling-module-name car case cdr chain chr coll? combinations compile ' +\r\n      'compress cond cons cons? continue count curry cut cycle dec ' +\r\n      'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' +\r\n      'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' +\r\n      'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' +\r\n      'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' +\r\n      'flatten float? fn fnc fnr for for* format fraction genexpr ' +\r\n      'gensym get getattr global globals group-by hasattr hash hex id ' +\r\n      'identity if if* if-not if-python2 import in inc input instance? ' +\r\n      'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' +\r\n      'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' +\r\n      'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' +\r\n      'iter iterable? iterate iterator? keyword keyword? lambda last len let ' +\r\n      'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' +\r\n      'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' +\r\n      'none? nonlocal not not-in not? nth numeric? oct odd? open ' +\r\n      'or ord partition permutations pos? post-route postwalk pow prewalk print ' +\r\n      'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' +\r\n      'recursive-replace reduce remove repeat repeatedly repr require rest round route ' +\r\n      'route-with-methods rwm second seq set-comp setattr setv some sorted string ' +\r\n      'string? sum switch symbol? take take-nth take-while tee try unless ' +\r\n      'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' +\r\n      'xi xor yield yield-from zero? zip zip-longest | |= ~'\r\n   };\r\n\r\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\r\n\r\n  var SYMBOL = {\r\n    begin: SYMBOL_RE,\r\n    relevance: 0\r\n  };\r\n  var NUMBER = {\r\n    className: 'number', begin: SIMPLE_NUMBER_RE,\r\n    relevance: 0\r\n  };\r\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\r\n  var COMMENT = hljs.COMMENT(\r\n    ';',\r\n    '$',\r\n    {\r\n      relevance: 0\r\n    }\r\n  );\r\n  var LITERAL = {\r\n    className: 'literal',\r\n    begin: /\\b([Tt]rue|[Ff]alse|nil|None)\\b/\r\n  };\r\n  var COLLECTION = {\r\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\r\n  };\r\n  var HINT = {\r\n    className: 'comment',\r\n    begin: '\\\\^' + SYMBOL_RE\r\n  };\r\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\r\n  var KEY = {\r\n    className: 'symbol',\r\n    begin: '[:]{1,2}' + SYMBOL_RE\r\n  };\r\n  var LIST = {\r\n    begin: '\\\\(', end: '\\\\)'\r\n  };\r\n  var BODY = {\r\n    endsWithParent: true,\r\n    relevance: 0\r\n  };\r\n  var NAME = {\r\n    className: 'name',\r\n    relevance: 0,\r\n    keywords: keywords,\r\n    begin: SYMBOL_RE,\r\n    starts: BODY\r\n  };\r\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\r\n\r\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\r\n  BODY.contains = DEFAULT_CONTAINS;\r\n  COLLECTION.contains = DEFAULT_CONTAINS;\r\n\r\n  return {\r\n    name: 'Hy',\r\n    aliases: ['hylang'],\r\n    illegal: /\\S/,\r\n    contains: [hljs.SHEBANG(), LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\r\n  };\r\n}\r\n\r\nmodule.exports = hy;\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAQA,aAAS,GAAG,MAAM;AAChB,UAAI,cAAc;AAClB,UAAI,YAAY,MAAM,cAAc,OAAO,cAAc;AACzD,UAAI,WAAW;AAAA,QACb,UAAU;AAAA,QACV;AAAA;AAAA,UAEE;AAAA;AAAA,MA6BH;AAED,UAAI,mBAAmB;AAEvB,UAAI,SAAS;AAAA,QACX,OAAO;AAAA,QACP,WAAW;AAAA,MACb;AACA,UAAI,SAAS;AAAA,QACX,WAAW;AAAA,QAAU,OAAO;AAAA,QAC5B,WAAW;AAAA,MACb;AACA,UAAI,SAAS,KAAK,QAAQ,KAAK,mBAAmB,EAAC,SAAS,KAAI,CAAC;AACjE,UAAI,UAAU,KAAK;AAAA,QACjB;AAAA,QACA;AAAA,QACA;AAAA,UACE,WAAW;AAAA,QACb;AAAA,MACF;AACA,UAAI,UAAU;AAAA,QACZ,WAAW;AAAA,QACX,OAAO;AAAA,MACT;AACA,UAAI,aAAa;AAAA,QACf,OAAO;AAAA,QAAY,KAAK;AAAA,MAC1B;AACA,UAAI,OAAO;AAAA,QACT,WAAW;AAAA,QACX,OAAO,QAAQ;AAAA,MACjB;AACA,UAAI,WAAW,KAAK,QAAQ,UAAU,KAAK;AAC3C,UAAI,MAAM;AAAA,QACR,WAAW;AAAA,QACX,OAAO,aAAa;AAAA,MACtB;AACA,UAAI,OAAO;AAAA,QACT,OAAO;AAAA,QAAO,KAAK;AAAA,MACrB;AACA,UAAI,OAAO;AAAA,QACT,gBAAgB;AAAA,QAChB,WAAW;AAAA,MACb;AACA,UAAI,OAAO;AAAA,QACT,WAAW;AAAA,QACX,WAAW;AAAA,QACX;AAAA,QACA,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AACA,UAAI,mBAAmB,CAAC,MAAM,QAAQ,MAAM,UAAU,SAAS,KAAK,YAAY,QAAQ,SAAS,MAAM;AAEvG,WAAK,WAAW,CAAC,KAAK,QAAQ,WAAW,EAAE,GAAG,MAAM,IAAI;AACxD,WAAK,WAAW;AAChB,iBAAW,WAAW;AAEtB,aAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS,CAAC,QAAQ;AAAA,QAClB,SAAS;AAAA,QACT,UAAU,CAAC,KAAK,QAAQ,GAAG,MAAM,QAAQ,MAAM,UAAU,SAAS,KAAK,YAAY,QAAQ,OAAO;AAAA,MACpG;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
