{
  "version": 3,
  "sources": ["../../refractor/lang/zig.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = zig\r\nzig.displayName = 'zig'\r\nzig.aliases = []\r\nfunction zig(Prism) {\r\n  ;(function (Prism) {\r\n    function literal(str) {\r\n      return function () {\r\n        return str\r\n      }\r\n    }\r\n    var keyword =\r\n      /\\b(?:align|allowzero|and|anyframe|anytype|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|nosuspend|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/\r\n    var IDENTIFIER = '\\\\b(?!' + keyword.source + ')(?!\\\\d)\\\\w+\\\\b'\r\n    var ALIGN = /align\\s*\\((?:[^()]|\\([^()]*\\))*\\)/.source\r\n    var PREFIX_TYPE_OP =\r\n      /(?:\\?|\\bpromise->|(?:\\[[^[\\]]*\\]|\\*(?!\\*)|\\*\\*)(?:\\s*<ALIGN>|\\s*const\\b|\\s*volatile\\b|\\s*allowzero\\b)*)/.source.replace(\r\n        /<ALIGN>/g,\r\n        literal(ALIGN)\r\n      )\r\n    var SUFFIX_EXPR =\r\n      /(?:\\bpromise\\b|(?:\\berror\\.)?<ID>(?:\\.<ID>)*(?!\\s+<ID>))/.source.replace(\r\n        /<ID>/g,\r\n        literal(IDENTIFIER)\r\n      )\r\n    var TYPE =\r\n      '(?!\\\\s)(?:!?\\\\s*(?:' + PREFIX_TYPE_OP + '\\\\s*)*' + SUFFIX_EXPR + ')+'\r\n    /*\r\n     * A simplified grammar for Zig compile time type literals:\r\n     *\r\n     * TypeExpr = ( \"!\"? PREFIX_TYPE_OP* SUFFIX_EXPR )+\r\n     *\r\n     * SUFFIX_EXPR = ( \\b \"promise\" \\b | ( \\b \"error\" \".\" )? IDENTIFIER ( \".\" IDENTIFIER )* (?! \\s+ IDENTIFIER ) )\r\n     *\r\n     * PREFIX_TYPE_OP = \"?\"\r\n     *                | \\b \"promise\" \"->\"\r\n     *                | ( \"[\" [^\\[\\]]* \"]\" | \"*\" | \"**\" ) ( ALIGN | \"const\" \\b | \"volatile\" \\b | \"allowzero\" \\b )*\r\n     *\r\n     * ALIGN = \"align\" \"(\" ( [^()] | \"(\" [^()]* \")\" )* \")\"\r\n     *\r\n     * IDENTIFIER = \\b (?! KEYWORD ) [a-zA-Z_] \\w* \\b\r\n     *\r\n     */\r\n    Prism.languages.zig = {\r\n      comment: [\r\n        {\r\n          pattern: /\\/\\/[/!].*/,\r\n          alias: 'doc-comment'\r\n        },\r\n        /\\/{2}.*/\r\n      ],\r\n      string: [\r\n        {\r\n          // \"string\" and c\"string\"\r\n          pattern: /(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\r\n          lookbehind: true,\r\n          greedy: true\r\n        },\r\n        {\r\n          // multiline strings and c-strings\r\n          pattern: /([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,\r\n          lookbehind: true,\r\n          greedy: true\r\n        }\r\n      ],\r\n      char: {\r\n        // characters 'a', '\\n', '\\xFF', '\\u{10FFFF}'\r\n        pattern:\r\n          /(^|[^\\\\])'(?:[^'\\\\\\r\\n]|[\\uD800-\\uDFFF]{2}|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      },\r\n      builtin: /\\B@(?!\\d)\\w+(?=\\s*\\()/,\r\n      label: {\r\n        pattern:\r\n          /(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,\r\n        lookbehind: true\r\n      },\r\n      'class-name': [\r\n        // const Foo = struct {};\r\n        /\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/,\r\n        {\r\n          // const x: i32 = 9;\r\n          // var x: Bar;\r\n          // fn foo(x: bool, y: f32) void {}\r\n          pattern: RegExp(\r\n            /(:\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?[=;,)])|<TYPE>(?=\\s*(?:<ALIGN>\\s*)?\\{)/.source\r\n              .replace(/<TYPE>/g, literal(TYPE))\r\n              .replace(/<ALIGN>/g, literal(ALIGN))\r\n          ),\r\n          lookbehind: true,\r\n          inside: null // see below\r\n        },\r\n        {\r\n          // extern fn foo(x: f64) f64; (optional alignment)\r\n          pattern: RegExp(\r\n            /(\\)\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?;)/.source\r\n              .replace(/<TYPE>/g, literal(TYPE))\r\n              .replace(/<ALIGN>/g, literal(ALIGN))\r\n          ),\r\n          lookbehind: true,\r\n          inside: null // see below\r\n        }\r\n      ],\r\n      'builtin-type': {\r\n        pattern:\r\n          /\\b(?:anyerror|bool|c_u?(?:int|long|longlong|short)|c_longdouble|c_void|comptime_(?:float|int)|f(?:16|32|64|128)|[iu](?:8|16|32|64|128|size)|noreturn|type|void)\\b/,\r\n        alias: 'keyword'\r\n      },\r\n      keyword: keyword,\r\n      function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\r\n      number:\r\n        /\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]*)?(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\b/,\r\n      boolean: /\\b(?:false|true)\\b/,\r\n      operator:\r\n        /\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,\r\n      punctuation: /[.:,;(){}[\\]]/\r\n    }\r\n    Prism.languages.zig['class-name'].forEach(function (obj) {\r\n      if (obj.inside === null) {\r\n        obj.inside = Prism.languages.zig\r\n      }\r\n    })\r\n  })(Prism)\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,QAAI,cAAc;AAClB,QAAI,UAAU,CAAC;AACf,aAAS,IAAI,OAAO;AAClB;AAAC,OAAC,SAAUA,QAAO;AACjB,iBAAS,QAAQ,KAAK;AACpB,iBAAO,WAAY;AACjB,mBAAO;AAAA,UACT;AAAA,QACF;AACA,YAAI,UACF;AACF,YAAI,aAAa,WAAW,QAAQ,SAAS;AAC7C,YAAI,QAAQ,oCAAoC;AAChD,YAAI,iBACF,0GAA0G,OAAO;AAAA,UAC/G;AAAA,UACA,QAAQ,KAAK;AAAA,QACf;AACF,YAAI,cACF,2DAA2D,OAAO;AAAA,UAChE;AAAA,UACA,QAAQ,UAAU;AAAA,QACpB;AACF,YAAI,OACF,wBAAwB,iBAAiB,WAAW,cAAc;AAiBpE,QAAAA,OAAM,UAAU,MAAM;AAAA,UACpB,SAAS;AAAA,YACP;AAAA,cACE,SAAS;AAAA,cACT,OAAO;AAAA,YACT;AAAA,YACA;AAAA,UACF;AAAA,UACA,QAAQ;AAAA,YACN;AAAA;AAAA,cAEE,SAAS;AAAA,cACT,YAAY;AAAA,cACZ,QAAQ;AAAA,YACV;AAAA,YACA;AAAA;AAAA,cAEE,SAAS;AAAA,cACT,YAAY;AAAA,cACZ,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,UACA,MAAM;AAAA;AAAA,YAEJ,SACE;AAAA,YACF,YAAY;AAAA,YACZ,QAAQ;AAAA,UACV;AAAA,UACA,SAAS;AAAA,UACT,OAAO;AAAA,YACL,SACE;AAAA,YACF,YAAY;AAAA,UACd;AAAA,UACA,cAAc;AAAA;AAAA,YAEZ;AAAA,YACA;AAAA;AAAA;AAAA;AAAA,cAIE,SAAS;AAAA,gBACP,0EAA0E,OACvE,QAAQ,WAAW,QAAQ,IAAI,CAAC,EAChC,QAAQ,YAAY,QAAQ,KAAK,CAAC;AAAA,cACvC;AAAA,cACA,YAAY;AAAA,cACZ,QAAQ;AAAA;AAAA,YACV;AAAA,YACA;AAAA;AAAA,cAEE,SAAS;AAAA,gBACP,uCAAuC,OACpC,QAAQ,WAAW,QAAQ,IAAI,CAAC,EAChC,QAAQ,YAAY,QAAQ,KAAK,CAAC;AAAA,cACvC;AAAA,cACA,YAAY;AAAA,cACZ,QAAQ;AAAA;AAAA,YACV;AAAA,UACF;AAAA,UACA,gBAAgB;AAAA,YACd,SACE;AAAA,YACF,OAAO;AAAA,UACT;AAAA,UACA;AAAA,UACA,UAAU;AAAA,UACV,QACE;AAAA,UACF,SAAS;AAAA,UACT,UACE;AAAA,UACF,aAAa;AAAA,QACf;AACA,QAAAA,OAAM,UAAU,IAAI,YAAY,EAAE,QAAQ,SAAU,KAAK;AACvD,cAAI,IAAI,WAAW,MAAM;AACvB,gBAAI,SAASA,OAAM,UAAU;AAAA,UAC/B;AAAA,QACF,CAAC;AAAA,MACH,GAAG,KAAK;AAAA,IACV;AAAA;AAAA;",
  "names": ["Prism"]
}
