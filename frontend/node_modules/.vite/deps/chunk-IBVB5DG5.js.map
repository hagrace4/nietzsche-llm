{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/bash.js"],
  "sourcesContent": ["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: Bash\r\nAuthor: vah <vahtenberg@gmail.com>\r\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\r\nWebsite: https://www.gnu.org/software/bash/\r\nCategory: common\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction bash(hljs) {\r\n  const VAR = {};\r\n  const BRACED_VAR = {\r\n    begin: /\\$\\{/,\r\n    end:/\\}/,\r\n    contains: [\r\n      \"self\",\r\n      {\r\n        begin: /:-/,\r\n        contains: [ VAR ]\r\n      } // default values\r\n    ]\r\n  };\r\n  Object.assign(VAR,{\r\n    className: 'variable',\r\n    variants: [\r\n      {begin: concat(/\\$[\\w\\d#@][\\w\\d_]*/,\r\n        // negative look-ahead tries to avoid matching patterns that are not\r\n        // Perl at all like $ident$, @ident@, etc.\r\n        `(?![\\\\w\\\\d])(?![$])`) },\r\n      BRACED_VAR\r\n    ]\r\n  });\r\n\r\n  const SUBST = {\r\n    className: 'subst',\r\n    begin: /\\$\\(/, end: /\\)/,\r\n    contains: [hljs.BACKSLASH_ESCAPE]\r\n  };\r\n  const HERE_DOC = {\r\n    begin: /<<-?\\s*(?=\\w+)/,\r\n    starts: {\r\n      contains: [\r\n        hljs.END_SAME_AS_BEGIN({\r\n          begin: /(\\w+)/,\r\n          end: /(\\w+)/,\r\n          className: 'string'\r\n        })\r\n      ]\r\n    }\r\n  };\r\n  const QUOTE_STRING = {\r\n    className: 'string',\r\n    begin: /\"/, end: /\"/,\r\n    contains: [\r\n      hljs.BACKSLASH_ESCAPE,\r\n      VAR,\r\n      SUBST\r\n    ]\r\n  };\r\n  SUBST.contains.push(QUOTE_STRING);\r\n  const ESCAPED_QUOTE = {\r\n    className: '',\r\n    begin: /\\\\\"/\r\n\r\n  };\r\n  const APOS_STRING = {\r\n    className: 'string',\r\n    begin: /'/, end: /'/\r\n  };\r\n  const ARITHMETIC = {\r\n    begin: /\\$\\(\\(/,\r\n    end: /\\)\\)/,\r\n    contains: [\r\n      { begin: /\\d+#[0-9a-f]+/, className: \"number\" },\r\n      hljs.NUMBER_MODE,\r\n      VAR\r\n    ]\r\n  };\r\n  const SH_LIKE_SHELLS = [\r\n    \"fish\",\r\n    \"bash\",\r\n    \"zsh\",\r\n    \"sh\",\r\n    \"csh\",\r\n    \"ksh\",\r\n    \"tcsh\",\r\n    \"dash\",\r\n    \"scsh\",\r\n  ];\r\n  const KNOWN_SHEBANG = hljs.SHEBANG({\r\n    binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\r\n    relevance: 10\r\n  });\r\n  const FUNCTION = {\r\n    className: 'function',\r\n    begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\r\n    returnBegin: true,\r\n    contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\\w[\\w\\d_]*/})],\r\n    relevance: 0\r\n  };\r\n\r\n  return {\r\n    name: 'Bash',\r\n    aliases: ['sh', 'zsh'],\r\n    keywords: {\r\n      $pattern: /\\b[a-z._-]+\\b/,\r\n      keyword:\r\n        'if then else elif fi for while in do done case esac function',\r\n      literal:\r\n        'true false',\r\n      built_in:\r\n        // Shell built-ins\r\n        // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\r\n        'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +\r\n        'trap umask unset ' +\r\n        // Bash built-ins\r\n        'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +\r\n        'read readarray source type typeset ulimit unalias ' +\r\n        // Shell modifiers\r\n        'set shopt ' +\r\n        // Zsh built-ins\r\n        'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +\r\n        'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +\r\n        'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +\r\n        'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +\r\n        'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +\r\n        'zpty zregexparse zsocket zstyle ztcp'\r\n    },\r\n    contains: [\r\n      KNOWN_SHEBANG, // to catch known shells and boost relevancy\r\n      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang\r\n      FUNCTION,\r\n      ARITHMETIC,\r\n      hljs.HASH_COMMENT_MODE,\r\n      HERE_DOC,\r\n      QUOTE_STRING,\r\n      ESCAPED_QUOTE,\r\n      APOS_STRING,\r\n      VAR\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = bash;\r\n"],
  "mappings": "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",
  "names": []
}
