{
  "version": 3,
  "sources": ["../../refractor/lang/markup-templating.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = markupTemplating\r\nmarkupTemplating.displayName = 'markupTemplating'\r\nmarkupTemplating.aliases = []\r\nfunction markupTemplating(Prism) {\r\n  ;(function (Prism) {\r\n    /**\r\n     * Returns the placeholder for the given language id and index.\r\n     *\r\n     * @param {string} language\r\n     * @param {string|number} index\r\n     * @returns {string}\r\n     */\r\n    function getPlaceholder(language, index) {\r\n      return '___' + language.toUpperCase() + index + '___'\r\n    }\r\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\r\n      buildPlaceholders: {\r\n        /**\r\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\r\n         *\r\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\r\n         * `true` will be replaced.\r\n         *\r\n         * @param {object} env The environment of the `before-tokenize` hook.\r\n         * @param {string} language The language id.\r\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\r\n         * @param {(match: string) => boolean} [replaceFilter]\r\n         */\r\n        value: function (env, language, placeholderPattern, replaceFilter) {\r\n          if (env.language !== language) {\r\n            return\r\n          }\r\n          var tokenStack = (env.tokenStack = [])\r\n          env.code = env.code.replace(placeholderPattern, function (match) {\r\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\r\n              return match\r\n            }\r\n            var i = tokenStack.length\r\n            var placeholder // Check for existing strings\r\n            while (\r\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\r\n              -1\r\n            ) {\r\n              ++i\r\n            } // Create a sparse array\r\n            tokenStack[i] = match\r\n            return placeholder\r\n          }) // Switch the grammar to markup\r\n          env.grammar = Prism.languages.markup\r\n        }\r\n      },\r\n      tokenizePlaceholders: {\r\n        /**\r\n         * Replace placeholders with proper tokens after tokenizing.\r\n         *\r\n         * @param {object} env The environment of the `after-tokenize` hook.\r\n         * @param {string} language The language id.\r\n         */\r\n        value: function (env, language) {\r\n          if (env.language !== language || !env.tokenStack) {\r\n            return\r\n          } // Switch the grammar back\r\n          env.grammar = Prism.languages[language]\r\n          var j = 0\r\n          var keys = Object.keys(env.tokenStack)\r\n          function walkTokens(tokens) {\r\n            for (var i = 0; i < tokens.length; i++) {\r\n              // all placeholders are replaced already\r\n              if (j >= keys.length) {\r\n                break\r\n              }\r\n              var token = tokens[i]\r\n              if (\r\n                typeof token === 'string' ||\r\n                (token.content && typeof token.content === 'string')\r\n              ) {\r\n                var k = keys[j]\r\n                var t = env.tokenStack[k]\r\n                var s = typeof token === 'string' ? token : token.content\r\n                var placeholder = getPlaceholder(language, k)\r\n                var index = s.indexOf(placeholder)\r\n                if (index > -1) {\r\n                  ++j\r\n                  var before = s.substring(0, index)\r\n                  var middle = new Prism.Token(\r\n                    language,\r\n                    Prism.tokenize(t, env.grammar),\r\n                    'language-' + language,\r\n                    t\r\n                  )\r\n                  var after = s.substring(index + placeholder.length)\r\n                  var replacement = []\r\n                  if (before) {\r\n                    replacement.push.apply(replacement, walkTokens([before]))\r\n                  }\r\n                  replacement.push(middle)\r\n                  if (after) {\r\n                    replacement.push.apply(replacement, walkTokens([after]))\r\n                  }\r\n                  if (typeof token === 'string') {\r\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\r\n                  } else {\r\n                    token.content = replacement\r\n                  }\r\n                }\r\n              } else if (\r\n                token.content\r\n                /* && typeof token.content !== 'string' */\r\n              ) {\r\n                walkTokens(token.content)\r\n              }\r\n            }\r\n            return tokens\r\n          }\r\n          walkTokens(env.tokens)\r\n        }\r\n      }\r\n    })\r\n  })(Prism)\r\n}\r\n"],
  "mappings": "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",
  "names": ["Prism"]
}
