{
  "version": 3,
  "sources": ["../../refractor/lang/wren.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = wren\r\nwren.displayName = 'wren'\r\nwren.aliases = []\r\nfunction wren(Prism) {\r\n  // https://wren.io/\r\n  Prism.languages.wren = {\r\n    // Multiline comments in Wren can have nested multiline comments\r\n    // Comments: // and /* */\r\n    comment: [\r\n      {\r\n        // support 3 levels of nesting\r\n        // regex: \\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\/\r\n        pattern:\r\n          /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//,\r\n        greedy: true\r\n      },\r\n      {\r\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }\r\n    ],\r\n    // Triple quoted strings are multiline but cannot have interpolation (raw strings)\r\n    // Based on prism-python.js\r\n    'triple-quoted-string': {\r\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\r\n      greedy: true,\r\n      alias: 'string'\r\n    },\r\n    // see below\r\n    'string-literal': null,\r\n    // #!/usr/bin/env wren on the first line\r\n    hashbang: {\r\n      pattern: /^#!\\/.+/,\r\n      greedy: true,\r\n      alias: 'comment'\r\n    },\r\n    // Attributes are special keywords to add meta data to classes\r\n    attribute: {\r\n      // #! attributes are stored in class properties\r\n      // #!myvar = true\r\n      // #attributes are not stored and dismissed at compilation\r\n      pattern: /#!?[ \\t\\u3000]*\\w+/,\r\n      alias: 'keyword'\r\n    },\r\n    'class-name': [\r\n      {\r\n        // class definition\r\n        // class Meta {}\r\n        pattern: /(\\bclass\\s+)\\w+/,\r\n        lookbehind: true\r\n      }, // A class must always start with an uppercase.\r\n      // File.read\r\n      /\\b[A-Z][a-z\\d_]*\\b/\r\n    ],\r\n    // A constant can be a variable, class, property or method. Just named in all uppercase letters\r\n    constant: /\\b[A-Z][A-Z\\d_]*\\b/,\r\n    null: {\r\n      pattern: /\\bnull\\b/,\r\n      alias: 'keyword'\r\n    },\r\n    keyword:\r\n      /\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\b/,\r\n    boolean: /\\b(?:false|true)\\b/,\r\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\r\n    // Functions can be Class.method()\r\n    function: /\\b[a-z_]\\w*(?=\\s*[({])/i,\r\n    operator: /<<|>>|[=!<>]=?|&&|\\|\\||[-+*/%~^&|?:]|\\.{2,3}/,\r\n    punctuation: /[\\[\\](){}.,;]/\r\n  }\r\n  Prism.languages.wren['string-literal'] = {\r\n    // A single quote string is multiline and can have interpolation (similar to JS backticks ``)\r\n    pattern:\r\n      /(^|[^\\\\\"])\"(?:[^\\\\\"%]|\\\\[\\s\\S]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/,\r\n    lookbehind: true,\r\n    greedy: true,\r\n    inside: {\r\n      interpolation: {\r\n        // \"%(interpolation)\"\r\n        pattern:\r\n          /((?:^|[^\\\\])(?:\\\\{2})*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,\r\n        lookbehind: true,\r\n        inside: {\r\n          expression: {\r\n            pattern: /^(%\\()[\\s\\S]+(?=\\)$)/,\r\n            lookbehind: true,\r\n            inside: Prism.languages.wren\r\n          },\r\n          'interpolation-punctuation': {\r\n            pattern: /^%\\(|\\)$/,\r\n            alias: 'punctuation'\r\n          }\r\n        }\r\n      },\r\n      string: /[\\s\\S]+/\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,SAAK,cAAc;AACnB,SAAK,UAAU,CAAC;AAChB,aAAS,KAAK,OAAO;AAEnB,YAAM,UAAU,OAAO;AAAA;AAAA;AAAA,QAGrB,SAAS;AAAA,UACP;AAAA;AAAA;AAAA,YAGE,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,YACE,SAAS;AAAA,YACT,YAAY;AAAA,YACZ,QAAQ;AAAA,UACV;AAAA,QACF;AAAA;AAAA;AAAA,QAGA,wBAAwB;AAAA,UACtB,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,OAAO;AAAA,QACT;AAAA;AAAA,QAEA,kBAAkB;AAAA;AAAA,QAElB,UAAU;AAAA,UACR,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,OAAO;AAAA,QACT;AAAA;AAAA,QAEA,WAAW;AAAA;AAAA;AAAA;AAAA,UAIT,SAAS;AAAA,UACT,OAAO;AAAA,QACT;AAAA,QACA,cAAc;AAAA,UACZ;AAAA;AAAA;AAAA,YAGE,SAAS;AAAA,YACT,YAAY;AAAA,UACd;AAAA;AAAA;AAAA,UAEA;AAAA,QACF;AAAA;AAAA,QAEA,UAAU;AAAA,QACV,MAAM;AAAA,UACJ,SAAS;AAAA,UACT,OAAO;AAAA,QACT;AAAA,QACA,SACE;AAAA,QACF,SAAS;AAAA,QACT,QAAQ;AAAA;AAAA,QAER,UAAU;AAAA,QACV,UAAU;AAAA,QACV,aAAa;AAAA,MACf;AACA,YAAM,UAAU,KAAK,gBAAgB,IAAI;AAAA;AAAA,QAEvC,SACE;AAAA,QACF,YAAY;AAAA,QACZ,QAAQ;AAAA,QACR,QAAQ;AAAA,UACN,eAAe;AAAA;AAAA,YAEb,SACE;AAAA,YACF,YAAY;AAAA,YACZ,QAAQ;AAAA,cACN,YAAY;AAAA,gBACV,SAAS;AAAA,gBACT,YAAY;AAAA,gBACZ,QAAQ,MAAM,UAAU;AAAA,cAC1B;AAAA,cACA,6BAA6B;AAAA,gBAC3B,SAAS;AAAA,gBACT,OAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAAA,UACA,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA;AAAA;",
  "names": []
}
