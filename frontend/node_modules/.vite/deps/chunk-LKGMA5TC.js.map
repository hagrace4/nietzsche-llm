{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/tcl.js"],
  "sourcesContent": ["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction optional(re) {\r\n  return concat('(', re, ')?');\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: Tcl\r\nDescription: Tcl is a very simple programming language.\r\nAuthor: Radek Liska <radekliska@gmail.com>\r\nWebsite: https://www.tcl.tk/about/language.html\r\n*/\r\n\r\nfunction tcl(hljs) {\r\n  const TCL_IDENT = /[a-zA-Z_][a-zA-Z0-9_]*/;\r\n\r\n  const NUMBER = {\r\n    className: 'number',\r\n    variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]\r\n  };\r\n\r\n  return {\r\n    name: 'Tcl',\r\n    aliases: ['tk'],\r\n    keywords: 'after append apply array auto_execok auto_import auto_load auto_mkindex ' +\r\n      'auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock ' +\r\n      'close concat continue dde dict encoding eof error eval exec exit expr fblocked ' +\r\n      'fconfigure fcopy file fileevent filename flush for foreach format gets glob global ' +\r\n      'history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list ' +\r\n      'llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 '+\r\n      'mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex '+\r\n      'platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename '+\r\n      'return safe scan seek set socket source split string subst switch tcl_endOfWord '+\r\n      'tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter '+\r\n      'tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update '+\r\n      'uplevel upvar variable vwait while',\r\n    contains: [\r\n      hljs.COMMENT(';[ \\\\t]*#', '$'),\r\n      hljs.COMMENT('^[ \\\\t]*#', '$'),\r\n      {\r\n        beginKeywords: 'proc',\r\n        end: '[\\\\{]',\r\n        excludeEnd: true,\r\n        contains: [\r\n          {\r\n            className: 'title',\r\n            begin: '[ \\\\t\\\\n\\\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\r\n            end: '[ \\\\t\\\\n\\\\r]',\r\n            endsWithParent: true,\r\n            excludeEnd: true\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        className: \"variable\",\r\n        variants: [\r\n          {\r\n            begin: concat(\r\n              /\\$/,\r\n              optional(/::/),\r\n              TCL_IDENT,\r\n              '(::',\r\n              TCL_IDENT,\r\n              ')*'\r\n            )\r\n          },\r\n          {\r\n            begin: '\\\\$\\\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\r\n            end: '\\\\}',\r\n            contains: [\r\n              NUMBER\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        className: 'string',\r\n        contains: [hljs.BACKSLASH_ESCAPE],\r\n        variants: [\r\n          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})\r\n        ]\r\n      },\r\n      NUMBER\r\n    ]\r\n  }\r\n}\r\n\r\nmodule.exports = tcl;\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AASA,aAAS,OAAO,IAAI;AAClB,UAAI,CAAC;AAAI,eAAO;AAChB,UAAI,OAAO,OAAO;AAAU,eAAO;AAEnC,aAAO,GAAG;AAAA,IACZ;AAMA,aAAS,SAAS,IAAI;AACpB,aAAO,OAAO,KAAK,IAAI,IAAI;AAAA,IAC7B;AAMA,aAAS,UAAU,MAAM;AACvB,YAAM,SAAS,KAAK,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE;AACjD,aAAO;AAAA,IACT;AASA,aAAS,IAAI,MAAM;AACjB,YAAM,YAAY;AAElB,YAAM,SAAS;AAAA,QACb,WAAW;AAAA,QACX,UAAU,CAAC,KAAK,oBAAoB,KAAK,aAAa;AAAA,MACxD;AAEA,aAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS,CAAC,IAAI;AAAA,QACd,UAAU;AAAA,QAYV,UAAU;AAAA,UACR,KAAK,QAAQ,aAAa,GAAG;AAAA,UAC7B,KAAK,QAAQ,aAAa,GAAG;AAAA,UAC7B;AAAA,YACE,eAAe;AAAA,YACf,KAAK;AAAA,YACL,YAAY;AAAA,YACZ,UAAU;AAAA,cACR;AAAA,gBACE,WAAW;AAAA,gBACX,OAAO;AAAA,gBACP,KAAK;AAAA,gBACL,gBAAgB;AAAA,gBAChB,YAAY;AAAA,cACd;AAAA,YACF;AAAA,UACF;AAAA,UACA;AAAA,YACE,WAAW;AAAA,YACX,UAAU;AAAA,cACR;AAAA,gBACE,OAAO;AAAA,kBACL;AAAA,kBACA,SAAS,IAAI;AAAA,kBACb;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,gBACF;AAAA,cACF;AAAA,cACA;AAAA,gBACE,OAAO;AAAA,gBACP,KAAK;AAAA,gBACL,UAAU;AAAA,kBACR;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA;AAAA,YACE,WAAW;AAAA,YACX,UAAU,CAAC,KAAK,gBAAgB;AAAA,YAChC,UAAU;AAAA,cACR,KAAK,QAAQ,KAAK,mBAAmB,EAAC,SAAS,KAAI,CAAC;AAAA,YACtD;AAAA,UACF;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
