{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/sql.js"],
  "sourcesContent": ["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\r\nfunction either(...args) {\r\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\r\n  return joined;\r\n}\r\n\r\n/*\r\n Language: SQL\r\n Website: https://en.wikipedia.org/wiki/SQL\r\n Category: common, database\r\n */\r\n\r\nfunction sql(hljs) {\r\n  const COMMENT_MODE = hljs.COMMENT('--', '$');\r\n  const STRING = {\r\n    className: 'string',\r\n    variants: [\r\n      {\r\n        begin: /'/,\r\n        end: /'/,\r\n        contains: [\r\n          {begin: /''/ }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n  const QUOTED_IDENTIFIER = {\r\n    begin: /\"/,\r\n    end: /\"/,\r\n    contains: [ { begin: /\"\"/ } ]\r\n  };\r\n\r\n  const LITERALS = [\r\n    \"true\",\r\n    \"false\",\r\n    // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.\r\n    // \"null\",\r\n    \"unknown\"\r\n  ];\r\n\r\n  const MULTI_WORD_TYPES = [\r\n    \"double precision\",\r\n    \"large object\",\r\n    \"with timezone\",\r\n    \"without timezone\"\r\n  ];\r\n\r\n  const TYPES = [\r\n    'bigint',\r\n    'binary',\r\n    'blob',\r\n    'boolean',\r\n    'char',\r\n    'character',\r\n    'clob',\r\n    'date',\r\n    'dec',\r\n    'decfloat',\r\n    'decimal',\r\n    'float',\r\n    'int',\r\n    'integer',\r\n    'interval',\r\n    'nchar',\r\n    'nclob',\r\n    'national',\r\n    'numeric',\r\n    'real',\r\n    'row',\r\n    'smallint',\r\n    'time',\r\n    'timestamp',\r\n    'varchar',\r\n    'varying', // modifier (character varying)\r\n    'varbinary'\r\n  ];\r\n\r\n  const NON_RESERVED_WORDS = [\r\n    \"add\",\r\n    \"asc\",\r\n    \"collation\",\r\n    \"desc\",\r\n    \"final\",\r\n    \"first\",\r\n    \"last\",\r\n    \"view\"\r\n  ];\r\n\r\n  // https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#reserved-word\r\n  const RESERVED_WORDS = [\r\n    \"abs\",\r\n    \"acos\",\r\n    \"all\",\r\n    \"allocate\",\r\n    \"alter\",\r\n    \"and\",\r\n    \"any\",\r\n    \"are\",\r\n    \"array\",\r\n    \"array_agg\",\r\n    \"array_max_cardinality\",\r\n    \"as\",\r\n    \"asensitive\",\r\n    \"asin\",\r\n    \"asymmetric\",\r\n    \"at\",\r\n    \"atan\",\r\n    \"atomic\",\r\n    \"authorization\",\r\n    \"avg\",\r\n    \"begin\",\r\n    \"begin_frame\",\r\n    \"begin_partition\",\r\n    \"between\",\r\n    \"bigint\",\r\n    \"binary\",\r\n    \"blob\",\r\n    \"boolean\",\r\n    \"both\",\r\n    \"by\",\r\n    \"call\",\r\n    \"called\",\r\n    \"cardinality\",\r\n    \"cascaded\",\r\n    \"case\",\r\n    \"cast\",\r\n    \"ceil\",\r\n    \"ceiling\",\r\n    \"char\",\r\n    \"char_length\",\r\n    \"character\",\r\n    \"character_length\",\r\n    \"check\",\r\n    \"classifier\",\r\n    \"clob\",\r\n    \"close\",\r\n    \"coalesce\",\r\n    \"collate\",\r\n    \"collect\",\r\n    \"column\",\r\n    \"commit\",\r\n    \"condition\",\r\n    \"connect\",\r\n    \"constraint\",\r\n    \"contains\",\r\n    \"convert\",\r\n    \"copy\",\r\n    \"corr\",\r\n    \"corresponding\",\r\n    \"cos\",\r\n    \"cosh\",\r\n    \"count\",\r\n    \"covar_pop\",\r\n    \"covar_samp\",\r\n    \"create\",\r\n    \"cross\",\r\n    \"cube\",\r\n    \"cume_dist\",\r\n    \"current\",\r\n    \"current_catalog\",\r\n    \"current_date\",\r\n    \"current_default_transform_group\",\r\n    \"current_path\",\r\n    \"current_role\",\r\n    \"current_row\",\r\n    \"current_schema\",\r\n    \"current_time\",\r\n    \"current_timestamp\",\r\n    \"current_path\",\r\n    \"current_role\",\r\n    \"current_transform_group_for_type\",\r\n    \"current_user\",\r\n    \"cursor\",\r\n    \"cycle\",\r\n    \"date\",\r\n    \"day\",\r\n    \"deallocate\",\r\n    \"dec\",\r\n    \"decimal\",\r\n    \"decfloat\",\r\n    \"declare\",\r\n    \"default\",\r\n    \"define\",\r\n    \"delete\",\r\n    \"dense_rank\",\r\n    \"deref\",\r\n    \"describe\",\r\n    \"deterministic\",\r\n    \"disconnect\",\r\n    \"distinct\",\r\n    \"double\",\r\n    \"drop\",\r\n    \"dynamic\",\r\n    \"each\",\r\n    \"element\",\r\n    \"else\",\r\n    \"empty\",\r\n    \"end\",\r\n    \"end_frame\",\r\n    \"end_partition\",\r\n    \"end-exec\",\r\n    \"equals\",\r\n    \"escape\",\r\n    \"every\",\r\n    \"except\",\r\n    \"exec\",\r\n    \"execute\",\r\n    \"exists\",\r\n    \"exp\",\r\n    \"external\",\r\n    \"extract\",\r\n    \"false\",\r\n    \"fetch\",\r\n    \"filter\",\r\n    \"first_value\",\r\n    \"float\",\r\n    \"floor\",\r\n    \"for\",\r\n    \"foreign\",\r\n    \"frame_row\",\r\n    \"free\",\r\n    \"from\",\r\n    \"full\",\r\n    \"function\",\r\n    \"fusion\",\r\n    \"get\",\r\n    \"global\",\r\n    \"grant\",\r\n    \"group\",\r\n    \"grouping\",\r\n    \"groups\",\r\n    \"having\",\r\n    \"hold\",\r\n    \"hour\",\r\n    \"identity\",\r\n    \"in\",\r\n    \"indicator\",\r\n    \"initial\",\r\n    \"inner\",\r\n    \"inout\",\r\n    \"insensitive\",\r\n    \"insert\",\r\n    \"int\",\r\n    \"integer\",\r\n    \"intersect\",\r\n    \"intersection\",\r\n    \"interval\",\r\n    \"into\",\r\n    \"is\",\r\n    \"join\",\r\n    \"json_array\",\r\n    \"json_arrayagg\",\r\n    \"json_exists\",\r\n    \"json_object\",\r\n    \"json_objectagg\",\r\n    \"json_query\",\r\n    \"json_table\",\r\n    \"json_table_primitive\",\r\n    \"json_value\",\r\n    \"lag\",\r\n    \"language\",\r\n    \"large\",\r\n    \"last_value\",\r\n    \"lateral\",\r\n    \"lead\",\r\n    \"leading\",\r\n    \"left\",\r\n    \"like\",\r\n    \"like_regex\",\r\n    \"listagg\",\r\n    \"ln\",\r\n    \"local\",\r\n    \"localtime\",\r\n    \"localtimestamp\",\r\n    \"log\",\r\n    \"log10\",\r\n    \"lower\",\r\n    \"match\",\r\n    \"match_number\",\r\n    \"match_recognize\",\r\n    \"matches\",\r\n    \"max\",\r\n    \"member\",\r\n    \"merge\",\r\n    \"method\",\r\n    \"min\",\r\n    \"minute\",\r\n    \"mod\",\r\n    \"modifies\",\r\n    \"module\",\r\n    \"month\",\r\n    \"multiset\",\r\n    \"national\",\r\n    \"natural\",\r\n    \"nchar\",\r\n    \"nclob\",\r\n    \"new\",\r\n    \"no\",\r\n    \"none\",\r\n    \"normalize\",\r\n    \"not\",\r\n    \"nth_value\",\r\n    \"ntile\",\r\n    \"null\",\r\n    \"nullif\",\r\n    \"numeric\",\r\n    \"octet_length\",\r\n    \"occurrences_regex\",\r\n    \"of\",\r\n    \"offset\",\r\n    \"old\",\r\n    \"omit\",\r\n    \"on\",\r\n    \"one\",\r\n    \"only\",\r\n    \"open\",\r\n    \"or\",\r\n    \"order\",\r\n    \"out\",\r\n    \"outer\",\r\n    \"over\",\r\n    \"overlaps\",\r\n    \"overlay\",\r\n    \"parameter\",\r\n    \"partition\",\r\n    \"pattern\",\r\n    \"per\",\r\n    \"percent\",\r\n    \"percent_rank\",\r\n    \"percentile_cont\",\r\n    \"percentile_disc\",\r\n    \"period\",\r\n    \"portion\",\r\n    \"position\",\r\n    \"position_regex\",\r\n    \"power\",\r\n    \"precedes\",\r\n    \"precision\",\r\n    \"prepare\",\r\n    \"primary\",\r\n    \"procedure\",\r\n    \"ptf\",\r\n    \"range\",\r\n    \"rank\",\r\n    \"reads\",\r\n    \"real\",\r\n    \"recursive\",\r\n    \"ref\",\r\n    \"references\",\r\n    \"referencing\",\r\n    \"regr_avgx\",\r\n    \"regr_avgy\",\r\n    \"regr_count\",\r\n    \"regr_intercept\",\r\n    \"regr_r2\",\r\n    \"regr_slope\",\r\n    \"regr_sxx\",\r\n    \"regr_sxy\",\r\n    \"regr_syy\",\r\n    \"release\",\r\n    \"result\",\r\n    \"return\",\r\n    \"returns\",\r\n    \"revoke\",\r\n    \"right\",\r\n    \"rollback\",\r\n    \"rollup\",\r\n    \"row\",\r\n    \"row_number\",\r\n    \"rows\",\r\n    \"running\",\r\n    \"savepoint\",\r\n    \"scope\",\r\n    \"scroll\",\r\n    \"search\",\r\n    \"second\",\r\n    \"seek\",\r\n    \"select\",\r\n    \"sensitive\",\r\n    \"session_user\",\r\n    \"set\",\r\n    \"show\",\r\n    \"similar\",\r\n    \"sin\",\r\n    \"sinh\",\r\n    \"skip\",\r\n    \"smallint\",\r\n    \"some\",\r\n    \"specific\",\r\n    \"specifictype\",\r\n    \"sql\",\r\n    \"sqlexception\",\r\n    \"sqlstate\",\r\n    \"sqlwarning\",\r\n    \"sqrt\",\r\n    \"start\",\r\n    \"static\",\r\n    \"stddev_pop\",\r\n    \"stddev_samp\",\r\n    \"submultiset\",\r\n    \"subset\",\r\n    \"substring\",\r\n    \"substring_regex\",\r\n    \"succeeds\",\r\n    \"sum\",\r\n    \"symmetric\",\r\n    \"system\",\r\n    \"system_time\",\r\n    \"system_user\",\r\n    \"table\",\r\n    \"tablesample\",\r\n    \"tan\",\r\n    \"tanh\",\r\n    \"then\",\r\n    \"time\",\r\n    \"timestamp\",\r\n    \"timezone_hour\",\r\n    \"timezone_minute\",\r\n    \"to\",\r\n    \"trailing\",\r\n    \"translate\",\r\n    \"translate_regex\",\r\n    \"translation\",\r\n    \"treat\",\r\n    \"trigger\",\r\n    \"trim\",\r\n    \"trim_array\",\r\n    \"true\",\r\n    \"truncate\",\r\n    \"uescape\",\r\n    \"union\",\r\n    \"unique\",\r\n    \"unknown\",\r\n    \"unnest\",\r\n    \"update   \",\r\n    \"upper\",\r\n    \"user\",\r\n    \"using\",\r\n    \"value\",\r\n    \"values\",\r\n    \"value_of\",\r\n    \"var_pop\",\r\n    \"var_samp\",\r\n    \"varbinary\",\r\n    \"varchar\",\r\n    \"varying\",\r\n    \"versioning\",\r\n    \"when\",\r\n    \"whenever\",\r\n    \"where\",\r\n    \"width_bucket\",\r\n    \"window\",\r\n    \"with\",\r\n    \"within\",\r\n    \"without\",\r\n    \"year\",\r\n  ];\r\n\r\n  // these are reserved words we have identified to be functions\r\n  // and should only be highlighted in a dispatch-like context\r\n  // ie, array_agg(...), etc.\r\n  const RESERVED_FUNCTIONS = [\r\n    \"abs\",\r\n    \"acos\",\r\n    \"array_agg\",\r\n    \"asin\",\r\n    \"atan\",\r\n    \"avg\",\r\n    \"cast\",\r\n    \"ceil\",\r\n    \"ceiling\",\r\n    \"coalesce\",\r\n    \"corr\",\r\n    \"cos\",\r\n    \"cosh\",\r\n    \"count\",\r\n    \"covar_pop\",\r\n    \"covar_samp\",\r\n    \"cume_dist\",\r\n    \"dense_rank\",\r\n    \"deref\",\r\n    \"element\",\r\n    \"exp\",\r\n    \"extract\",\r\n    \"first_value\",\r\n    \"floor\",\r\n    \"json_array\",\r\n    \"json_arrayagg\",\r\n    \"json_exists\",\r\n    \"json_object\",\r\n    \"json_objectagg\",\r\n    \"json_query\",\r\n    \"json_table\",\r\n    \"json_table_primitive\",\r\n    \"json_value\",\r\n    \"lag\",\r\n    \"last_value\",\r\n    \"lead\",\r\n    \"listagg\",\r\n    \"ln\",\r\n    \"log\",\r\n    \"log10\",\r\n    \"lower\",\r\n    \"max\",\r\n    \"min\",\r\n    \"mod\",\r\n    \"nth_value\",\r\n    \"ntile\",\r\n    \"nullif\",\r\n    \"percent_rank\",\r\n    \"percentile_cont\",\r\n    \"percentile_disc\",\r\n    \"position\",\r\n    \"position_regex\",\r\n    \"power\",\r\n    \"rank\",\r\n    \"regr_avgx\",\r\n    \"regr_avgy\",\r\n    \"regr_count\",\r\n    \"regr_intercept\",\r\n    \"regr_r2\",\r\n    \"regr_slope\",\r\n    \"regr_sxx\",\r\n    \"regr_sxy\",\r\n    \"regr_syy\",\r\n    \"row_number\",\r\n    \"sin\",\r\n    \"sinh\",\r\n    \"sqrt\",\r\n    \"stddev_pop\",\r\n    \"stddev_samp\",\r\n    \"substring\",\r\n    \"substring_regex\",\r\n    \"sum\",\r\n    \"tan\",\r\n    \"tanh\",\r\n    \"translate\",\r\n    \"translate_regex\",\r\n    \"treat\",\r\n    \"trim\",\r\n    \"trim_array\",\r\n    \"unnest\",\r\n    \"upper\",\r\n    \"value_of\",\r\n    \"var_pop\",\r\n    \"var_samp\",\r\n    \"width_bucket\",\r\n  ];\r\n\r\n  // these functions can\r\n  const POSSIBLE_WITHOUT_PARENS = [\r\n    \"current_catalog\",\r\n    \"current_date\",\r\n    \"current_default_transform_group\",\r\n    \"current_path\",\r\n    \"current_role\",\r\n    \"current_schema\",\r\n    \"current_transform_group_for_type\",\r\n    \"current_user\",\r\n    \"session_user\",\r\n    \"system_time\",\r\n    \"system_user\",\r\n    \"current_time\",\r\n    \"localtime\",\r\n    \"current_timestamp\",\r\n    \"localtimestamp\"\r\n  ];\r\n\r\n  // those exist to boost relevance making these very\r\n  // \"SQL like\" keyword combos worth +1 extra relevance\r\n  const COMBOS = [\r\n    \"create table\",\r\n    \"insert into\",\r\n    \"primary key\",\r\n    \"foreign key\",\r\n    \"not null\",\r\n    \"alter table\",\r\n    \"add constraint\",\r\n    \"grouping sets\",\r\n    \"on overflow\",\r\n    \"character set\",\r\n    \"respect nulls\",\r\n    \"ignore nulls\",\r\n    \"nulls first\",\r\n    \"nulls last\",\r\n    \"depth first\",\r\n    \"breadth first\"\r\n  ];\r\n\r\n  const FUNCTIONS = RESERVED_FUNCTIONS;\r\n\r\n  const KEYWORDS = [...RESERVED_WORDS, ...NON_RESERVED_WORDS].filter((keyword) => {\r\n    return !RESERVED_FUNCTIONS.includes(keyword);\r\n  });\r\n\r\n  const VARIABLE = {\r\n    className: \"variable\",\r\n    begin: /@[a-z0-9]+/,\r\n  };\r\n\r\n  const OPERATOR = {\r\n    className: \"operator\",\r\n    begin: /[-+*/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,\r\n    relevance: 0,\r\n  };\r\n\r\n  const FUNCTION_CALL = {\r\n    begin: concat(/\\b/, either(...FUNCTIONS), /\\s*\\(/),\r\n    keywords: {\r\n      built_in: FUNCTIONS\r\n    }\r\n  };\r\n\r\n  // keywords with less than 3 letters are reduced in relevancy\r\n  function reduceRelevancy(list, {exceptions, when} = {}) {\r\n    const qualifyFn = when;\r\n    exceptions = exceptions || [];\r\n    return list.map((item) => {\r\n      if (item.match(/\\|\\d+$/) || exceptions.includes(item)) {\r\n        return item;\r\n      } else if (qualifyFn(item)) {\r\n        return `${item}|0`;\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n  }\r\n\r\n  return {\r\n    name: 'SQL',\r\n    case_insensitive: true,\r\n    // does not include {} or HTML tags `</`\r\n    illegal: /[{}]|<\\//,\r\n    keywords: {\r\n      $pattern: /\\b[\\w\\.]+/,\r\n      keyword:\r\n        reduceRelevancy(KEYWORDS, { when: (x) => x.length < 3 }),\r\n      literal: LITERALS,\r\n      type: TYPES,\r\n      built_in: POSSIBLE_WITHOUT_PARENS\r\n    },\r\n    contains: [\r\n      {\r\n        begin: either(...COMBOS),\r\n        keywords: {\r\n          $pattern: /[\\w\\.]+/,\r\n          keyword: KEYWORDS.concat(COMBOS),\r\n          literal: LITERALS,\r\n          type: TYPES\r\n        },\r\n      },\r\n      {\r\n        className: \"type\",\r\n        begin: either(...MULTI_WORD_TYPES)\r\n      },\r\n      FUNCTION_CALL,\r\n      VARIABLE,\r\n      STRING,\r\n      QUOTED_IDENTIFIER,\r\n      hljs.C_NUMBER_MODE,\r\n      hljs.C_BLOCK_COMMENT_MODE,\r\n      COMMENT_MODE,\r\n      OPERATOR\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = sql;\r\n"],
  "mappings": "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",
  "names": []
}
