{
  "version": 3,
  "sources": ["../../refractor/lang/yaml.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = yaml\r\nyaml.displayName = 'yaml'\r\nyaml.aliases = ['yml']\r\nfunction yaml(Prism) {\r\n  ;(function (Prism) {\r\n    // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\r\n    // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\r\n    var anchorOrAlias = /[*&][^\\s[\\]{},]+/ // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\r\n    var tag =\r\n      /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/ // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\r\n    var properties =\r\n      '(?:' +\r\n      tag.source +\r\n      '(?:[ \\t]+' +\r\n      anchorOrAlias.source +\r\n      ')?|' +\r\n      anchorOrAlias.source +\r\n      '(?:[ \\t]+' +\r\n      tag.source +\r\n      ')?)' // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\r\n    // This is a simplified version that doesn't support \"#\" and multiline keys\r\n    // All these long scarry character classes are simplified versions of YAML's characters\r\n    var plainKey =\r\n      /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(\r\n        /<PLAIN>/g,\r\n        function () {\r\n          return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/\r\n            .source\r\n        }\r\n      )\r\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source\r\n    /**\r\n     *\r\n     * @param {string} value\r\n     * @param {string} [flags]\r\n     * @returns {RegExp}\r\n     */\r\n    function createValuePattern(value, flags) {\r\n      flags = (flags || '').replace(/m/g, '') + 'm' // add m flag\r\n      var pattern =\r\n        /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source\r\n          .replace(/<<prop>>/g, function () {\r\n            return properties\r\n          })\r\n          .replace(/<<value>>/g, function () {\r\n            return value\r\n          })\r\n      return RegExp(pattern, flags)\r\n    }\r\n    Prism.languages.yaml = {\r\n      scalar: {\r\n        pattern: RegExp(\r\n          /([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(\r\n            /<<prop>>/g,\r\n            function () {\r\n              return properties\r\n            }\r\n          )\r\n        ),\r\n        lookbehind: true,\r\n        alias: 'string'\r\n      },\r\n      comment: /#.*/,\r\n      key: {\r\n        pattern: RegExp(\r\n          /((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source\r\n            .replace(/<<prop>>/g, function () {\r\n              return properties\r\n            })\r\n            .replace(/<<key>>/g, function () {\r\n              return '(?:' + plainKey + '|' + string + ')'\r\n            })\r\n        ),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        alias: 'atrule'\r\n      },\r\n      directive: {\r\n        pattern: /(^[ \\t]*)%.+/m,\r\n        lookbehind: true,\r\n        alias: 'important'\r\n      },\r\n      datetime: {\r\n        pattern: createValuePattern(\r\n          /\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/\r\n            .source\r\n        ),\r\n        lookbehind: true,\r\n        alias: 'number'\r\n      },\r\n      boolean: {\r\n        pattern: createValuePattern(/false|true/.source, 'i'),\r\n        lookbehind: true,\r\n        alias: 'important'\r\n      },\r\n      null: {\r\n        pattern: createValuePattern(/null|~/.source, 'i'),\r\n        lookbehind: true,\r\n        alias: 'important'\r\n      },\r\n      string: {\r\n        pattern: createValuePattern(string),\r\n        lookbehind: true,\r\n        greedy: true\r\n      },\r\n      number: {\r\n        pattern: createValuePattern(\r\n          /[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/\r\n            .source,\r\n          'i'\r\n        ),\r\n        lookbehind: true\r\n      },\r\n      tag: tag,\r\n      important: anchorOrAlias,\r\n      punctuation: /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\r\n    }\r\n    Prism.languages.yml = Prism.languages.yaml\r\n  })(Prism)\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,SAAK,cAAc;AACnB,SAAK,UAAU,CAAC,KAAK;AACrB,aAAS,KAAK,OAAO;AACnB;AAAC,OAAC,SAAUA,QAAO;AAGjB,YAAI,gBAAgB;AACpB,YAAI,MACF;AACF,YAAI,aACF,QACA,IAAI,SACJ,aACA,cAAc,SACd,QACA,cAAc,SACd,aACA,IAAI,SACJ;AAGF,YAAI,WACF,kJAAkJ,OAAO;AAAA,UACvJ;AAAA,UACA,WAAY;AACV,mBAAO,2EACJ;AAAA,UACL;AAAA,QACF;AACF,YAAI,SAAS,8CAA8C;AAO3D,iBAAS,mBAAmB,OAAO,OAAO;AACxC,mBAAS,SAAS,IAAI,QAAQ,MAAM,EAAE,IAAI;AAC1C,cAAI,UACF,yFAAyF,OACtF,QAAQ,aAAa,WAAY;AAChC,mBAAO;AAAA,UACT,CAAC,EACA,QAAQ,cAAc,WAAY;AACjC,mBAAO;AAAA,UACT,CAAC;AACL,iBAAO,OAAO,SAAS,KAAK;AAAA,QAC9B;AACA,QAAAA,OAAM,UAAU,OAAO;AAAA,UACrB,QAAQ;AAAA,YACN,SAAS;AAAA,cACP,6FAA6F,OAAO;AAAA,gBAClG;AAAA,gBACA,WAAY;AACV,yBAAO;AAAA,gBACT;AAAA,cACF;AAAA,YACF;AAAA,YACA,YAAY;AAAA,YACZ,OAAO;AAAA,UACT;AAAA,UACA,SAAS;AAAA,UACT,KAAK;AAAA,YACH,SAAS;AAAA,cACP,kEAAkE,OAC/D,QAAQ,aAAa,WAAY;AAChC,uBAAO;AAAA,cACT,CAAC,EACA,QAAQ,YAAY,WAAY;AAC/B,uBAAO,QAAQ,WAAW,MAAM,SAAS;AAAA,cAC3C,CAAC;AAAA,YACL;AAAA,YACA,YAAY;AAAA,YACZ,QAAQ;AAAA,YACR,OAAO;AAAA,UACT;AAAA,UACA,WAAW;AAAA,YACT,SAAS;AAAA,YACT,YAAY;AAAA,YACZ,OAAO;AAAA,UACT;AAAA,UACA,UAAU;AAAA,YACR,SAAS;AAAA,cACP,sJACG;AAAA,YACL;AAAA,YACA,YAAY;AAAA,YACZ,OAAO;AAAA,UACT;AAAA,UACA,SAAS;AAAA,YACP,SAAS,mBAAmB,aAAa,QAAQ,GAAG;AAAA,YACpD,YAAY;AAAA,YACZ,OAAO;AAAA,UACT;AAAA,UACA,MAAM;AAAA,YACJ,SAAS,mBAAmB,SAAS,QAAQ,GAAG;AAAA,YAChD,YAAY;AAAA,YACZ,OAAO;AAAA,UACT;AAAA,UACA,QAAQ;AAAA,YACN,SAAS,mBAAmB,MAAM;AAAA,YAClC,YAAY;AAAA,YACZ,QAAQ;AAAA,UACV;AAAA,UACA,QAAQ;AAAA,YACN,SAAS;AAAA,cACP,iFACG;AAAA,cACH;AAAA,YACF;AAAA,YACA,YAAY;AAAA,UACd;AAAA,UACA;AAAA,UACA,WAAW;AAAA,UACX,aAAa;AAAA,QACf;AACA,QAAAA,OAAM,UAAU,MAAMA,OAAM,UAAU;AAAA,MACxC,GAAG,KAAK;AAAA,IACV;AAAA;AAAA;",
  "names": ["Prism"]
}
