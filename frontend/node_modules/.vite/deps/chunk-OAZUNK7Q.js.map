{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/routeros.js"],
  "sourcesContent": ["/*\r\nLanguage: Microtik RouterOS script\r\nAuthor: Ivan Dementev <ivan_div@mail.ru>\r\nDescription: Scripting host provides a way to automate some router maintenance tasks by means of executing user-defined scripts bounded to some event occurrence\r\nWebsite: https://wiki.mikrotik.com/wiki/Manual:Scripting\r\n*/\r\n\r\n// Colors from RouterOS terminal:\r\n//   green        - #0E9A00\r\n//   teal         - #0C9A9A\r\n//   purple       - #99069A\r\n//   light-brown  - #9A9900\r\n\r\nfunction routeros(hljs) {\r\n  const STATEMENTS = 'foreach do while for if from to step else on-error and or not in';\r\n\r\n  // Global commands: Every global command should start with \":\" token, otherwise it will be treated as variable.\r\n  const GLOBAL_COMMANDS = 'global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime';\r\n\r\n  // Common commands: Following commands available from most sub-menus:\r\n  const COMMON_COMMANDS = 'add remove enable disable set get print export edit find run debug error info warning';\r\n\r\n  const LITERALS = 'true false yes no nothing nil null';\r\n\r\n  const OBJECTS = 'traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw';\r\n\r\n  const VAR = {\r\n    className: 'variable',\r\n    variants: [\r\n      {\r\n        begin: /\\$[\\w\\d#@][\\w\\d_]*/\r\n      },\r\n      {\r\n        begin: /\\$\\{(.*?)\\}/\r\n      }\r\n    ]\r\n  };\r\n\r\n  const QUOTE_STRING = {\r\n    className: 'string',\r\n    begin: /\"/,\r\n    end: /\"/,\r\n    contains: [\r\n      hljs.BACKSLASH_ESCAPE,\r\n      VAR,\r\n      {\r\n        className: 'variable',\r\n        begin: /\\$\\(/,\r\n        end: /\\)/,\r\n        contains: [ hljs.BACKSLASH_ESCAPE ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const APOS_STRING = {\r\n    className: 'string',\r\n    begin: /'/,\r\n    end: /'/\r\n  };\r\n\r\n  return {\r\n    name: 'Microtik RouterOS script',\r\n    aliases: [\r\n      'mikrotik'\r\n    ],\r\n    case_insensitive: true,\r\n    keywords: {\r\n      $pattern: /:?[\\w-]+/,\r\n      literal: LITERALS,\r\n      keyword: STATEMENTS + ' :' + STATEMENTS.split(' ').join(' :') + ' :' + GLOBAL_COMMANDS.split(' ').join(' :')\r\n    },\r\n    contains: [\r\n      { // illegal syntax\r\n        variants: [\r\n          { // -- comment\r\n            begin: /\\/\\*/,\r\n            end: /\\*\\//\r\n          },\r\n          { // Stan comment\r\n            begin: /\\/\\//,\r\n            end: /$/\r\n          },\r\n          { // HTML tags\r\n            begin: /<\\//,\r\n            end: />/\r\n          }\r\n        ],\r\n        illegal: /./\r\n      },\r\n      hljs.COMMENT('^#', '$'),\r\n      QUOTE_STRING,\r\n      APOS_STRING,\r\n      VAR,\r\n      // attribute=value\r\n      {\r\n        // > is to avoid matches with => in other grammars\r\n        begin: /[\\w-]+=([^\\s{}[\\]()>]+)/,\r\n        relevance: 0,\r\n        returnBegin: true,\r\n        contains: [\r\n          {\r\n            className: 'attribute',\r\n            begin: /[^=]+/\r\n          },\r\n          {\r\n            begin: /=/,\r\n            endsWithParent: true,\r\n            relevance: 0,\r\n            contains: [\r\n              QUOTE_STRING,\r\n              APOS_STRING,\r\n              VAR,\r\n              {\r\n                className: 'literal',\r\n                begin: '\\\\b(' + LITERALS.split(' ').join('|') + ')\\\\b'\r\n              },\r\n              {\r\n                // Do not format unclassified values. Needed to exclude highlighting of values as built_in.\r\n                begin: /(\"[^\"]*\"|[^\\s{}[\\]]+)/\r\n              }\r\n              /*\r\n              {\r\n                // IPv4 addresses and subnets\r\n                className: 'number',\r\n                variants: [\r\n                  {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24\r\n                  {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3\r\n                  {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1\r\n                ]\r\n              },\r\n              {\r\n                // MAC addresses and DHCP Client IDs\r\n                className: 'number',\r\n                begin: /\\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\\b/,\r\n              },\r\n              */\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        // HEX values\r\n        className: 'number',\r\n        begin: /\\*[0-9a-fA-F]+/\r\n      },\r\n      {\r\n        begin: '\\\\b(' + COMMON_COMMANDS.split(' ').join('|') + ')([\\\\s[(\\\\]|])',\r\n        returnBegin: true,\r\n        contains: [\r\n          {\r\n            className: 'builtin-name', // 'function',\r\n            begin: /\\w+/\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        className: 'built_in',\r\n        variants: [\r\n          {\r\n            begin: '(\\\\.\\\\./|/|\\\\s)((' + OBJECTS.split(' ').join('|') + ');?\\\\s)+'\r\n          },\r\n          {\r\n            begin: /\\.\\./,\r\n            relevance: 0\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = routeros;\r\n"],
  "mappings": "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",
  "names": []
}
