{
  "version": 3,
  "sources": ["../../refractor/lang/haxe.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = haxe\r\nhaxe.displayName = 'haxe'\r\nhaxe.aliases = []\r\nfunction haxe(Prism) {\r\n  Prism.languages.haxe = Prism.languages.extend('clike', {\r\n    string: {\r\n      // Strings can be multi-line\r\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\r\n      greedy: true\r\n    },\r\n    'class-name': [\r\n      {\r\n        pattern:\r\n          /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\r\n        lookbehind: true\r\n      }, // based on naming convention\r\n      /\\b[A-Z]\\w*/\r\n    ],\r\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\r\n    keyword:\r\n      /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\r\n    function: {\r\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i,\r\n      greedy: true\r\n    },\r\n    operator: /\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/\r\n  })\r\n  Prism.languages.insertBefore('haxe', 'string', {\r\n    'string-interpolation': {\r\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\r\n      greedy: true,\r\n      inside: {\r\n        interpolation: {\r\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\r\n          lookbehind: true,\r\n          inside: {\r\n            'interpolation-punctuation': {\r\n              pattern: /^\\$\\{?|\\}$/,\r\n              alias: 'punctuation'\r\n            },\r\n            expression: {\r\n              pattern: /[\\s\\S]+/,\r\n              inside: Prism.languages.haxe\r\n            }\r\n          }\r\n        },\r\n        string: /[\\s\\S]+/\r\n      }\r\n    }\r\n  })\r\n  Prism.languages.insertBefore('haxe', 'class-name', {\r\n    regex: {\r\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[a-z]*/,\r\n      greedy: true,\r\n      inside: {\r\n        'regex-flags': /\\b[a-z]+$/,\r\n        'regex-source': {\r\n          pattern: /^(~\\/)[\\s\\S]+(?=\\/$)/,\r\n          lookbehind: true,\r\n          alias: 'language-regex',\r\n          inside: Prism.languages.regex\r\n        },\r\n        'regex-delimiter': /^~\\/|\\/$/\r\n      }\r\n    }\r\n  })\r\n  Prism.languages.insertBefore('haxe', 'keyword', {\r\n    preprocessor: {\r\n      pattern: /#(?:else|elseif|end|if)\\b.*/,\r\n      alias: 'property'\r\n    },\r\n    metadata: {\r\n      pattern: /@:?[\\w.]+/,\r\n      alias: 'symbol'\r\n    },\r\n    reification: {\r\n      pattern: /\\$(?:\\w+|(?=\\{))/,\r\n      alias: 'important'\r\n    }\r\n  })\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,SAAK,cAAc;AACnB,SAAK,UAAU,CAAC;AAChB,aAAS,KAAK,OAAO;AACnB,YAAM,UAAU,OAAO,MAAM,UAAU,OAAO,SAAS;AAAA,QACrD,QAAQ;AAAA;AAAA,UAEN,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,QACA,cAAc;AAAA,UACZ;AAAA,YACE,SACE;AAAA,YACF,YAAY;AAAA,UACd;AAAA;AAAA,UACA;AAAA,QACF;AAAA;AAAA,QAEA,SACE;AAAA,QACF,UAAU;AAAA,UACR,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,QACA,UAAU;AAAA,MACZ,CAAC;AACD,YAAM,UAAU,aAAa,QAAQ,UAAU;AAAA,QAC7C,wBAAwB;AAAA,UACtB,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,QAAQ;AAAA,YACN,eAAe;AAAA,cACb,SAAS;AAAA,cACT,YAAY;AAAA,cACZ,QAAQ;AAAA,gBACN,6BAA6B;AAAA,kBAC3B,SAAS;AAAA,kBACT,OAAO;AAAA,gBACT;AAAA,gBACA,YAAY;AAAA,kBACV,SAAS;AAAA,kBACT,QAAQ,MAAM,UAAU;AAAA,gBAC1B;AAAA,cACF;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF,CAAC;AACD,YAAM,UAAU,aAAa,QAAQ,cAAc;AAAA,QACjD,OAAO;AAAA,UACL,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,QAAQ;AAAA,YACN,eAAe;AAAA,YACf,gBAAgB;AAAA,cACd,SAAS;AAAA,cACT,YAAY;AAAA,cACZ,OAAO;AAAA,cACP,QAAQ,MAAM,UAAU;AAAA,YAC1B;AAAA,YACA,mBAAmB;AAAA,UACrB;AAAA,QACF;AAAA,MACF,CAAC;AACD,YAAM,UAAU,aAAa,QAAQ,WAAW;AAAA,QAC9C,cAAc;AAAA,UACZ,SAAS;AAAA,UACT,OAAO;AAAA,QACT;AAAA,QACA,UAAU;AAAA,UACR,SAAS;AAAA,UACT,OAAO;AAAA,QACT;AAAA,QACA,aAAa;AAAA,UACX,SAAS;AAAA,UACT,OAAO;AAAA,QACT;AAAA,MACF,CAAC;AAAA,IACH;AAAA;AAAA;",
  "names": []
}
