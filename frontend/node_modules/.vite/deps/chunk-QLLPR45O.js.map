{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/swift.js"],
  "sourcesContent": ["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction lookahead(re) {\r\n  return concat('(?=', re, ')');\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\r\nfunction either(...args) {\r\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\r\n  return joined;\r\n}\r\n\r\nconst keywordWrapper = keyword => concat(\r\n  /\\b/,\r\n  keyword,\r\n  /\\w$/.test(keyword) ? /\\b/ : /\\B/\r\n);\r\n\r\n// Keywords that require a leading dot.\r\nconst dotKeywords = [\r\n  'Protocol', // contextual\r\n  'Type' // contextual\r\n].map(keywordWrapper);\r\n\r\n// Keywords that may have a leading dot.\r\nconst optionalDotKeywords = [\r\n  'init',\r\n  'self'\r\n].map(keywordWrapper);\r\n\r\n// should register as keyword, not type\r\nconst keywordTypes = [\r\n  'Any',\r\n  'Self'\r\n];\r\n\r\n// Regular keywords and literals.\r\nconst keywords = [\r\n  // strings below will be fed into the regular `keywords` engine while regex\r\n  // will result in additional modes being created to scan for those keywords to\r\n  // avoid conflicts with other rules\r\n  'associatedtype',\r\n  'async',\r\n  'await',\r\n  /as\\?/, // operator\r\n  /as!/, // operator\r\n  'as', // operator\r\n  'break',\r\n  'case',\r\n  'catch',\r\n  'class',\r\n  'continue',\r\n  'convenience', // contextual\r\n  'default',\r\n  'defer',\r\n  'deinit',\r\n  'didSet', // contextual\r\n  'do',\r\n  'dynamic', // contextual\r\n  'else',\r\n  'enum',\r\n  'extension',\r\n  'fallthrough',\r\n  /fileprivate\\(set\\)/,\r\n  'fileprivate',\r\n  'final', // contextual\r\n  'for',\r\n  'func',\r\n  'get', // contextual\r\n  'guard',\r\n  'if',\r\n  'import',\r\n  'indirect', // contextual\r\n  'infix', // contextual\r\n  /init\\?/,\r\n  /init!/,\r\n  'inout',\r\n  /internal\\(set\\)/,\r\n  'internal',\r\n  'in',\r\n  'is', // operator\r\n  'lazy', // contextual\r\n  'let',\r\n  'mutating', // contextual\r\n  'nonmutating', // contextual\r\n  /open\\(set\\)/, // contextual\r\n  'open', // contextual\r\n  'operator',\r\n  'optional', // contextual\r\n  'override', // contextual\r\n  'postfix', // contextual\r\n  'precedencegroup',\r\n  'prefix', // contextual\r\n  /private\\(set\\)/,\r\n  'private',\r\n  'protocol',\r\n  /public\\(set\\)/,\r\n  'public',\r\n  'repeat',\r\n  'required', // contextual\r\n  'rethrows',\r\n  'return',\r\n  'set', // contextual\r\n  'some', // contextual\r\n  'static',\r\n  'struct',\r\n  'subscript',\r\n  'super',\r\n  'switch',\r\n  'throws',\r\n  'throw',\r\n  /try\\?/, // operator\r\n  /try!/, // operator\r\n  'try', // operator\r\n  'typealias',\r\n  /unowned\\(safe\\)/, // contextual\r\n  /unowned\\(unsafe\\)/, // contextual\r\n  'unowned', // contextual\r\n  'var',\r\n  'weak', // contextual\r\n  'where',\r\n  'while',\r\n  'willSet' // contextual\r\n];\r\n\r\n// NOTE: Contextual keywords are reserved only in specific contexts.\r\n// Ideally, these should be matched using modes to avoid false positives.\r\n\r\n// Literals.\r\nconst literals = [\r\n  'false',\r\n  'nil',\r\n  'true'\r\n];\r\n\r\n// Keywords used in precedence groups.\r\nconst precedencegroupKeywords = [\r\n  'assignment',\r\n  'associativity',\r\n  'higherThan',\r\n  'left',\r\n  'lowerThan',\r\n  'none',\r\n  'right'\r\n];\r\n\r\n// Keywords that start with a number sign (#).\r\n// #available is handled separately.\r\nconst numberSignKeywords = [\r\n  '#colorLiteral',\r\n  '#column',\r\n  '#dsohandle',\r\n  '#else',\r\n  '#elseif',\r\n  '#endif',\r\n  '#error',\r\n  '#file',\r\n  '#fileID',\r\n  '#fileLiteral',\r\n  '#filePath',\r\n  '#function',\r\n  '#if',\r\n  '#imageLiteral',\r\n  '#keyPath',\r\n  '#line',\r\n  '#selector',\r\n  '#sourceLocation',\r\n  '#warn_unqualified_access',\r\n  '#warning'\r\n];\r\n\r\n// Global functions in the Standard Library.\r\nconst builtIns = [\r\n  'abs',\r\n  'all',\r\n  'any',\r\n  'assert',\r\n  'assertionFailure',\r\n  'debugPrint',\r\n  'dump',\r\n  'fatalError',\r\n  'getVaList',\r\n  'isKnownUniquelyReferenced',\r\n  'max',\r\n  'min',\r\n  'numericCast',\r\n  'pointwiseMax',\r\n  'pointwiseMin',\r\n  'precondition',\r\n  'preconditionFailure',\r\n  'print',\r\n  'readLine',\r\n  'repeatElement',\r\n  'sequence',\r\n  'stride',\r\n  'swap',\r\n  'swift_unboxFromSwiftValueWithType',\r\n  'transcode',\r\n  'type',\r\n  'unsafeBitCast',\r\n  'unsafeDowncast',\r\n  'withExtendedLifetime',\r\n  'withUnsafeMutablePointer',\r\n  'withUnsafePointer',\r\n  'withVaList',\r\n  'withoutActuallyEscaping',\r\n  'zip'\r\n];\r\n\r\n// Valid first characters for operators.\r\nconst operatorHead = either(\r\n  /[/=\\-+!*%<>&|^~?]/,\r\n  /[\\u00A1-\\u00A7]/,\r\n  /[\\u00A9\\u00AB]/,\r\n  /[\\u00AC\\u00AE]/,\r\n  /[\\u00B0\\u00B1]/,\r\n  /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/,\r\n  /[\\u2016-\\u2017]/,\r\n  /[\\u2020-\\u2027]/,\r\n  /[\\u2030-\\u203E]/,\r\n  /[\\u2041-\\u2053]/,\r\n  /[\\u2055-\\u205E]/,\r\n  /[\\u2190-\\u23FF]/,\r\n  /[\\u2500-\\u2775]/,\r\n  /[\\u2794-\\u2BFF]/,\r\n  /[\\u2E00-\\u2E7F]/,\r\n  /[\\u3001-\\u3003]/,\r\n  /[\\u3008-\\u3020]/,\r\n  /[\\u3030]/\r\n);\r\n\r\n// Valid characters for operators.\r\nconst operatorCharacter = either(\r\n  operatorHead,\r\n  /[\\u0300-\\u036F]/,\r\n  /[\\u1DC0-\\u1DFF]/,\r\n  /[\\u20D0-\\u20FF]/,\r\n  /[\\uFE00-\\uFE0F]/,\r\n  /[\\uFE20-\\uFE2F]/\r\n  // TODO: The following characters are also allowed, but the regex isn't supported yet.\r\n  // /[\\u{E0100}-\\u{E01EF}]/u\r\n);\r\n\r\n// Valid operator.\r\nconst operator = concat(operatorHead, operatorCharacter, '*');\r\n\r\n// Valid first characters for identifiers.\r\nconst identifierHead = either(\r\n  /[a-zA-Z_]/,\r\n  /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/,\r\n  /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/,\r\n  /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/,\r\n  /[\\u1E00-\\u1FFF]/,\r\n  /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/,\r\n  /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/,\r\n  /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/,\r\n  /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/,\r\n  /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/,\r\n  /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\r\n  // The following characters are also allowed, but the regexes aren't supported yet.\r\n  // /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\r\n  // /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\r\n  // /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\r\n  // /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\r\n);\r\n\r\n// Valid characters for identifiers.\r\nconst identifierCharacter = either(\r\n  identifierHead,\r\n  /\\d/,\r\n  /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/\r\n);\r\n\r\n// Valid identifier.\r\nconst identifier = concat(identifierHead, identifierCharacter, '*');\r\n\r\n// Valid type identifier.\r\nconst typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');\r\n\r\n// Built-in attributes, which are highlighted as keywords.\r\n// @available is handled separately.\r\nconst keywordAttributes = [\r\n  'autoclosure',\r\n  concat(/convention\\(/, either('swift', 'block', 'c'), /\\)/),\r\n  'discardableResult',\r\n  'dynamicCallable',\r\n  'dynamicMemberLookup',\r\n  'escaping',\r\n  'frozen',\r\n  'GKInspectable',\r\n  'IBAction',\r\n  'IBDesignable',\r\n  'IBInspectable',\r\n  'IBOutlet',\r\n  'IBSegueAction',\r\n  'inlinable',\r\n  'main',\r\n  'nonobjc',\r\n  'NSApplicationMain',\r\n  'NSCopying',\r\n  'NSManaged',\r\n  concat(/objc\\(/, identifier, /\\)/),\r\n  'objc',\r\n  'objcMembers',\r\n  'propertyWrapper',\r\n  'requires_stored_property_inits',\r\n  'testable',\r\n  'UIApplicationMain',\r\n  'unknown',\r\n  'usableFromInline'\r\n];\r\n\r\n// Contextual keywords used in @available and #available.\r\nconst availabilityKeywords = [\r\n  'iOS',\r\n  'iOSApplicationExtension',\r\n  'macOS',\r\n  'macOSApplicationExtension',\r\n  'macCatalyst',\r\n  'macCatalystApplicationExtension',\r\n  'watchOS',\r\n  'watchOSApplicationExtension',\r\n  'tvOS',\r\n  'tvOSApplicationExtension',\r\n  'swift'\r\n];\r\n\r\n/*\r\nLanguage: Swift\r\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\r\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\r\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\r\nWebsite: https://swift.org\r\nCategory: common, system\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction swift(hljs) {\r\n  const WHITESPACE = {\r\n    match: /\\s+/,\r\n    relevance: 0\r\n  };\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\r\n  const BLOCK_COMMENT = hljs.COMMENT(\r\n    '/\\\\*',\r\n    '\\\\*/',\r\n    {\r\n      contains: [ 'self' ]\r\n    }\r\n  );\r\n  const COMMENTS = [\r\n    hljs.C_LINE_COMMENT_MODE,\r\n    BLOCK_COMMENT\r\n  ];\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\r\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\r\n  const DOT_KEYWORD = {\r\n    className: 'keyword',\r\n    begin: concat(/\\./, lookahead(either(...dotKeywords, ...optionalDotKeywords))),\r\n    end: either(...dotKeywords, ...optionalDotKeywords),\r\n    excludeBegin: true\r\n  };\r\n  const KEYWORD_GUARD = {\r\n    // Consume .keyword to prevent highlighting properties and methods as keywords.\r\n    match: concat(/\\./, either(...keywords)),\r\n    relevance: 0\r\n  };\r\n  const PLAIN_KEYWORDS = keywords\r\n    .filter(kw => typeof kw === 'string')\r\n    .concat([ \"_|0\" ]); // seems common, so 0 relevance\r\n  const REGEX_KEYWORDS = keywords\r\n    .filter(kw => typeof kw !== 'string') // find regex\r\n    .concat(keywordTypes)\r\n    .map(keywordWrapper);\r\n  const KEYWORD = {\r\n    variants: [\r\n      {\r\n        className: 'keyword',\r\n        match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\r\n      }\r\n    ]\r\n  };\r\n  // find all the regular keywords\r\n  const KEYWORDS = {\r\n    $pattern: either(\r\n      /\\b\\w+/, // regular keywords\r\n      /#\\w+/ // number keywords\r\n    ),\r\n    keyword: PLAIN_KEYWORDS\r\n      .concat(numberSignKeywords),\r\n    literal: literals\r\n  };\r\n  const KEYWORD_MODES = [\r\n    DOT_KEYWORD,\r\n    KEYWORD_GUARD,\r\n    KEYWORD\r\n  ];\r\n\r\n  // https://github.com/apple/swift/tree/main/stdlib/public/core\r\n  const BUILT_IN_GUARD = {\r\n    // Consume .built_in to prevent highlighting properties and methods.\r\n    match: concat(/\\./, either(...builtIns)),\r\n    relevance: 0\r\n  };\r\n  const BUILT_IN = {\r\n    className: 'built_in',\r\n    match: concat(/\\b/, either(...builtIns), /(?=\\()/)\r\n  };\r\n  const BUILT_INS = [\r\n    BUILT_IN_GUARD,\r\n    BUILT_IN\r\n  ];\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\r\n  const OPERATOR_GUARD = {\r\n    // Prevent -> from being highlighting as an operator.\r\n    match: /->/,\r\n    relevance: 0\r\n  };\r\n  const OPERATOR = {\r\n    className: 'operator',\r\n    relevance: 0,\r\n    variants: [\r\n      {\r\n        match: operator\r\n      },\r\n      {\r\n        // dot-operator: only operators that start with a dot are allowed to use dots as\r\n        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\r\n        // characters that may also include dots.\r\n        match: `\\\\.(\\\\.|${operatorCharacter})+`\r\n      }\r\n    ]\r\n  };\r\n  const OPERATORS = [\r\n    OPERATOR_GUARD,\r\n    OPERATOR\r\n  ];\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\r\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\r\n  const decimalDigits = '([0-9]_*)+';\r\n  const hexDigits = '([0-9a-fA-F]_*)+';\r\n  const NUMBER = {\r\n    className: 'number',\r\n    relevance: 0,\r\n    variants: [\r\n      // decimal floating-point-literal (subsumes decimal-literal)\r\n      {\r\n        match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b`\r\n      },\r\n      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\r\n      {\r\n        match: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b`\r\n      },\r\n      // octal-literal\r\n      {\r\n        match: /\\b0o([0-7]_*)+\\b/\r\n      },\r\n      // binary-literal\r\n      {\r\n        match: /\\b0b([01]_*)+\\b/\r\n      }\r\n    ]\r\n  };\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\r\n  const ESCAPED_CHARACTER = (rawDelimiter = \"\") => ({\r\n    className: 'subst',\r\n    variants: [\r\n      {\r\n        match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/)\r\n      },\r\n      {\r\n        match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/)\r\n      }\r\n    ]\r\n  });\r\n  const ESCAPED_NEWLINE = (rawDelimiter = \"\") => ({\r\n    className: 'subst',\r\n    match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\r\n  });\r\n  const INTERPOLATION = (rawDelimiter = \"\") => ({\r\n    className: 'subst',\r\n    label: \"interpol\",\r\n    begin: concat(/\\\\/, rawDelimiter, /\\(/),\r\n    end: /\\)/\r\n  });\r\n  const MULTILINE_STRING = (rawDelimiter = \"\") => ({\r\n    begin: concat(rawDelimiter, /\"\"\"/),\r\n    end: concat(/\"\"\"/, rawDelimiter),\r\n    contains: [\r\n      ESCAPED_CHARACTER(rawDelimiter),\r\n      ESCAPED_NEWLINE(rawDelimiter),\r\n      INTERPOLATION(rawDelimiter)\r\n    ]\r\n  });\r\n  const SINGLE_LINE_STRING = (rawDelimiter = \"\") => ({\r\n    begin: concat(rawDelimiter, /\"/),\r\n    end: concat(/\"/, rawDelimiter),\r\n    contains: [\r\n      ESCAPED_CHARACTER(rawDelimiter),\r\n      INTERPOLATION(rawDelimiter)\r\n    ]\r\n  });\r\n  const STRING = {\r\n    className: 'string',\r\n    variants: [\r\n      MULTILINE_STRING(),\r\n      MULTILINE_STRING(\"#\"),\r\n      MULTILINE_STRING(\"##\"),\r\n      MULTILINE_STRING(\"###\"),\r\n      SINGLE_LINE_STRING(),\r\n      SINGLE_LINE_STRING(\"#\"),\r\n      SINGLE_LINE_STRING(\"##\"),\r\n      SINGLE_LINE_STRING(\"###\")\r\n    ]\r\n  };\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\r\n  const QUOTED_IDENTIFIER = {\r\n    match: concat(/`/, identifier, /`/)\r\n  };\r\n  const IMPLICIT_PARAMETER = {\r\n    className: 'variable',\r\n    match: /\\$\\d+/\r\n  };\r\n  const PROPERTY_WRAPPER_PROJECTION = {\r\n    className: 'variable',\r\n    match: `\\\\$${identifierCharacter}+`\r\n  };\r\n  const IDENTIFIERS = [\r\n    QUOTED_IDENTIFIER,\r\n    IMPLICIT_PARAMETER,\r\n    PROPERTY_WRAPPER_PROJECTION\r\n  ];\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\r\n  const AVAILABLE_ATTRIBUTE = {\r\n    match: /(@|#)available/,\r\n    className: \"keyword\",\r\n    starts: {\r\n      contains: [\r\n        {\r\n          begin: /\\(/,\r\n          end: /\\)/,\r\n          keywords: availabilityKeywords,\r\n          contains: [\r\n            ...OPERATORS,\r\n            NUMBER,\r\n            STRING\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  };\r\n  const KEYWORD_ATTRIBUTE = {\r\n    className: 'keyword',\r\n    match: concat(/@/, either(...keywordAttributes))\r\n  };\r\n  const USER_DEFINED_ATTRIBUTE = {\r\n    className: 'meta',\r\n    match: concat(/@/, identifier)\r\n  };\r\n  const ATTRIBUTES = [\r\n    AVAILABLE_ATTRIBUTE,\r\n    KEYWORD_ATTRIBUTE,\r\n    USER_DEFINED_ATTRIBUTE\r\n  ];\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Types.html\r\n  const TYPE = {\r\n    match: lookahead(/\\b[A-Z]/),\r\n    relevance: 0,\r\n    contains: [\r\n      { // Common Apple frameworks, for relevance boost\r\n        className: 'type',\r\n        match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')\r\n      },\r\n      { // Type identifier\r\n        className: 'type',\r\n        match: typeIdentifier,\r\n        relevance: 0\r\n      },\r\n      { // Optional type\r\n        match: /[?!]+/,\r\n        relevance: 0\r\n      },\r\n      { // Variadic parameter\r\n        match: /\\.\\.\\./,\r\n        relevance: 0\r\n      },\r\n      { // Protocol composition\r\n        match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n  const GENERIC_ARGUMENTS = {\r\n    begin: /</,\r\n    end: />/,\r\n    keywords: KEYWORDS,\r\n    contains: [\r\n      ...COMMENTS,\r\n      ...KEYWORD_MODES,\r\n      ...ATTRIBUTES,\r\n      OPERATOR_GUARD,\r\n      TYPE\r\n    ]\r\n  };\r\n  TYPE.contains.push(GENERIC_ARGUMENTS);\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\r\n  // Prevents element names from being highlighted as keywords.\r\n  const TUPLE_ELEMENT_NAME = {\r\n    match: concat(identifier, /\\s*:/),\r\n    keywords: \"_|0\",\r\n    relevance: 0\r\n  };\r\n  // Matches tuples as well as the parameter list of a function type.\r\n  const TUPLE = {\r\n    begin: /\\(/,\r\n    end: /\\)/,\r\n    relevance: 0,\r\n    keywords: KEYWORDS,\r\n    contains: [\r\n      'self',\r\n      TUPLE_ELEMENT_NAME,\r\n      ...COMMENTS,\r\n      ...KEYWORD_MODES,\r\n      ...BUILT_INS,\r\n      ...OPERATORS,\r\n      NUMBER,\r\n      STRING,\r\n      ...IDENTIFIERS,\r\n      ...ATTRIBUTES,\r\n      TYPE\r\n    ]\r\n  };\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\r\n  // Matches both the keyword func and the function title.\r\n  // Grouping these lets us differentiate between the operator function <\r\n  // and the start of the generic parameter clause (also <).\r\n  const FUNC_PLUS_TITLE = {\r\n    beginKeywords: 'func',\r\n    contains: [\r\n      {\r\n        className: 'title',\r\n        match: either(QUOTED_IDENTIFIER.match, identifier, operator),\r\n        // Required to make sure the opening < of the generic parameter clause\r\n        // isn't parsed as a second title.\r\n        endsParent: true,\r\n        relevance: 0\r\n      },\r\n      WHITESPACE\r\n    ]\r\n  };\r\n  const GENERIC_PARAMETERS = {\r\n    begin: /</,\r\n    end: />/,\r\n    contains: [\r\n      ...COMMENTS,\r\n      TYPE\r\n    ]\r\n  };\r\n  const FUNCTION_PARAMETER_NAME = {\r\n    begin: either(\r\n      lookahead(concat(identifier, /\\s*:/)),\r\n      lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))\r\n    ),\r\n    end: /:/,\r\n    relevance: 0,\r\n    contains: [\r\n      {\r\n        className: 'keyword',\r\n        match: /\\b_\\b/\r\n      },\r\n      {\r\n        className: 'params',\r\n        match: identifier\r\n      }\r\n    ]\r\n  };\r\n  const FUNCTION_PARAMETERS = {\r\n    begin: /\\(/,\r\n    end: /\\)/,\r\n    keywords: KEYWORDS,\r\n    contains: [\r\n      FUNCTION_PARAMETER_NAME,\r\n      ...COMMENTS,\r\n      ...KEYWORD_MODES,\r\n      ...OPERATORS,\r\n      NUMBER,\r\n      STRING,\r\n      ...ATTRIBUTES,\r\n      TYPE,\r\n      TUPLE\r\n    ],\r\n    endsParent: true,\r\n    illegal: /[\"']/\r\n  };\r\n  const FUNCTION = {\r\n    className: 'function',\r\n    match: lookahead(/\\bfunc\\b/),\r\n    contains: [\r\n      FUNC_PLUS_TITLE,\r\n      GENERIC_PARAMETERS,\r\n      FUNCTION_PARAMETERS,\r\n      WHITESPACE\r\n    ],\r\n    illegal: [\r\n      /\\[/,\r\n      /%/\r\n    ]\r\n  };\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\r\n  const INIT_SUBSCRIPT = {\r\n    className: 'function',\r\n    match: /\\b(subscript|init[?!]?)\\s*(?=[<(])/,\r\n    keywords: {\r\n      keyword: \"subscript init init? init!\",\r\n      $pattern: /\\w+[?!]?/\r\n    },\r\n    contains: [\r\n      GENERIC_PARAMETERS,\r\n      FUNCTION_PARAMETERS,\r\n      WHITESPACE\r\n    ],\r\n    illegal: /\\[|%/\r\n  };\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\r\n  const OPERATOR_DECLARATION = {\r\n    beginKeywords: 'operator',\r\n    end: hljs.MATCH_NOTHING_RE,\r\n    contains: [\r\n      {\r\n        className: 'title',\r\n        match: operator,\r\n        endsParent: true,\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\r\n  const PRECEDENCEGROUP = {\r\n    beginKeywords: 'precedencegroup',\r\n    end: hljs.MATCH_NOTHING_RE,\r\n    contains: [\r\n      {\r\n        className: 'title',\r\n        match: typeIdentifier,\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: /{/,\r\n        end: /}/,\r\n        relevance: 0,\r\n        endsParent: true,\r\n        keywords: [\r\n          ...precedencegroupKeywords,\r\n          ...literals\r\n        ],\r\n        contains: [ TYPE ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  // Add supported submodes to string interpolation.\r\n  for (const variant of STRING.variants) {\r\n    const interpolation = variant.contains.find(mode => mode.label === \"interpol\");\r\n    // TODO: Interpolation can contain any expression, so there's room for improvement here.\r\n    interpolation.keywords = KEYWORDS;\r\n    const submodes = [\r\n      ...KEYWORD_MODES,\r\n      ...BUILT_INS,\r\n      ...OPERATORS,\r\n      NUMBER,\r\n      STRING,\r\n      ...IDENTIFIERS\r\n    ];\r\n    interpolation.contains = [\r\n      ...submodes,\r\n      {\r\n        begin: /\\(/,\r\n        end: /\\)/,\r\n        contains: [\r\n          'self',\r\n          ...submodes\r\n        ]\r\n      }\r\n    ];\r\n  }\r\n\r\n  return {\r\n    name: 'Swift',\r\n    keywords: KEYWORDS,\r\n    contains: [\r\n      ...COMMENTS,\r\n      FUNCTION,\r\n      INIT_SUBSCRIPT,\r\n      {\r\n        className: 'class',\r\n        beginKeywords: 'struct protocol class extension enum',\r\n        end: '\\\\{',\r\n        excludeEnd: true,\r\n        keywords: KEYWORDS,\r\n        contains: [\r\n          hljs.inherit(hljs.TITLE_MODE, {\r\n            begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\r\n          }),\r\n          ...KEYWORD_MODES\r\n        ]\r\n      },\r\n      OPERATOR_DECLARATION,\r\n      PRECEDENCEGROUP,\r\n      {\r\n        beginKeywords: 'import',\r\n        end: /$/,\r\n        contains: [ ...COMMENTS ],\r\n        relevance: 0\r\n      },\r\n      ...KEYWORD_MODES,\r\n      ...BUILT_INS,\r\n      ...OPERATORS,\r\n      NUMBER,\r\n      STRING,\r\n      ...IDENTIFIERS,\r\n      ...ATTRIBUTES,\r\n      TYPE,\r\n      TUPLE\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = swift;\r\n"],
  "mappings": "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",
  "names": []
}
