{
  "version": 3,
  "sources": ["../../refractor/lang/web-idl.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = webIdl\r\nwebIdl.displayName = 'webIdl'\r\nwebIdl.aliases = []\r\nfunction webIdl(Prism) {\r\n  ;(function (Prism) {\r\n    var id = /(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source\r\n    var type =\r\n      '(?:' +\r\n      /\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source +\r\n      '|' +\r\n      /\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source +\r\n      '|' +\r\n      /(?!(?:unrestricted|unsigned)\\b)/.source +\r\n      id +\r\n      /(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source +\r\n      ')' +\r\n      /(?:\\s*\\?)?/.source\r\n    var typeInside = {}\r\n    Prism.languages['web-idl'] = {\r\n      comment: {\r\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\r\n        greedy: true\r\n      },\r\n      string: {\r\n        pattern: /\"[^\"]*\"/,\r\n        greedy: true\r\n      },\r\n      namespace: {\r\n        pattern: RegExp(/(\\bnamespace\\s+)/.source + id),\r\n        lookbehind: true\r\n      },\r\n      'class-name': [\r\n        {\r\n          pattern:\r\n            /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\r\n          lookbehind: true,\r\n          inside: typeInside\r\n        },\r\n        {\r\n          pattern: RegExp(\r\n            /(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source +\r\n              type\r\n          ),\r\n          lookbehind: true,\r\n          inside: typeInside\r\n        },\r\n        {\r\n          // callback return type\r\n          pattern: RegExp(\r\n            '(' + /\\bcallback\\s+/.source + id + /\\s*=\\s*/.source + ')' + type\r\n          ),\r\n          lookbehind: true,\r\n          inside: typeInside\r\n        },\r\n        {\r\n          // typedef\r\n          pattern: RegExp(/(\\btypedef\\b\\s*)/.source + type),\r\n          lookbehind: true,\r\n          inside: typeInside\r\n        },\r\n        {\r\n          pattern: RegExp(\r\n            /(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/\r\n              .source + id\r\n          ),\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // inheritance\r\n          pattern: RegExp(/(:\\s*)/.source + id),\r\n          lookbehind: true\r\n        }, // includes and implements\r\n        RegExp(id + /(?=\\s+(?:implements|includes)\\b)/.source),\r\n        {\r\n          pattern: RegExp(/(\\b(?:implements|includes)\\s+)/.source + id),\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // function return type, parameter types, and dictionary members\r\n          pattern: RegExp(\r\n            type +\r\n              '(?=' +\r\n              /\\s*(?:\\.{3}\\s*)?/.source +\r\n              id +\r\n              /\\s*[(),;=]/.source +\r\n              ')'\r\n          ),\r\n          inside: typeInside\r\n        }\r\n      ],\r\n      builtin:\r\n        /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\r\n      keyword: [\r\n        /\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/, // type keywords\r\n        /\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/\r\n      ],\r\n      boolean: /\\b(?:false|true)\\b/,\r\n      number: {\r\n        pattern:\r\n          /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\r\n        lookbehind: true\r\n      },\r\n      operator: /\\.{3}|[=:?<>-]/,\r\n      punctuation: /[(){}[\\].,;]/\r\n    }\r\n    for (var key in Prism.languages['web-idl']) {\r\n      if (key !== 'class-name') {\r\n        typeInside[key] = Prism.languages['web-idl'][key]\r\n      }\r\n    }\r\n    Prism.languages['webidl'] = Prism.languages['web-idl']\r\n  })(Prism)\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,WAAO,cAAc;AACrB,WAAO,UAAU,CAAC;AAClB,aAAS,OAAO,OAAO;AACrB;AAAC,OAAC,SAAUA,QAAO;AACjB,YAAI,KAAK,wCAAwC;AACjD,YAAI,OACF,QACA,yCAAyC,SACzC,MACA,gDAAgD,SAChD,MACA,kCAAkC,SAClC,KACA,gCAAgC,SAChC,MACA,aAAa;AACf,YAAI,aAAa,CAAC;AAClB,QAAAA,OAAM,UAAU,SAAS,IAAI;AAAA,UAC3B,SAAS;AAAA,YACP,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,UACA,QAAQ;AAAA,YACN,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,UACA,WAAW;AAAA,YACT,SAAS,OAAO,mBAAmB,SAAS,EAAE;AAAA,YAC9C,YAAY;AAAA,UACd;AAAA,UACA,cAAc;AAAA,YACZ;AAAA,cACE,SACE;AAAA,cACF,YAAY;AAAA,cACZ,QAAQ;AAAA,YACV;AAAA,YACA;AAAA,cACE,SAAS;AAAA,gBACP,4DAA4D,SAC1D;AAAA,cACJ;AAAA,cACA,YAAY;AAAA,cACZ,QAAQ;AAAA,YACV;AAAA,YACA;AAAA;AAAA,cAEE,SAAS;AAAA,gBACP,MAAM,gBAAgB,SAAS,KAAK,UAAU,SAAS,MAAM;AAAA,cAC/D;AAAA,cACA,YAAY;AAAA,cACZ,QAAQ;AAAA,YACV;AAAA,YACA;AAAA;AAAA,cAEE,SAAS,OAAO,mBAAmB,SAAS,IAAI;AAAA,cAChD,YAAY;AAAA,cACZ,QAAQ;AAAA,YACV;AAAA,YACA;AAAA,cACE,SAAS;AAAA,gBACP,sFACG,SAAS;AAAA,cACd;AAAA,cACA,YAAY;AAAA,YACd;AAAA,YACA;AAAA;AAAA,cAEE,SAAS,OAAO,SAAS,SAAS,EAAE;AAAA,cACpC,YAAY;AAAA,YACd;AAAA;AAAA,YACA,OAAO,KAAK,mCAAmC,MAAM;AAAA,YACrD;AAAA,cACE,SAAS,OAAO,iCAAiC,SAAS,EAAE;AAAA,cAC5D,YAAY;AAAA,YACd;AAAA,YACA;AAAA;AAAA,cAEE,SAAS;AAAA,gBACP,OACE,QACA,mBAAmB,SACnB,KACA,aAAa,SACb;AAAA,cACJ;AAAA,cACA,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,UACA,SACE;AAAA,UACF,SAAS;AAAA,YACP;AAAA;AAAA,YACA;AAAA,UACF;AAAA,UACA,SAAS;AAAA,UACT,QAAQ;AAAA,YACN,SACE;AAAA,YACF,YAAY;AAAA,UACd;AAAA,UACA,UAAU;AAAA,UACV,aAAa;AAAA,QACf;AACA,iBAAS,OAAOA,OAAM,UAAU,SAAS,GAAG;AAC1C,cAAI,QAAQ,cAAc;AACxB,uBAAW,GAAG,IAAIA,OAAM,UAAU,SAAS,EAAE,GAAG;AAAA,UAClD;AAAA,QACF;AACA,QAAAA,OAAM,UAAU,QAAQ,IAAIA,OAAM,UAAU,SAAS;AAAA,MACvD,GAAG,KAAK;AAAA,IACV;AAAA;AAAA;",
  "names": ["Prism"]
}
