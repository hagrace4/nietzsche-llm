{
  "version": 3,
  "sources": ["../../refractor/lang/tcl.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = tcl\r\ntcl.displayName = 'tcl'\r\ntcl.aliases = []\r\nfunction tcl(Prism) {\r\n  Prism.languages.tcl = {\r\n    comment: {\r\n      pattern: /(^|[^\\\\])#.*/,\r\n      lookbehind: true\r\n    },\r\n    string: {\r\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\r\n      greedy: true\r\n    },\r\n    variable: [\r\n      {\r\n        pattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,\r\n        lookbehind: true\r\n      },\r\n      {\r\n        pattern: /(\\$)\\{[^}]+\\}/,\r\n        lookbehind: true\r\n      },\r\n      {\r\n        pattern: /(^[\\t ]*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,\r\n        lookbehind: true\r\n      }\r\n    ],\r\n    function: {\r\n      pattern: /(^[\\t ]*proc[ \\t]+)\\S+/m,\r\n      lookbehind: true\r\n    },\r\n    builtin: [\r\n      {\r\n        pattern:\r\n          /(^[\\t ]*)(?:break|class|continue|error|eval|exit|for|foreach|if|proc|return|switch|while)\\b/m,\r\n        lookbehind: true\r\n      },\r\n      /\\b(?:else|elseif)\\b/\r\n    ],\r\n    scope: {\r\n      pattern: /(^[\\t ]*)(?:global|upvar|variable)\\b/m,\r\n      lookbehind: true,\r\n      alias: 'constant'\r\n    },\r\n    keyword: {\r\n      pattern:\r\n        /(^[\\t ]*|\\[)(?:Safe_Base|Tcl|after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|scan|seek|set|socket|source|split|string|subst|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|test|vars|wordBreak(?:After|Before))|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,\r\n      lookbehind: true\r\n    },\r\n    operator:\r\n      /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|in|ne|ni)\\b/,\r\n    punctuation: /[{}()\\[\\]]/\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,QAAI,cAAc;AAClB,QAAI,UAAU,CAAC;AACf,aAAS,IAAI,OAAO;AAClB,YAAM,UAAU,MAAM;AAAA,QACpB,SAAS;AAAA,UACP,SAAS;AAAA,UACT,YAAY;AAAA,QACd;AAAA,QACA,QAAQ;AAAA,UACN,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,QACA,UAAU;AAAA,UACR;AAAA,YACE,SAAS;AAAA,YACT,YAAY;AAAA,UACd;AAAA,UACA;AAAA,YACE,SAAS;AAAA,YACT,YAAY;AAAA,UACd;AAAA,UACA;AAAA,YACE,SAAS;AAAA,YACT,YAAY;AAAA,UACd;AAAA,QACF;AAAA,QACA,UAAU;AAAA,UACR,SAAS;AAAA,UACT,YAAY;AAAA,QACd;AAAA,QACA,SAAS;AAAA,UACP;AAAA,YACE,SACE;AAAA,YACF,YAAY;AAAA,UACd;AAAA,UACA;AAAA,QACF;AAAA,QACA,OAAO;AAAA,UACL,SAAS;AAAA,UACT,YAAY;AAAA,UACZ,OAAO;AAAA,QACT;AAAA,QACA,SAAS;AAAA,UACP,SACE;AAAA,UACF,YAAY;AAAA,QACd;AAAA,QACA,UACE;AAAA,QACF,aAAa;AAAA,MACf;AAAA,IACF;AAAA;AAAA;",
  "names": []
}
