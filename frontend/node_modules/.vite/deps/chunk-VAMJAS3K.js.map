{
  "version": 3,
  "sources": ["../../refractor/lang/php.js"],
  "sourcesContent": ["'use strict'\r\nvar refractorMarkupTemplating = require('./markup-templating.js')\r\nmodule.exports = php\r\nphp.displayName = 'php'\r\nphp.aliases = []\r\nfunction php(Prism) {\r\n  Prism.register(refractorMarkupTemplating)\r\n  /**\r\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\r\n   * Modified by Miles Johnson: http://milesj.me\r\n   * Rewritten by Tom Pavelec\r\n   *\r\n   * Supports PHP 5.3 - 8.0\r\n   */\r\n  ;(function (Prism) {\r\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/\r\n    var constant = [\r\n      {\r\n        pattern: /\\b(?:false|true)\\b/i,\r\n        alias: 'boolean'\r\n      },\r\n      {\r\n        pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\r\n        greedy: true,\r\n        lookbehind: true\r\n      },\r\n      {\r\n        pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\r\n        greedy: true,\r\n        lookbehind: true\r\n      },\r\n      /\\b(?:null)\\b/i,\r\n      /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\r\n    ]\r\n    var number =\r\n      /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\r\n    var operator =\r\n      /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/\r\n    var punctuation = /[{}\\[\\](),:;]/\r\n    Prism.languages.php = {\r\n      delimiter: {\r\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\r\n        alias: 'important'\r\n      },\r\n      comment: comment,\r\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\r\n      package: {\r\n        pattern:\r\n          /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\r\n        lookbehind: true,\r\n        inside: {\r\n          punctuation: /\\\\/\r\n        }\r\n      },\r\n      'class-name-definition': {\r\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\r\n        lookbehind: true,\r\n        alias: 'class-name'\r\n      },\r\n      'function-definition': {\r\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\r\n        lookbehind: true,\r\n        alias: 'function'\r\n      },\r\n      keyword: [\r\n        {\r\n          pattern:\r\n            /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\r\n          alias: 'type-casting',\r\n          greedy: true,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          pattern:\r\n            /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\r\n          alias: 'type-hint',\r\n          greedy: true,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          pattern:\r\n            /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\r\n          alias: 'return-type',\r\n          greedy: true,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          pattern:\r\n            /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\r\n          alias: 'type-declaration',\r\n          greedy: true\r\n        },\r\n        {\r\n          pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\r\n          alias: 'type-declaration',\r\n          greedy: true,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\r\n          alias: 'static-context',\r\n          greedy: true\r\n        },\r\n        {\r\n          // yield from\r\n          pattern: /(\\byield\\s+)from\\b/i,\r\n          lookbehind: true\r\n        }, // `class` is always a keyword unlike other keywords\r\n        /\\bclass\\b/i,\r\n        {\r\n          // https://www.php.net/manual/en/reserved.keywords.php\r\n          //\r\n          // keywords cannot be preceded by \"->\"\r\n          // the complex lookbehind means `(?<!(?:->|::)\\s*)`\r\n          pattern:\r\n            /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\r\n          lookbehind: true\r\n        }\r\n      ],\r\n      'argument-name': {\r\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\r\n        lookbehind: true\r\n      },\r\n      'class-name': [\r\n        {\r\n          pattern:\r\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\r\n          greedy: true,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\r\n          greedy: true,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\r\n          greedy: true\r\n        },\r\n        {\r\n          pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\r\n          alias: 'class-name-fully-qualified',\r\n          greedy: true,\r\n          lookbehind: true,\r\n          inside: {\r\n            punctuation: /\\\\/\r\n          }\r\n        },\r\n        {\r\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\r\n          alias: 'class-name-fully-qualified',\r\n          greedy: true,\r\n          inside: {\r\n            punctuation: /\\\\/\r\n          }\r\n        },\r\n        {\r\n          pattern:\r\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\r\n          alias: 'class-name-fully-qualified',\r\n          greedy: true,\r\n          lookbehind: true,\r\n          inside: {\r\n            punctuation: /\\\\/\r\n          }\r\n        },\r\n        {\r\n          pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\r\n          alias: 'type-declaration',\r\n          greedy: true\r\n        },\r\n        {\r\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\r\n          alias: ['class-name-fully-qualified', 'type-declaration'],\r\n          greedy: true,\r\n          inside: {\r\n            punctuation: /\\\\/\r\n          }\r\n        },\r\n        {\r\n          pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\r\n          alias: 'static-context',\r\n          greedy: true\r\n        },\r\n        {\r\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\r\n          alias: ['class-name-fully-qualified', 'static-context'],\r\n          greedy: true,\r\n          inside: {\r\n            punctuation: /\\\\/\r\n          }\r\n        },\r\n        {\r\n          pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\r\n          alias: 'type-hint',\r\n          greedy: true,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\r\n          alias: ['class-name-fully-qualified', 'type-hint'],\r\n          greedy: true,\r\n          lookbehind: true,\r\n          inside: {\r\n            punctuation: /\\\\/\r\n          }\r\n        },\r\n        {\r\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\r\n          alias: 'return-type',\r\n          greedy: true,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\r\n          alias: ['class-name-fully-qualified', 'return-type'],\r\n          greedy: true,\r\n          lookbehind: true,\r\n          inside: {\r\n            punctuation: /\\\\/\r\n          }\r\n        }\r\n      ],\r\n      constant: constant,\r\n      function: {\r\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\r\n        lookbehind: true,\r\n        inside: {\r\n          punctuation: /\\\\/\r\n        }\r\n      },\r\n      property: {\r\n        pattern: /(->\\s*)\\w+/,\r\n        lookbehind: true\r\n      },\r\n      number: number,\r\n      operator: operator,\r\n      punctuation: punctuation\r\n    }\r\n    var string_interpolation = {\r\n      pattern:\r\n        /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\r\n      lookbehind: true,\r\n      inside: Prism.languages.php\r\n    }\r\n    var string = [\r\n      {\r\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\r\n        alias: 'nowdoc-string',\r\n        greedy: true,\r\n        inside: {\r\n          delimiter: {\r\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\r\n            alias: 'symbol',\r\n            inside: {\r\n              punctuation: /^<<<'?|[';]$/\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        pattern:\r\n          /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\r\n        alias: 'heredoc-string',\r\n        greedy: true,\r\n        inside: {\r\n          delimiter: {\r\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\r\n            alias: 'symbol',\r\n            inside: {\r\n              punctuation: /^<<<\"?|[\";]$/\r\n            }\r\n          },\r\n          interpolation: string_interpolation\r\n        }\r\n      },\r\n      {\r\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\r\n        alias: 'backtick-quoted-string',\r\n        greedy: true\r\n      },\r\n      {\r\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\r\n        alias: 'single-quoted-string',\r\n        greedy: true\r\n      },\r\n      {\r\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\r\n        alias: 'double-quoted-string',\r\n        greedy: true,\r\n        inside: {\r\n          interpolation: string_interpolation\r\n        }\r\n      }\r\n    ]\r\n    Prism.languages.insertBefore('php', 'variable', {\r\n      string: string,\r\n      attribute: {\r\n        pattern:\r\n          /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\r\n        greedy: true,\r\n        inside: {\r\n          'attribute-content': {\r\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\r\n            lookbehind: true,\r\n            // inside can appear subset of php\r\n            inside: {\r\n              comment: comment,\r\n              string: string,\r\n              'attribute-class-name': [\r\n                {\r\n                  pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\r\n                  alias: 'class-name',\r\n                  greedy: true,\r\n                  lookbehind: true\r\n                },\r\n                {\r\n                  pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\r\n                  alias: ['class-name', 'class-name-fully-qualified'],\r\n                  greedy: true,\r\n                  lookbehind: true,\r\n                  inside: {\r\n                    punctuation: /\\\\/\r\n                  }\r\n                }\r\n              ],\r\n              constant: constant,\r\n              number: number,\r\n              operator: operator,\r\n              punctuation: punctuation\r\n            }\r\n          },\r\n          delimiter: {\r\n            pattern: /^#\\[|\\]$/,\r\n            alias: 'punctuation'\r\n          }\r\n        }\r\n      }\r\n    })\r\n    Prism.hooks.add('before-tokenize', function (env) {\r\n      if (!/<\\?/.test(env.code)) {\r\n        return\r\n      }\r\n      var phpPattern =\r\n        /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g\r\n      Prism.languages['markup-templating'].buildPlaceholders(\r\n        env,\r\n        'php',\r\n        phpPattern\r\n      )\r\n    })\r\n    Prism.hooks.add('after-tokenize', function (env) {\r\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\r\n    })\r\n  })(Prism)\r\n}\r\n"],
  "mappings": "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",
  "names": ["Prism"]
}
