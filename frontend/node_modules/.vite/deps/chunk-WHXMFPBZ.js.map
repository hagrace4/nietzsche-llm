{
  "version": 3,
  "sources": ["../../refractor/lang/naniscript.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = naniscript\r\nnaniscript.displayName = 'naniscript'\r\nnaniscript.aliases = []\r\nfunction naniscript(Prism) {\r\n  ;(function (Prism) {\r\n    var expressionDef = /\\{[^\\r\\n\\[\\]{}]*\\}/\r\n    var params = {\r\n      'quoted-string': {\r\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\r\n        alias: 'operator'\r\n      },\r\n      'command-param-id': {\r\n        pattern: /(\\s)\\w+:/,\r\n        lookbehind: true,\r\n        alias: 'property'\r\n      },\r\n      'command-param-value': [\r\n        {\r\n          pattern: expressionDef,\r\n          alias: 'selector'\r\n        },\r\n        {\r\n          pattern: /([\\t ])\\S+/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          alias: 'operator'\r\n        },\r\n        {\r\n          pattern: /\\S(?:.*\\S)?/,\r\n          alias: 'operator'\r\n        }\r\n      ]\r\n    }\r\n    Prism.languages.naniscript = {\r\n      // ; ...\r\n      comment: {\r\n        pattern: /^([\\t ]*);.*/m,\r\n        lookbehind: true\r\n      },\r\n      // > ...\r\n      // Define is a control line starting with '>' followed by a word, a space and a text.\r\n      define: {\r\n        pattern: /^>.+/m,\r\n        alias: 'tag',\r\n        inside: {\r\n          value: {\r\n            pattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,\r\n            lookbehind: true,\r\n            alias: 'operator'\r\n          },\r\n          key: {\r\n            pattern: /(^>)\\w+/,\r\n            lookbehind: true\r\n          }\r\n        }\r\n      },\r\n      // # ...\r\n      label: {\r\n        pattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,\r\n        lookbehind: true,\r\n        alias: 'regex'\r\n      },\r\n      command: {\r\n        pattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,\r\n        lookbehind: true,\r\n        alias: 'function',\r\n        inside: {\r\n          'command-name': /^@\\w+/,\r\n          expression: {\r\n            pattern: expressionDef,\r\n            greedy: true,\r\n            alias: 'selector'\r\n          },\r\n          'command-params': {\r\n            pattern: /\\s*\\S[\\s\\S]*/,\r\n            inside: params\r\n          }\r\n        }\r\n      },\r\n      // Generic is any line that doesn't start with operators: ;>#@\r\n      'generic-text': {\r\n        pattern: /(^[ \\t]*)[^#@>;\\s].*/m,\r\n        lookbehind: true,\r\n        alias: 'punctuation',\r\n        inside: {\r\n          // \\{ ... \\} ... \\[ ... \\] ... \\\"\r\n          'escaped-char': /\\\\[{}\\[\\]\"]/,\r\n          expression: {\r\n            pattern: expressionDef,\r\n            greedy: true,\r\n            alias: 'selector'\r\n          },\r\n          'inline-command': {\r\n            pattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,\r\n            greedy: true,\r\n            alias: 'function',\r\n            inside: {\r\n              'command-params': {\r\n                pattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,\r\n                lookbehind: true,\r\n                inside: params\r\n              },\r\n              'command-param-name': {\r\n                pattern: /^(\\[[\\t ]*)\\w+/,\r\n                lookbehind: true,\r\n                alias: 'name'\r\n              },\r\n              'start-stop-char': /[\\[\\]]/\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    Prism.languages.nani = Prism.languages['naniscript']\r\n    /** @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token */\r\n    /**\r\n     * This hook is used to validate generic-text tokens for balanced brackets.\r\n     * Mark token as bad-line when contains not balanced brackets: {},[]\r\n     */\r\n    Prism.hooks.add('after-tokenize', function (env) {\r\n      /** @type {(Token | string)[]} */\r\n      var tokens = env.tokens\r\n      tokens.forEach(function (token) {\r\n        if (typeof token !== 'string' && token.type === 'generic-text') {\r\n          var content = getTextContent(token)\r\n          if (!isBracketsBalanced(content)) {\r\n            token.type = 'bad-line'\r\n            token.content = content\r\n          }\r\n        }\r\n      })\r\n    })\r\n    /**\r\n     * @param {string} input\r\n     * @returns {boolean}\r\n     */\r\n    function isBracketsBalanced(input) {\r\n      var brackets = '[]{}'\r\n      var stack = []\r\n      for (var i = 0; i < input.length; i++) {\r\n        var bracket = input[i]\r\n        var bracketsIndex = brackets.indexOf(bracket)\r\n        if (bracketsIndex !== -1) {\r\n          if (bracketsIndex % 2 === 0) {\r\n            stack.push(bracketsIndex + 1)\r\n          } else if (stack.pop() !== bracketsIndex) {\r\n            return false\r\n          }\r\n        }\r\n      }\r\n      return stack.length === 0\r\n    }\r\n    /**\r\n     * @param {string | Token | (string | Token)[]} token\r\n     * @returns {string}\r\n     */\r\n    function getTextContent(token) {\r\n      if (typeof token === 'string') {\r\n        return token\r\n      } else if (Array.isArray(token)) {\r\n        return token.map(getTextContent).join('')\r\n      } else {\r\n        return getTextContent(token.content)\r\n      }\r\n    }\r\n  })(Prism)\r\n}\r\n"],
  "mappings": "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",
  "names": ["Prism"]
}
