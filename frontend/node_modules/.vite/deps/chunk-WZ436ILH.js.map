{
  "version": 3,
  "sources": ["../../refractor/lang/factor.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = factor\r\nfactor.displayName = 'factor'\r\nfactor.aliases = []\r\nfunction factor(Prism) {\r\n  ;(function (Prism) {\r\n    var comment_inside = {\r\n      function:\r\n        /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\r\n    }\r\n    var string_inside = {\r\n      number: /\\\\[^\\s']|%\\w/\r\n    }\r\n    var factor = {\r\n      comment: [\r\n        {\r\n          // ! single-line exclamation point comments with whitespace after/around the !\r\n          pattern: /(^|\\s)(?:! .*|!$)/,\r\n          lookbehind: true,\r\n          inside: comment_inside\r\n        },\r\n        /* from basis/multiline: */\r\n        {\r\n          // /* comment */, /* comment*/\r\n          pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          inside: comment_inside\r\n        },\r\n        {\r\n          // ![[ comment ]] , ![===[ comment]===]\r\n          pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          inside: comment_inside\r\n        }\r\n      ],\r\n      number: [\r\n        {\r\n          // basic base 10 integers 9, -9\r\n          pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\r\n          pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\r\n          pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // positive mixed numbers 23+1/5 +23+1/5\r\n          pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // negative mixed numbers -23-1/5\r\n          pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\r\n          // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\r\n          pattern:\r\n            /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // NAN literal syntax NAN: 80000deadbeef, NAN: a\r\n          pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          /*\r\nbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\r\n\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\r\nThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\r\n<https://docs.factorcode.org/content/article-syntax-floats.html>\r\n*/\r\n          pattern:\r\n            /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\r\n          lookbehind: true\r\n        }\r\n      ],\r\n      // R/ regexp?\\/\\\\/\r\n      regexp: {\r\n        pattern:\r\n          /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\r\n        lookbehind: true,\r\n        alias: 'number',\r\n        inside: {\r\n          variable: /\\\\\\S/,\r\n          keyword: /[+?*\\[\\]^$(){}.|]/,\r\n          operator: {\r\n            pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\r\n            lookbehind: true\r\n          }\r\n        }\r\n      },\r\n      boolean: {\r\n        pattern: /(^|\\s)[tf](?=\\s|$)/,\r\n        lookbehind: true\r\n      },\r\n      // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\r\n      'custom-string': {\r\n        pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        alias: 'string',\r\n        inside: {\r\n          number: /\\\\\\S|%\\w|\\//\r\n        }\r\n      },\r\n      'multiline-string': [\r\n        {\r\n          // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\r\n          pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          alias: 'string',\r\n          inside: {\r\n            number: string_inside.number,\r\n            // trailing semicolon on its own line\r\n            'semicolon-or-setlocal': {\r\n              pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\r\n              lookbehind: true,\r\n              alias: 'function'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\r\n          pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          alias: 'string',\r\n          inside: string_inside\r\n        },\r\n        {\r\n          // [[ string ]], [==[ string]==]\r\n          pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          alias: 'string',\r\n          inside: string_inside\r\n        }\r\n      ],\r\n      'special-using': {\r\n        pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\r\n        lookbehind: true,\r\n        alias: 'function',\r\n        inside: {\r\n          // this is essentially a regex for vocab names, which i don't want to specify\r\n          // but the USING: gets picked up as a vocab name\r\n          string: {\r\n            pattern: /(\\s)[^:\\s]+/,\r\n            lookbehind: true\r\n          }\r\n        }\r\n      },\r\n      /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\r\ntrying to do better is more work and regex-computation-time than it's worth though.\r\n- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\r\n- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\r\n- we'd like if the following variable name conventions were recognised specifically:\r\nspecial row variables = ..a b..\r\ntype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\r\nword throws unconditional error = *\r\nany other word-like variable name = a ? q' etc\r\nhttps://docs.factorcode.org/content/article-effects.html\r\nthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\r\nthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\r\n*/\r\n      // current solution is not great\r\n      'stack-effect-delimiter': [\r\n        {\r\n          // opening parenthesis\r\n          pattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        },\r\n        {\r\n          // middle --\r\n          pattern: /(\\s)--(?=\\s)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        },\r\n        {\r\n          // closing parenthesis\r\n          pattern: /(\\s)\\)(?=\\s|$)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        }\r\n      ],\r\n      combinators: {\r\n        pattern: null,\r\n        lookbehind: true,\r\n        alias: 'keyword'\r\n      },\r\n      'kernel-builtin': {\r\n        pattern: null,\r\n        lookbehind: true,\r\n        alias: 'variable'\r\n      },\r\n      'sequences-builtin': {\r\n        pattern: null,\r\n        lookbehind: true,\r\n        alias: 'variable'\r\n      },\r\n      'math-builtin': {\r\n        pattern: null,\r\n        lookbehind: true,\r\n        alias: 'variable'\r\n      },\r\n      'constructor-word': {\r\n        // <array> but not <=>\r\n        pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\r\n        lookbehind: true,\r\n        alias: 'keyword'\r\n      },\r\n      'other-builtin-syntax': {\r\n        pattern: null,\r\n        lookbehind: true,\r\n        alias: 'operator'\r\n      },\r\n      /*\r\nfull list of supported word naming conventions: (the convention appears outside of the [brackets])\r\nset-[x]\r\nchange-[x]\r\nwith-[x]\r\nnew-[x]\r\n>[string]\r\n[base]>\r\n[string]>[number]\r\n+[symbol]+\r\n[boolean-word]?\r\n?[of]\r\n[slot-reader]>>\r\n>>[slot-setter]\r\n[slot-writer]<<\r\n([implementation-detail])\r\n[mutater]!\r\n[variant]*\r\n[prettyprint].\r\n$[help-markup]\r\n<constructors>, SYNTAX:, etc are supported by their own patterns.\r\n`with` and `new` from `kernel` are their own builtins.\r\nsee <https://docs.factorcode.org/content/article-conventions.html>\r\n*/\r\n      'conventionally-named-word': {\r\n        pattern:\r\n          /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\r\n        lookbehind: true,\r\n        alias: 'keyword'\r\n      },\r\n      'colon-syntax': {\r\n        pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        alias: 'function'\r\n      },\r\n      'semicolon-or-setlocal': {\r\n        pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\r\n        lookbehind: true,\r\n        alias: 'function'\r\n      },\r\n      // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\r\n      'curly-brace-literal-delimiter': [\r\n        {\r\n          // opening\r\n          pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        },\r\n        {\r\n          // closing\r\n          pattern: /(\\s)\\}(?=\\s|$)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        }\r\n      ],\r\n      // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\r\n      'quotation-delimiter': [\r\n        {\r\n          // opening\r\n          pattern: /(^|\\s)\\[(?=\\s)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        },\r\n        {\r\n          // closing\r\n          pattern: /(\\s)\\](?=\\s|$)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        }\r\n      ],\r\n      'normal-word': {\r\n        pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\r\n        lookbehind: true\r\n      },\r\n      /*\r\nbasic first-class string \"a\"\r\nwith escaped double-quote \"a\\\"\"\r\nescaped backslash \"\\\\\"\r\nand general escapes since Factor has so many \"\\N\"\r\nsyntax that works in the reference implementation that isn't fully\r\nsupported because it's an implementation detail:\r\n\"string 1\"\"string 2\" -> 2 strings (works anyway)\r\n\"string\"5 -> string, 5\r\n\"string\"[ ] -> string, quotation\r\n{ \"a\"} -> array<string>\r\nthe rest of those examples all properly recognise the string, but not\r\nthe other object (number, quotation, etc)\r\nthis is fine for a regex-only implementation.\r\n*/\r\n      string: {\r\n        pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\r\n        greedy: true,\r\n        inside: string_inside\r\n      }\r\n    }\r\n    var escape = function (str) {\r\n      return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1')\r\n    }\r\n    var arrToWordsRegExp = function (arr) {\r\n      return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)')\r\n    }\r\n    var builtins = {\r\n      'kernel-builtin': [\r\n        'or',\r\n        '2nipd',\r\n        '4drop',\r\n        'tuck',\r\n        'wrapper',\r\n        'nip',\r\n        'wrapper?',\r\n        'callstack>array',\r\n        'die',\r\n        'dupd',\r\n        'callstack',\r\n        'callstack?',\r\n        '3dup',\r\n        'hashcode',\r\n        'pick',\r\n        '4nip',\r\n        'build',\r\n        '>boolean',\r\n        'nipd',\r\n        'clone',\r\n        '5nip',\r\n        'eq?',\r\n        '?',\r\n        '=',\r\n        'swapd',\r\n        '2over',\r\n        'clear',\r\n        '2dup',\r\n        'get-retainstack',\r\n        'not',\r\n        'tuple?',\r\n        'dup',\r\n        '3nipd',\r\n        'call',\r\n        '-rotd',\r\n        'object',\r\n        'drop',\r\n        'assert=',\r\n        'assert?',\r\n        '-rot',\r\n        'execute',\r\n        'boa',\r\n        'get-callstack',\r\n        'curried?',\r\n        '3drop',\r\n        'pickd',\r\n        'overd',\r\n        'over',\r\n        'roll',\r\n        '3nip',\r\n        'swap',\r\n        'and',\r\n        '2nip',\r\n        'rotd',\r\n        'throw',\r\n        '(clone)',\r\n        'hashcode*',\r\n        'spin',\r\n        'reach',\r\n        '4dup',\r\n        'equal?',\r\n        'get-datastack',\r\n        'assert',\r\n        '2drop',\r\n        '<wrapper>',\r\n        'boolean?',\r\n        'identity-hashcode',\r\n        'identity-tuple?',\r\n        'null',\r\n        'composed?',\r\n        'new',\r\n        '5drop',\r\n        'rot',\r\n        '-roll',\r\n        'xor',\r\n        'identity-tuple',\r\n        'boolean'\r\n      ],\r\n      'other-builtin-syntax': [\r\n        // syntax\r\n        '=======',\r\n        'recursive',\r\n        'flushable',\r\n        '>>',\r\n        '<<<<<<',\r\n        'M\\\\',\r\n        'B',\r\n        'PRIVATE>',\r\n        '\\\\',\r\n        '======',\r\n        'final',\r\n        'inline',\r\n        'delimiter',\r\n        'deprecated',\r\n        '<PRIVATE',\r\n        '>>>>>>',\r\n        '<<<<<<<',\r\n        'parse-complex',\r\n        'malformed-complex',\r\n        'read-only',\r\n        '>>>>>>>',\r\n        'call-next-method',\r\n        '<<',\r\n        'foldable', // literals\r\n        '$',\r\n        '$[',\r\n        '${'\r\n      ],\r\n      'sequences-builtin': [\r\n        'member-eq?',\r\n        'mismatch',\r\n        'append',\r\n        'assert-sequence=',\r\n        'longer',\r\n        'repetition',\r\n        'clone-like',\r\n        '3sequence',\r\n        'assert-sequence?',\r\n        'last-index-from',\r\n        'reversed',\r\n        'index-from',\r\n        'cut*',\r\n        'pad-tail',\r\n        'join-as',\r\n        'remove-eq!',\r\n        'concat-as',\r\n        'but-last',\r\n        'snip',\r\n        'nths',\r\n        'nth',\r\n        'sequence',\r\n        'longest',\r\n        'slice?',\r\n        '<slice>',\r\n        'remove-nth',\r\n        'tail-slice',\r\n        'empty?',\r\n        'tail*',\r\n        'member?',\r\n        'virtual-sequence?',\r\n        'set-length',\r\n        'drop-prefix',\r\n        'iota',\r\n        'unclip',\r\n        'bounds-error?',\r\n        'unclip-last-slice',\r\n        'non-negative-integer-expected',\r\n        'non-negative-integer-expected?',\r\n        'midpoint@',\r\n        'longer?',\r\n        '?set-nth',\r\n        '?first',\r\n        'rest-slice',\r\n        'prepend-as',\r\n        'prepend',\r\n        'fourth',\r\n        'sift',\r\n        'subseq-start',\r\n        'new-sequence',\r\n        '?last',\r\n        'like',\r\n        'first4',\r\n        '1sequence',\r\n        'reverse',\r\n        'slice',\r\n        'virtual@',\r\n        'repetition?',\r\n        'set-last',\r\n        'index',\r\n        '4sequence',\r\n        'max-length',\r\n        'set-second',\r\n        'immutable-sequence',\r\n        'first2',\r\n        'first3',\r\n        'supremum',\r\n        'unclip-slice',\r\n        'suffix!',\r\n        'insert-nth',\r\n        'tail',\r\n        '3append',\r\n        'short',\r\n        'suffix',\r\n        'concat',\r\n        'flip',\r\n        'immutable?',\r\n        'reverse!',\r\n        '2sequence',\r\n        'sum',\r\n        'delete-all',\r\n        'indices',\r\n        'snip-slice',\r\n        '<iota>',\r\n        'check-slice',\r\n        'sequence?',\r\n        'head',\r\n        'append-as',\r\n        'halves',\r\n        'sequence=',\r\n        'collapse-slice',\r\n        '?second',\r\n        'slice-error?',\r\n        'product',\r\n        'bounds-check?',\r\n        'bounds-check',\r\n        'immutable',\r\n        'virtual-exemplar',\r\n        'harvest',\r\n        'remove',\r\n        'pad-head',\r\n        'last',\r\n        'set-fourth',\r\n        'cartesian-product',\r\n        'remove-eq',\r\n        'shorten',\r\n        'shorter',\r\n        'reversed?',\r\n        'shorter?',\r\n        'shortest',\r\n        'head-slice',\r\n        'pop*',\r\n        'tail-slice*',\r\n        'but-last-slice',\r\n        'iota?',\r\n        'append!',\r\n        'cut-slice',\r\n        'new-resizable',\r\n        'head-slice*',\r\n        'sequence-hashcode',\r\n        'pop',\r\n        'set-nth',\r\n        '?nth',\r\n        'second',\r\n        'join',\r\n        'immutable-sequence?',\r\n        '<reversed>',\r\n        '3append-as',\r\n        'virtual-sequence',\r\n        'subseq?',\r\n        'remove-nth!',\r\n        'length',\r\n        'last-index',\r\n        'lengthen',\r\n        'assert-sequence',\r\n        'copy',\r\n        'move',\r\n        'third',\r\n        'first',\r\n        'tail?',\r\n        'set-first',\r\n        'prefix',\r\n        'bounds-error',\r\n        '<repetition>',\r\n        'exchange',\r\n        'surround',\r\n        'cut',\r\n        'min-length',\r\n        'set-third',\r\n        'push-all',\r\n        'head?',\r\n        'subseq-start-from',\r\n        'delete-slice',\r\n        'rest',\r\n        'sum-lengths',\r\n        'head*',\r\n        'infimum',\r\n        'remove!',\r\n        'glue',\r\n        'slice-error',\r\n        'subseq',\r\n        'push',\r\n        'replace-slice',\r\n        'subseq-as',\r\n        'unclip-last'\r\n      ],\r\n      'math-builtin': [\r\n        'number=',\r\n        'next-power-of-2',\r\n        '?1+',\r\n        'fp-special?',\r\n        'imaginary-part',\r\n        'float>bits',\r\n        'number?',\r\n        'fp-infinity?',\r\n        'bignum?',\r\n        'fp-snan?',\r\n        'denominator',\r\n        'gcd',\r\n        '*',\r\n        '+',\r\n        'fp-bitwise=',\r\n        '-',\r\n        'u>=',\r\n        '/',\r\n        '>=',\r\n        'bitand',\r\n        'power-of-2?',\r\n        'log2-expects-positive',\r\n        'neg?',\r\n        '<',\r\n        'log2',\r\n        '>',\r\n        'integer?',\r\n        'number',\r\n        'bits>double',\r\n        '2/',\r\n        'zero?',\r\n        'bits>float',\r\n        'float?',\r\n        'shift',\r\n        'ratio?',\r\n        'rect>',\r\n        'even?',\r\n        'ratio',\r\n        'fp-sign',\r\n        'bitnot',\r\n        '>fixnum',\r\n        'complex?',\r\n        '/i',\r\n        'integer>fixnum',\r\n        '/f',\r\n        'sgn',\r\n        '>bignum',\r\n        'next-float',\r\n        'u<',\r\n        'u>',\r\n        'mod',\r\n        'recip',\r\n        'rational',\r\n        '>float',\r\n        '2^',\r\n        'integer',\r\n        'fixnum?',\r\n        'neg',\r\n        'fixnum',\r\n        'sq',\r\n        'bignum',\r\n        '>rect',\r\n        'bit?',\r\n        'fp-qnan?',\r\n        'simple-gcd',\r\n        'complex',\r\n        '<fp-nan>',\r\n        'real',\r\n        '>fraction',\r\n        'double>bits',\r\n        'bitor',\r\n        'rem',\r\n        'fp-nan-payload',\r\n        'real-part',\r\n        'log2-expects-positive?',\r\n        'prev-float',\r\n        'align',\r\n        'unordered?',\r\n        'float',\r\n        'fp-nan?',\r\n        'abs',\r\n        'bitxor',\r\n        'integer>fixnum-strict',\r\n        'u<=',\r\n        'odd?',\r\n        '<=',\r\n        '/mod',\r\n        '>integer',\r\n        'real?',\r\n        'rational?',\r\n        'numerator'\r\n      ] // that's all for now\r\n    }\r\n    Object.keys(builtins).forEach(function (k) {\r\n      factor[k].pattern = arrToWordsRegExp(builtins[k])\r\n    })\r\n    var combinators = [\r\n      // kernel\r\n      '2bi',\r\n      'while',\r\n      '2tri',\r\n      'bi*',\r\n      '4dip',\r\n      'both?',\r\n      'same?',\r\n      'tri@',\r\n      'curry',\r\n      'prepose',\r\n      '3bi',\r\n      '?if',\r\n      'tri*',\r\n      '2keep',\r\n      '3keep',\r\n      'curried',\r\n      '2keepd',\r\n      'when',\r\n      '2bi*',\r\n      '2tri*',\r\n      '4keep',\r\n      'bi@',\r\n      'keepdd',\r\n      'do',\r\n      'unless*',\r\n      'tri-curry',\r\n      'if*',\r\n      'loop',\r\n      'bi-curry*',\r\n      'when*',\r\n      '2bi@',\r\n      '2tri@',\r\n      'with',\r\n      '2with',\r\n      'either?',\r\n      'bi',\r\n      'until',\r\n      '3dip',\r\n      '3curry',\r\n      'tri-curry*',\r\n      'tri-curry@',\r\n      'bi-curry',\r\n      'keepd',\r\n      'compose',\r\n      '2dip',\r\n      'if',\r\n      '3tri',\r\n      'unless',\r\n      'tuple',\r\n      'keep',\r\n      '2curry',\r\n      'tri',\r\n      'most',\r\n      'while*',\r\n      'dip',\r\n      'composed',\r\n      'bi-curry@', // sequences\r\n      'find-last-from',\r\n      'trim-head-slice',\r\n      'map-as',\r\n      'each-from',\r\n      'none?',\r\n      'trim-tail',\r\n      'partition',\r\n      'if-empty',\r\n      'accumulate*',\r\n      'reject!',\r\n      'find-from',\r\n      'accumulate-as',\r\n      'collector-for-as',\r\n      'reject',\r\n      'map',\r\n      'map-sum',\r\n      'accumulate!',\r\n      '2each-from',\r\n      'follow',\r\n      'supremum-by',\r\n      'map!',\r\n      'unless-empty',\r\n      'collector',\r\n      'padding',\r\n      'reduce-index',\r\n      'replicate-as',\r\n      'infimum-by',\r\n      'trim-tail-slice',\r\n      'count',\r\n      'find-index',\r\n      'filter',\r\n      'accumulate*!',\r\n      'reject-as',\r\n      'map-integers',\r\n      'map-find',\r\n      'reduce',\r\n      'selector',\r\n      'interleave',\r\n      '2map',\r\n      'filter-as',\r\n      'binary-reduce',\r\n      'map-index-as',\r\n      'find',\r\n      'produce',\r\n      'filter!',\r\n      'replicate',\r\n      'cartesian-map',\r\n      'cartesian-each',\r\n      'find-index-from',\r\n      'map-find-last',\r\n      '3map-as',\r\n      '3map',\r\n      'find-last',\r\n      'selector-as',\r\n      '2map-as',\r\n      '2map-reduce',\r\n      'accumulate',\r\n      'each',\r\n      'each-index',\r\n      'accumulate*-as',\r\n      'when-empty',\r\n      'all?',\r\n      'collector-as',\r\n      'push-either',\r\n      'new-like',\r\n      'collector-for',\r\n      '2selector',\r\n      'push-if',\r\n      '2all?',\r\n      'map-reduce',\r\n      '3each',\r\n      'any?',\r\n      'trim-slice',\r\n      '2reduce',\r\n      'change-nth',\r\n      'produce-as',\r\n      '2each',\r\n      'trim',\r\n      'trim-head',\r\n      'cartesian-find',\r\n      'map-index', // math\r\n      'if-zero',\r\n      'each-integer',\r\n      'unless-zero',\r\n      '(find-integer)',\r\n      'when-zero',\r\n      'find-last-integer',\r\n      '(all-integers?)',\r\n      'times',\r\n      '(each-integer)',\r\n      'find-integer',\r\n      'all-integers?', // math.combinators\r\n      'unless-negative',\r\n      'if-positive',\r\n      'when-positive',\r\n      'when-negative',\r\n      'unless-positive',\r\n      'if-negative', // combinators\r\n      'case',\r\n      '2cleave',\r\n      'cond>quot',\r\n      'case>quot',\r\n      '3cleave',\r\n      'wrong-values',\r\n      'to-fixed-point',\r\n      'alist>quot',\r\n      'cond',\r\n      'cleave',\r\n      'call-effect',\r\n      'recursive-hashcode',\r\n      'spread',\r\n      'deep-spread>quot', // combinators.short-circuit\r\n      '2||',\r\n      '0||',\r\n      'n||',\r\n      '0&&',\r\n      '2&&',\r\n      '3||',\r\n      '1||',\r\n      '1&&',\r\n      'n&&',\r\n      '3&&', // combinators.smart\r\n      'smart-unless*',\r\n      'keep-inputs',\r\n      'reduce-outputs',\r\n      'smart-when*',\r\n      'cleave>array',\r\n      'smart-with',\r\n      'smart-apply',\r\n      'smart-if',\r\n      'inputs/outputs',\r\n      'output>sequence-n',\r\n      'map-outputs',\r\n      'map-reduce-outputs',\r\n      'dropping',\r\n      'output>array',\r\n      'smart-map-reduce',\r\n      'smart-2map-reduce',\r\n      'output>array-n',\r\n      'nullary',\r\n      'input<sequence',\r\n      'append-outputs',\r\n      'drop-inputs',\r\n      'inputs',\r\n      'smart-2reduce',\r\n      'drop-outputs',\r\n      'smart-reduce',\r\n      'preserving',\r\n      'smart-when',\r\n      'outputs',\r\n      'append-outputs-as',\r\n      'smart-unless',\r\n      'smart-if*',\r\n      'sum-outputs',\r\n      'input<sequence-unsafe',\r\n      'output>sequence' // tafn\r\n    ]\r\n    factor.combinators.pattern = arrToWordsRegExp(combinators)\r\n    Prism.languages.factor = factor\r\n  })(Prism)\r\n}\r\n"],
  "mappings": "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",
  "names": ["Prism", "factor"]
}
