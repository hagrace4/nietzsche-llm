{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/scheme.js"],
  "sourcesContent": ["/*\r\nLanguage: Scheme\r\nDescription: Scheme is a programming language in the Lisp family.\r\n             (keywords based on http://community.schemewiki.org/?scheme-keywords)\r\nAuthor: JP Verkamp <me@jverkamp.com>\r\nContributors: Ivan Sagalaev <maniac@softwaremaniacs.org>\r\nOrigin: clojure.js\r\nWebsite: http://community.schemewiki.org/?what-is-scheme\r\nCategory: lisp\r\n*/\r\n\r\nfunction scheme(hljs) {\r\n  const SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\r\n  const SCHEME_SIMPLE_NUMBER_RE = '(-|\\\\+)?\\\\d+([./]\\\\d+)?';\r\n  const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\r\n  const KEYWORDS = {\r\n    $pattern: SCHEME_IDENT_RE,\r\n    'builtin-name':\r\n      'case-lambda call/cc class define-class exit-handler field import ' +\r\n      'inherit init-field interface let*-values let-values let/ec mixin ' +\r\n      'opt-lambda override protect provide public rename require ' +\r\n      'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' +\r\n      'when with-syntax and begin call-with-current-continuation ' +\r\n      'call-with-input-file call-with-output-file case cond define ' +\r\n      'define-syntax delay do dynamic-wind else for-each if lambda let let* ' +\r\n      'let-syntax letrec letrec-syntax map or syntax-rules \\' * + , ,@ - ... / ' +\r\n      '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' +\r\n      'boolean? caar cadr call-with-input-file call-with-output-file ' +\r\n      'call-with-values car cdddar cddddr cdr ceiling char->integer ' +\r\n      'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' +\r\n      'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' +\r\n      'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' +\r\n      'char? close-input-port close-output-port complex? cons cos ' +\r\n      'current-input-port current-output-port denominator display eof-object? ' +\r\n      'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' +\r\n      'force gcd imag-part inexact->exact inexact? input-port? integer->char ' +\r\n      'integer? interaction-environment lcm length list list->string ' +\r\n      'list->vector list-ref list-tail list? load log magnitude make-polar ' +\r\n      'make-rectangular make-string make-vector max member memq memv min ' +\r\n      'modulo negative? newline not null-environment null? number->string ' +\r\n      'number? numerator odd? open-input-file open-output-file output-port? ' +\r\n      'pair? peek-char port? positive? procedure? quasiquote quote quotient ' +\r\n      'rational? rationalize read read-char real-part real? remainder reverse ' +\r\n      'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' +\r\n      'string->list string->number string->symbol string-append string-ci<=? ' +\r\n      'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' +\r\n      'string-fill! string-length string-ref string-set! string<=? string<? ' +\r\n      'string=? string>=? string>? string? substring symbol->string symbol? ' +\r\n      'tan transcript-off transcript-on truncate values vector ' +\r\n      'vector->list vector-fill! vector-length vector-ref vector-set! ' +\r\n      'with-input-from-file with-output-to-file write write-char zero?'\r\n  };\r\n\r\n  const LITERAL = {\r\n    className: 'literal',\r\n    begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\r\n  };\r\n\r\n  const NUMBER = {\r\n    className: 'number',\r\n    variants: [\r\n      {\r\n        begin: SCHEME_SIMPLE_NUMBER_RE,\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: SCHEME_COMPLEX_NUMBER_RE,\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: '#b[0-1]+(/[0-1]+)?'\r\n      },\r\n      {\r\n        begin: '#o[0-7]+(/[0-7]+)?'\r\n      },\r\n      {\r\n        begin: '#x[0-9a-f]+(/[0-9a-f]+)?'\r\n      }\r\n    ]\r\n  };\r\n\r\n  const STRING = hljs.QUOTE_STRING_MODE;\r\n\r\n  const COMMENT_MODES = [\r\n    hljs.COMMENT(\r\n      ';',\r\n      '$',\r\n      {\r\n        relevance: 0\r\n      }\r\n    ),\r\n    hljs.COMMENT('#\\\\|', '\\\\|#')\r\n  ];\r\n\r\n  const IDENT = {\r\n    begin: SCHEME_IDENT_RE,\r\n    relevance: 0\r\n  };\r\n\r\n  const QUOTED_IDENT = {\r\n    className: 'symbol',\r\n    begin: '\\'' + SCHEME_IDENT_RE\r\n  };\r\n\r\n  const BODY = {\r\n    endsWithParent: true,\r\n    relevance: 0\r\n  };\r\n\r\n  const QUOTED_LIST = {\r\n    variants: [\r\n      {\r\n        begin: /'/\r\n      },\r\n      {\r\n        begin: '`'\r\n      }\r\n    ],\r\n    contains: [\r\n      {\r\n        begin: '\\\\(',\r\n        end: '\\\\)',\r\n        contains: [\r\n          'self',\r\n          LITERAL,\r\n          STRING,\r\n          NUMBER,\r\n          IDENT,\r\n          QUOTED_IDENT\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const NAME = {\r\n    className: 'name',\r\n    relevance: 0,\r\n    begin: SCHEME_IDENT_RE,\r\n    keywords: KEYWORDS\r\n  };\r\n\r\n  const LAMBDA = {\r\n    begin: /lambda/,\r\n    endsWithParent: true,\r\n    returnBegin: true,\r\n    contains: [\r\n      NAME,\r\n      {\r\n        endsParent: true,\r\n        variants: [\r\n          {\r\n            begin: /\\(/,\r\n            end: /\\)/\r\n          },\r\n          {\r\n            begin: /\\[/,\r\n            end: /\\]/\r\n          }\r\n        ],\r\n        contains: [ IDENT ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const LIST = {\r\n    variants: [\r\n      {\r\n        begin: '\\\\(',\r\n        end: '\\\\)'\r\n      },\r\n      {\r\n        begin: '\\\\[',\r\n        end: '\\\\]'\r\n      }\r\n    ],\r\n    contains: [\r\n      LAMBDA,\r\n      NAME,\r\n      BODY\r\n    ]\r\n  };\r\n\r\n  BODY.contains = [\r\n    LITERAL,\r\n    NUMBER,\r\n    STRING,\r\n    IDENT,\r\n    QUOTED_IDENT,\r\n    QUOTED_LIST,\r\n    LIST\r\n  ].concat(COMMENT_MODES);\r\n\r\n  return {\r\n    name: 'Scheme',\r\n    illegal: /\\S/,\r\n    contains: [\r\n      hljs.SHEBANG(),\r\n      NUMBER,\r\n      STRING,\r\n      QUOTED_IDENT,\r\n      QUOTED_LIST,\r\n      LIST\r\n    ].concat(COMMENT_MODES)\r\n  };\r\n}\r\n\r\nmodule.exports = scheme;\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAWA,aAAS,OAAO,MAAM;AACpB,YAAM,kBAAkB;AACxB,YAAM,0BAA0B;AAChC,YAAM,2BAA2B,0BAA0B,WAAW,0BAA0B;AAChG,YAAM,WAAW;AAAA,QACf,UAAU;AAAA,QACV,gBACE;AAAA,MAiCJ;AAEA,YAAM,UAAU;AAAA,QACd,WAAW;AAAA,QACX,OAAO,iBAAiB,kBAAkB;AAAA,MAC5C;AAEA,YAAM,SAAS;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,UACR;AAAA,YACE,OAAO;AAAA,YACP,WAAW;AAAA,UACb;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,WAAW;AAAA,UACb;AAAA,UACA;AAAA,YACE,OAAO;AAAA,UACT;AAAA,UACA;AAAA,YACE,OAAO;AAAA,UACT;AAAA,UACA;AAAA,YACE,OAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAEA,YAAM,SAAS,KAAK;AAEpB,YAAM,gBAAgB;AAAA,QACpB,KAAK;AAAA,UACH;AAAA,UACA;AAAA,UACA;AAAA,YACE,WAAW;AAAA,UACb;AAAA,QACF;AAAA,QACA,KAAK,QAAQ,QAAQ,MAAM;AAAA,MAC7B;AAEA,YAAM,QAAQ;AAAA,QACZ,OAAO;AAAA,QACP,WAAW;AAAA,MACb;AAEA,YAAM,eAAe;AAAA,QACnB,WAAW;AAAA,QACX,OAAO,MAAO;AAAA,MAChB;AAEA,YAAM,OAAO;AAAA,QACX,gBAAgB;AAAA,QAChB,WAAW;AAAA,MACb;AAEA,YAAM,cAAc;AAAA,QAClB,UAAU;AAAA,UACR;AAAA,YACE,OAAO;AAAA,UACT;AAAA,UACA;AAAA,YACE,OAAO;AAAA,UACT;AAAA,QACF;AAAA,QACA,UAAU;AAAA,UACR;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,YACL,UAAU;AAAA,cACR;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,YAAM,OAAO;AAAA,QACX,WAAW;AAAA,QACX,WAAW;AAAA,QACX,OAAO;AAAA,QACP,UAAU;AAAA,MACZ;AAEA,YAAM,SAAS;AAAA,QACb,OAAO;AAAA,QACP,gBAAgB;AAAA,QAChB,aAAa;AAAA,QACb,UAAU;AAAA,UACR;AAAA,UACA;AAAA,YACE,YAAY;AAAA,YACZ,UAAU;AAAA,cACR;AAAA,gBACE,OAAO;AAAA,gBACP,KAAK;AAAA,cACP;AAAA,cACA;AAAA,gBACE,OAAO;AAAA,gBACP,KAAK;AAAA,cACP;AAAA,YACF;AAAA,YACA,UAAU,CAAE,KAAM;AAAA,UACpB;AAAA,QACF;AAAA,MACF;AAEA,YAAM,OAAO;AAAA,QACX,UAAU;AAAA,UACR;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,UACP;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,KAAK;AAAA,UACP;AAAA,QACF;AAAA,QACA,UAAU;AAAA,UACR;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAEA,WAAK,WAAW;AAAA,QACd;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,EAAE,OAAO,aAAa;AAEtB,aAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,UACR,KAAK,QAAQ;AAAA,UACb;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF,EAAE,OAAO,aAAa;AAAA,MACxB;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
