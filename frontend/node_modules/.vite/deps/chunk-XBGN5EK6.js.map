{
  "version": 3,
  "sources": ["../../refractor/lang/js-templates.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = jsTemplates\r\njsTemplates.displayName = 'jsTemplates'\r\njsTemplates.aliases = []\r\nfunction jsTemplates(Prism) {\r\n  ;(function (Prism) {\r\n    var templateString = Prism.languages.javascript['template-string'] // see the pattern in prism-javascript.js\r\n    var templateLiteralPattern = templateString.pattern.source\r\n    var interpolationObject = templateString.inside['interpolation']\r\n    var interpolationPunctuationObject =\r\n      interpolationObject.inside['interpolation-punctuation']\r\n    var interpolationPattern = interpolationObject.pattern.source\r\n    /**\r\n     * Creates a new pattern to match a template string with a special tag.\r\n     *\r\n     * This will return `undefined` if there is no grammar with the given language id.\r\n     *\r\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\r\n     * @param {string} tag The regex pattern to match the tag.\r\n     * @returns {object | undefined}\r\n     * @example\r\n     * createTemplate('css', /\\bcss/.source);\r\n     */\r\n    function createTemplate(language, tag) {\r\n      if (!Prism.languages[language]) {\r\n        return undefined\r\n      }\r\n      return {\r\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          'template-punctuation': {\r\n            pattern: /^`|`$/,\r\n            alias: 'string'\r\n          },\r\n          'embedded-code': {\r\n            pattern: /[\\s\\S]+/,\r\n            alias: language\r\n          }\r\n        }\r\n      }\r\n    }\r\n    Prism.languages.javascript['template-string'] = [\r\n      // styled-jsx:\r\n      //   css`a { color: #25F; }`\r\n      // styled-components:\r\n      //   styled.h1`color: red;`\r\n      createTemplate(\r\n        'css',\r\n        /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/\r\n          .source\r\n      ), // html`<p></p>`\r\n      // div.innerHTML = `<p></p>`\r\n      createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\r\n      createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\r\n      createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\r\n      createTemplate(\r\n        'graphql',\r\n        /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source\r\n      ), // sql`...`\r\n      createTemplate('sql', /\\bsql/.source), // vanilla template string\r\n      templateString\r\n    ].filter(Boolean)\r\n    /**\r\n     * Returns a specific placeholder literal for the given language.\r\n     *\r\n     * @param {number} counter\r\n     * @param {string} language\r\n     * @returns {string}\r\n     */\r\n    function getPlaceholder(counter, language) {\r\n      return '___' + language.toUpperCase() + '_' + counter + '___'\r\n    }\r\n    /**\r\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\r\n     *\r\n     * @param {string} code\r\n     * @param {any} grammar\r\n     * @param {string} language\r\n     * @returns {(string|Token)[]}\r\n     */\r\n    function tokenizeWithHooks(code, grammar, language) {\r\n      var env = {\r\n        code: code,\r\n        grammar: grammar,\r\n        language: language\r\n      }\r\n      Prism.hooks.run('before-tokenize', env)\r\n      env.tokens = Prism.tokenize(env.code, env.grammar)\r\n      Prism.hooks.run('after-tokenize', env)\r\n      return env.tokens\r\n    }\r\n    /**\r\n     * Returns the token of the given JavaScript interpolation expression.\r\n     *\r\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\r\n     * @returns {Token}\r\n     */\r\n    function tokenizeInterpolationExpression(expression) {\r\n      var tempGrammar = {}\r\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject\r\n      /** @type {Array} */\r\n      var tokens = Prism.tokenize(expression, tempGrammar)\r\n      if (tokens.length === 3) {\r\n        /**\r\n         * The token array will look like this\r\n         * [\r\n         *     [\"interpolation-punctuation\", \"${\"]\r\n         *     \"...\" // JavaScript expression of the interpolation\r\n         *     [\"interpolation-punctuation\", \"}\"]\r\n         * ]\r\n         */\r\n        var args = [1, 1]\r\n        args.push.apply(\r\n          args,\r\n          tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript')\r\n        )\r\n        tokens.splice.apply(tokens, args)\r\n      }\r\n      return new Prism.Token(\r\n        'interpolation',\r\n        tokens,\r\n        interpolationObject.alias,\r\n        expression\r\n      )\r\n    }\r\n    /**\r\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\r\n     *\r\n     * This function has 3 phases:\r\n     *\r\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\r\n     *    The placeholder will have the syntax of a identify of the target language.\r\n     * 2. Tokenize the code with placeholders.\r\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\r\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\r\n     *    tokenized as two tokens by the grammar of the embedded language.\r\n     *\r\n     * @param {string} code\r\n     * @param {object} grammar\r\n     * @param {string} language\r\n     * @returns {Token}\r\n     */\r\n    function tokenizeEmbedded(code, grammar, language) {\r\n      // 1. First filter out all interpolations\r\n      // because they might be escaped, we need a lookbehind, so we use Prism\r\n      /** @type {(Token|string)[]} */\r\n      var _tokens = Prism.tokenize(code, {\r\n        interpolation: {\r\n          pattern: RegExp(interpolationPattern),\r\n          lookbehind: true\r\n        }\r\n      }) // replace all interpolations with a placeholder which is not in the code already\r\n      var placeholderCounter = 0\r\n      /** @type {Object<string, string>} */\r\n      var placeholderMap = {}\r\n      var embeddedCode = _tokens\r\n        .map(function (token) {\r\n          if (typeof token === 'string') {\r\n            return token\r\n          } else {\r\n            var interpolationExpression = token.content\r\n            var placeholder\r\n            while (\r\n              code.indexOf(\r\n                (placeholder = getPlaceholder(placeholderCounter++, language))\r\n              ) !== -1\r\n            ) {\r\n              /* noop */\r\n            }\r\n            placeholderMap[placeholder] = interpolationExpression\r\n            return placeholder\r\n          }\r\n        })\r\n        .join('') // 2. Tokenize the embedded code\r\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language) // 3. Re-insert the interpolation\r\n      var placeholders = Object.keys(placeholderMap)\r\n      placeholderCounter = 0\r\n      /**\r\n       *\r\n       * @param {(Token|string)[]} tokens\r\n       * @returns {void}\r\n       */\r\n      function walkTokens(tokens) {\r\n        for (var i = 0; i < tokens.length; i++) {\r\n          if (placeholderCounter >= placeholders.length) {\r\n            return\r\n          }\r\n          var token = tokens[i]\r\n          if (typeof token === 'string' || typeof token.content === 'string') {\r\n            var placeholder = placeholders[placeholderCounter]\r\n            var s =\r\n              typeof token === 'string'\r\n                ? token\r\n                : /** @type {string} */\r\n                  token.content\r\n            var index = s.indexOf(placeholder)\r\n            if (index !== -1) {\r\n              ++placeholderCounter\r\n              var before = s.substring(0, index)\r\n              var middle = tokenizeInterpolationExpression(\r\n                placeholderMap[placeholder]\r\n              )\r\n              var after = s.substring(index + placeholder.length)\r\n              var replacement = []\r\n              if (before) {\r\n                replacement.push(before)\r\n              }\r\n              replacement.push(middle)\r\n              if (after) {\r\n                var afterTokens = [after]\r\n                walkTokens(afterTokens)\r\n                replacement.push.apply(replacement, afterTokens)\r\n              }\r\n              if (typeof token === 'string') {\r\n                tokens.splice.apply(tokens, [i, 1].concat(replacement))\r\n                i += replacement.length - 1\r\n              } else {\r\n                token.content = replacement\r\n              }\r\n            }\r\n          } else {\r\n            var content = token.content\r\n            if (Array.isArray(content)) {\r\n              walkTokens(content)\r\n            } else {\r\n              walkTokens([content])\r\n            }\r\n          }\r\n        }\r\n      }\r\n      walkTokens(embeddedTokens)\r\n      return new Prism.Token(\r\n        language,\r\n        embeddedTokens,\r\n        'language-' + language,\r\n        code\r\n      )\r\n    }\r\n    /**\r\n     * The languages for which JS templating will handle tagged template literals.\r\n     *\r\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\r\n     */\r\n    var supportedLanguages = {\r\n      javascript: true,\r\n      js: true,\r\n      typescript: true,\r\n      ts: true,\r\n      jsx: true,\r\n      tsx: true\r\n    }\r\n    Prism.hooks.add('after-tokenize', function (env) {\r\n      if (!(env.language in supportedLanguages)) {\r\n        return\r\n      }\r\n      /**\r\n       * Finds and tokenizes all template strings with an embedded languages.\r\n       *\r\n       * @param {(Token | string)[]} tokens\r\n       * @returns {void}\r\n       */\r\n      function findTemplateStrings(tokens) {\r\n        for (var i = 0, l = tokens.length; i < l; i++) {\r\n          var token = tokens[i]\r\n          if (typeof token === 'string') {\r\n            continue\r\n          }\r\n          var content = token.content\r\n          if (!Array.isArray(content)) {\r\n            if (typeof content !== 'string') {\r\n              findTemplateStrings([content])\r\n            }\r\n            continue\r\n          }\r\n          if (token.type === 'template-string') {\r\n            /**\r\n             * A JavaScript template-string token will look like this:\r\n             *\r\n             * [\"template-string\", [\r\n             *     [\"template-punctuation\", \"`\"],\r\n             *     (\r\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\r\n             *         or\r\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\r\n             *                                  It also has an alias which is the language of the embedded code.\r\n             *     ),\r\n             *     [\"template-punctuation\", \"`\"]\r\n             * ]]\r\n             */\r\n            var embedded = content[1]\r\n            if (\r\n              content.length === 3 &&\r\n              typeof embedded !== 'string' &&\r\n              embedded.type === 'embedded-code'\r\n            ) {\r\n              // get string content\r\n              var code = stringContent(embedded)\r\n              var alias = embedded.alias\r\n              var language = Array.isArray(alias) ? alias[0] : alias\r\n              var grammar = Prism.languages[language]\r\n              if (!grammar) {\r\n                // the embedded language isn't registered.\r\n                continue\r\n              }\r\n              content[1] = tokenizeEmbedded(code, grammar, language)\r\n            }\r\n          } else {\r\n            findTemplateStrings(content)\r\n          }\r\n        }\r\n      }\r\n      findTemplateStrings(env.tokens)\r\n    })\r\n    /**\r\n     * Returns the string content of a token or token stream.\r\n     *\r\n     * @param {string | Token | (string | Token)[]} value\r\n     * @returns {string}\r\n     */\r\n    function stringContent(value) {\r\n      if (typeof value === 'string') {\r\n        return value\r\n      } else if (Array.isArray(value)) {\r\n        return value.map(stringContent).join('')\r\n      } else {\r\n        return stringContent(value.content)\r\n      }\r\n    }\r\n  })(Prism)\r\n}\r\n"],
  "mappings": "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",
  "names": ["Prism"]
}
