{
  "version": 3,
  "sources": ["../../refractor/lang/elm.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = elm\r\nelm.displayName = 'elm'\r\nelm.aliases = []\r\nfunction elm(Prism) {\r\n  Prism.languages.elm = {\r\n    comment: /--.*|\\{-[\\s\\S]*?-\\}/,\r\n    char: {\r\n      pattern:\r\n        /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+|u\\{[0-9a-fA-F]+\\}))'/,\r\n      greedy: true\r\n    },\r\n    string: [\r\n      {\r\n        // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\r\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\r\n        greedy: true\r\n      },\r\n      {\r\n        pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\r\n        greedy: true\r\n      }\r\n    ],\r\n    'import-statement': {\r\n      // The imported or hidden names are not included in this import\r\n      // statement. This is because we want to highlight those exactly like\r\n      // we do for the names in the program.\r\n      pattern:\r\n        /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\r\n      lookbehind: true,\r\n      inside: {\r\n        keyword: /\\b(?:as|exposing|import)\\b/\r\n      }\r\n    },\r\n    keyword:\r\n      /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\r\n    // These are builtin variables only. Constructors are highlighted later as a constant.\r\n    builtin:\r\n      /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\r\n    // decimal integers and floating point numbers | hexadecimal integers\r\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\r\n    // Most of this is needed because of the meaning of a single '.'.\r\n    // If it stands alone freely, it is the function composition.\r\n    // It may also be a separator between a module name and an identifier => no\r\n    // operator. If it comes together with other special characters it is an\r\n    // operator too.\r\n    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\r\n    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\r\n    operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\r\n    // In Elm, nearly everything is a variable, do not highlight these.\r\n    hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\r\n    constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\r\n    punctuation: /[{}[\\]|(),.:]/\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,QAAI,cAAc;AAClB,QAAI,UAAU,CAAC;AACf,aAAS,IAAI,OAAO;AAClB,YAAM,UAAU,MAAM;AAAA,QACpB,SAAS;AAAA,QACT,MAAM;AAAA,UACJ,SACE;AAAA,UACF,QAAQ;AAAA,QACV;AAAA,QACA,QAAQ;AAAA,UACN;AAAA;AAAA,YAEE,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,YACE,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,QACA,oBAAoB;AAAA;AAAA;AAAA;AAAA,UAIlB,SACE;AAAA,UACF,YAAY;AAAA,UACZ,QAAQ;AAAA,YACN,SAAS;AAAA,UACX;AAAA,QACF;AAAA,QACA,SACE;AAAA;AAAA,QAEF,SACE;AAAA;AAAA,QAEF,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQR,UAAU;AAAA;AAAA,QAEV,WAAW;AAAA,QACX,UAAU;AAAA,QACV,aAAa;AAAA,MACf;AAAA,IACF;AAAA;AAAA;",
  "names": []
}
