{
  "version": 3,
  "sources": ["../../refractor/lang/ruby.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = ruby\r\nruby.displayName = 'ruby'\r\nruby.aliases = ['rb']\r\nfunction ruby(Prism) {\r\n  /**\r\n   * Original by Samuel Flores\r\n   *\r\n   * Adds the following new token classes:\r\n   *     constant, builtin, variable, symbol, regex\r\n   */\r\n  ;(function (Prism) {\r\n    Prism.languages.ruby = Prism.languages.extend('clike', {\r\n      comment: {\r\n        pattern: /#.*|^=begin\\s[\\s\\S]*?^=end/m,\r\n        greedy: true\r\n      },\r\n      'class-name': {\r\n        pattern:\r\n          /(\\b(?:class|module)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+|\\b[A-Z_]\\w*(?=\\s*\\.\\s*new\\b)/,\r\n        lookbehind: true,\r\n        inside: {\r\n          punctuation: /[.\\\\]/\r\n        }\r\n      },\r\n      keyword:\r\n        /\\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\r\n      operator:\r\n        /\\.{2,3}|&\\.|===|<?=>|[!=]?~|(?:&&|\\|\\||<<|>>|\\*\\*|[+\\-*/%<>!^&|=])=?|[?:]/,\r\n      punctuation: /[(){}[\\].,;]/\r\n    })\r\n    Prism.languages.insertBefore('ruby', 'operator', {\r\n      'double-colon': {\r\n        pattern: /::/,\r\n        alias: 'punctuation'\r\n      }\r\n    })\r\n    var interpolation = {\r\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)#\\{(?:[^{}]|\\{[^{}]*\\})*\\}/,\r\n      lookbehind: true,\r\n      inside: {\r\n        content: {\r\n          pattern: /^(#\\{)[\\s\\S]+(?=\\}$)/,\r\n          lookbehind: true,\r\n          inside: Prism.languages.ruby\r\n        },\r\n        delimiter: {\r\n          pattern: /^#\\{|\\}$/,\r\n          alias: 'punctuation'\r\n        }\r\n      }\r\n    }\r\n    delete Prism.languages.ruby.function\r\n    var percentExpression =\r\n      '(?:' +\r\n      [\r\n        /([^a-zA-Z0-9\\s{(\\[<=])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\r\n        /\\((?:[^()\\\\]|\\\\[\\s\\S]|\\((?:[^()\\\\]|\\\\[\\s\\S])*\\))*\\)/.source,\r\n        /\\{(?:[^{}\\\\]|\\\\[\\s\\S]|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\})*\\}/.source,\r\n        /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S]|\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\])*\\]/.source,\r\n        /<(?:[^<>\\\\]|\\\\[\\s\\S]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)*>/.source\r\n      ].join('|') +\r\n      ')'\r\n    var symbolName =\r\n      /(?:\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|(?:\\b[a-zA-Z_]\\w*|[^\\s\\0-\\x7F]+)[?!]?|\\$.)/\r\n        .source\r\n    Prism.languages.insertBefore('ruby', 'keyword', {\r\n      'regex-literal': [\r\n        {\r\n          pattern: RegExp(\r\n            /%r/.source + percentExpression + /[egimnosux]{0,6}/.source\r\n          ),\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: interpolation,\r\n            regex: /[\\s\\S]+/\r\n          }\r\n        },\r\n        {\r\n          pattern:\r\n            /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: interpolation,\r\n            regex: /[\\s\\S]+/\r\n          }\r\n        }\r\n      ],\r\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\r\n      symbol: [\r\n        {\r\n          pattern: RegExp(/(^|[^:]):/.source + symbolName),\r\n          lookbehind: true,\r\n          greedy: true\r\n        },\r\n        {\r\n          pattern: RegExp(\r\n            /([\\r\\n{(,][ \\t]*)/.source + symbolName + /(?=:(?!:))/.source\r\n          ),\r\n          lookbehind: true,\r\n          greedy: true\r\n        }\r\n      ],\r\n      'method-definition': {\r\n        pattern: /(\\bdef\\s+)\\w+(?:\\s*\\.\\s*\\w+)?/,\r\n        lookbehind: true,\r\n        inside: {\r\n          function: /\\b\\w+$/,\r\n          keyword: /^self\\b/,\r\n          'class-name': /^\\w+/,\r\n          punctuation: /\\./\r\n        }\r\n      }\r\n    })\r\n    Prism.languages.insertBefore('ruby', 'string', {\r\n      'string-literal': [\r\n        {\r\n          pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: interpolation,\r\n            string: /[\\s\\S]+/\r\n          }\r\n        },\r\n        {\r\n          pattern:\r\n            /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: interpolation,\r\n            string: /[\\s\\S]+/\r\n          }\r\n        },\r\n        {\r\n          pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\r\n          alias: 'heredoc-string',\r\n          greedy: true,\r\n          inside: {\r\n            delimiter: {\r\n              pattern: /^<<[-~]?[a-z_]\\w*|\\b[a-z_]\\w*$/i,\r\n              inside: {\r\n                symbol: /\\b\\w+/,\r\n                punctuation: /^<<[-~]?/\r\n              }\r\n            },\r\n            interpolation: interpolation,\r\n            string: /[\\s\\S]+/\r\n          }\r\n        },\r\n        {\r\n          pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\r\n          alias: 'heredoc-string',\r\n          greedy: true,\r\n          inside: {\r\n            delimiter: {\r\n              pattern: /^<<[-~]?'[a-z_]\\w*'|\\b[a-z_]\\w*$/i,\r\n              inside: {\r\n                symbol: /\\b\\w+/,\r\n                punctuation: /^<<[-~]?'|'$/\r\n              }\r\n            },\r\n            string: /[\\s\\S]+/\r\n          }\r\n        }\r\n      ],\r\n      'command-literal': [\r\n        {\r\n          pattern: RegExp(/%x/.source + percentExpression),\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: interpolation,\r\n            command: {\r\n              pattern: /[\\s\\S]+/,\r\n              alias: 'string'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          pattern: /`(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|[^\\\\`#\\r\\n])*`/,\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: interpolation,\r\n            command: {\r\n              pattern: /[\\s\\S]+/,\r\n              alias: 'string'\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    })\r\n    delete Prism.languages.ruby.string\r\n    Prism.languages.insertBefore('ruby', 'number', {\r\n      builtin:\r\n        /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\\b/,\r\n      constant: /\\b[A-Z][A-Z0-9_]*(?:[?!]|\\b)/\r\n    })\r\n    Prism.languages.rb = Prism.languages.ruby\r\n  })(Prism)\r\n}\r\n"],
  "mappings": "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",
  "names": ["Prism"]
}
