{
  "version": 3,
  "sources": ["../../highlight.js/lib/languages/d.js"],
  "sourcesContent": ["/*\r\nLanguage: D\r\nAuthor: Aleksandar Ruzicic <aleksandar@ruzicic.info>\r\nDescription: D is a language with C-like syntax and static typing. It pragmatically combines efficiency, control, and modeling power, with safety and programmer productivity.\r\nVersion: 1.0a\r\nWebsite: https://dlang.org\r\nDate: 2012-04-08\r\n*/\r\n\r\n/**\r\n * Known issues:\r\n *\r\n * - invalid hex string literals will be recognized as a double quoted strings\r\n *   but 'x' at the beginning of string will not be matched\r\n *\r\n * - delimited string literals are not checked for matching end delimiter\r\n *   (not possible to do with js regexp)\r\n *\r\n * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)\r\n *   also, content of token string is not validated to contain only valid D tokens\r\n *\r\n * - special token sequence rule is not strictly following D grammar (anything following #line\r\n *   up to the end of line is matched as special token sequence)\r\n */\r\n\r\n/** @type LanguageFn */\r\nfunction d(hljs) {\r\n  /**\r\n   * Language keywords\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_KEYWORDS = {\r\n    $pattern: hljs.UNDERSCORE_IDENT_RE,\r\n    keyword:\r\n      'abstract alias align asm assert auto body break byte case cast catch class ' +\r\n      'const continue debug default delete deprecated do else enum export extern final ' +\r\n      'finally for foreach foreach_reverse|10 goto if immutable import in inout int ' +\r\n      'interface invariant is lazy macro mixin module new nothrow out override package ' +\r\n      'pragma private protected public pure ref return scope shared static struct ' +\r\n      'super switch synchronized template this throw try typedef typeid typeof union ' +\r\n      'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 ' +\r\n      '__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',\r\n    built_in:\r\n      'bool cdouble cent cfloat char creal dchar delegate double dstring float function ' +\r\n      'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar ' +\r\n      'wstring',\r\n    literal:\r\n      'false null true'\r\n  };\r\n\r\n  /**\r\n   * Number literal regexps\r\n   *\r\n   * @type {String}\r\n   */\r\n  const decimal_integer_re = '(0|[1-9][\\\\d_]*)';\r\n  const decimal_integer_nosus_re = '(0|[1-9][\\\\d_]*|\\\\d[\\\\d_]*|[\\\\d_]+?\\\\d)';\r\n  const binary_integer_re = '0[bB][01_]+';\r\n  const hexadecimal_digits_re = '([\\\\da-fA-F][\\\\da-fA-F_]*|_[\\\\da-fA-F][\\\\da-fA-F_]*)';\r\n  const hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re;\r\n\r\n  const decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')';\r\n  const decimal_float_re = '(' + decimal_integer_nosus_re + '(\\\\.\\\\d*|' + decimal_exponent_re + ')|' +\r\n                '\\\\d+\\\\.' + decimal_integer_nosus_re + '|' +\r\n                '\\\\.' + decimal_integer_re + decimal_exponent_re + '?' +\r\n              ')';\r\n  const hexadecimal_float_re = '(0[xX](' +\r\n                  hexadecimal_digits_re + '\\\\.' + hexadecimal_digits_re + '|' +\r\n                  '\\\\.?' + hexadecimal_digits_re +\r\n                 ')[pP][+-]?' + decimal_integer_nosus_re + ')';\r\n\r\n  const integer_re = '(' +\r\n      decimal_integer_re + '|' +\r\n      binary_integer_re + '|' +\r\n       hexadecimal_integer_re +\r\n    ')';\r\n\r\n  const float_re = '(' +\r\n      hexadecimal_float_re + '|' +\r\n      decimal_float_re +\r\n    ')';\r\n\r\n  /**\r\n   * Escape sequence supported in D string and character literals\r\n   *\r\n   * @type {String}\r\n   */\r\n  const escape_sequence_re = '\\\\\\\\(' +\r\n              '[\\'\"\\\\?\\\\\\\\abfnrtv]|' + // common escapes\r\n              'u[\\\\dA-Fa-f]{4}|' + // four hex digit unicode codepoint\r\n              '[0-7]{1,3}|' + // one to three octal digit ascii char code\r\n              'x[\\\\dA-Fa-f]{2}|' + // two hex digit ascii char code\r\n              'U[\\\\dA-Fa-f]{8}' + // eight hex digit unicode codepoint\r\n              ')|' +\r\n              '&[a-zA-Z\\\\d]{2,};'; // named character entity\r\n\r\n  /**\r\n   * D integer number literals\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_INTEGER_MODE = {\r\n    className: 'number',\r\n    begin: '\\\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',\r\n    relevance: 0\r\n  };\r\n\r\n  /**\r\n   * [D_FLOAT_MODE description]\r\n   * @type {Object}\r\n   */\r\n  const D_FLOAT_MODE = {\r\n    className: 'number',\r\n    begin: '\\\\b(' +\r\n        float_re + '([fF]|L|i|[fF]i|Li)?|' +\r\n        integer_re + '(i|[fF]i|Li)' +\r\n      ')',\r\n    relevance: 0\r\n  };\r\n\r\n  /**\r\n   * D character literal\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_CHARACTER_MODE = {\r\n    className: 'string',\r\n    begin: '\\'(' + escape_sequence_re + '|.)',\r\n    end: '\\'',\r\n    illegal: '.'\r\n  };\r\n\r\n  /**\r\n   * D string escape sequence\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_ESCAPE_SEQUENCE = {\r\n    begin: escape_sequence_re,\r\n    relevance: 0\r\n  };\r\n\r\n  /**\r\n   * D double quoted string literal\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_STRING_MODE = {\r\n    className: 'string',\r\n    begin: '\"',\r\n    contains: [D_ESCAPE_SEQUENCE],\r\n    end: '\"[cwd]?'\r\n  };\r\n\r\n  /**\r\n   * D wysiwyg and delimited string literals\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_WYSIWYG_DELIMITED_STRING_MODE = {\r\n    className: 'string',\r\n    begin: '[rq]\"',\r\n    end: '\"[cwd]?',\r\n    relevance: 5\r\n  };\r\n\r\n  /**\r\n   * D alternate wysiwyg string literal\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_ALTERNATE_WYSIWYG_STRING_MODE = {\r\n    className: 'string',\r\n    begin: '`',\r\n    end: '`[cwd]?'\r\n  };\r\n\r\n  /**\r\n   * D hexadecimal string literal\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_HEX_STRING_MODE = {\r\n    className: 'string',\r\n    begin: 'x\"[\\\\da-fA-F\\\\s\\\\n\\\\r]*\"[cwd]?',\r\n    relevance: 10\r\n  };\r\n\r\n  /**\r\n   * D delimited string literal\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_TOKEN_STRING_MODE = {\r\n    className: 'string',\r\n    begin: 'q\"\\\\{',\r\n    end: '\\\\}\"'\r\n  };\r\n\r\n  /**\r\n   * Hashbang support\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_HASHBANG_MODE = {\r\n    className: 'meta',\r\n    begin: '^#!',\r\n    end: '$',\r\n    relevance: 5\r\n  };\r\n\r\n  /**\r\n   * D special token sequence\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_SPECIAL_TOKEN_SEQUENCE_MODE = {\r\n    className: 'meta',\r\n    begin: '#(line)',\r\n    end: '$',\r\n    relevance: 5\r\n  };\r\n\r\n  /**\r\n   * D attributes\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_ATTRIBUTE_MODE = {\r\n    className: 'keyword',\r\n    begin: '@[a-zA-Z_][a-zA-Z_\\\\d]*'\r\n  };\r\n\r\n  /**\r\n   * D nesting comment\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const D_NESTING_COMMENT_MODE = hljs.COMMENT(\r\n    '\\\\/\\\\+',\r\n    '\\\\+\\\\/',\r\n    {\r\n      contains: ['self'],\r\n      relevance: 10\r\n    }\r\n  );\r\n\r\n  return {\r\n    name: 'D',\r\n    keywords: D_KEYWORDS,\r\n    contains: [\r\n      hljs.C_LINE_COMMENT_MODE,\r\n      hljs.C_BLOCK_COMMENT_MODE,\r\n      D_NESTING_COMMENT_MODE,\r\n      D_HEX_STRING_MODE,\r\n      D_STRING_MODE,\r\n      D_WYSIWYG_DELIMITED_STRING_MODE,\r\n      D_ALTERNATE_WYSIWYG_STRING_MODE,\r\n      D_TOKEN_STRING_MODE,\r\n      D_FLOAT_MODE,\r\n      D_INTEGER_MODE,\r\n      D_CHARACTER_MODE,\r\n      D_HASHBANG_MODE,\r\n      D_SPECIAL_TOKEN_SEQUENCE_MODE,\r\n      D_ATTRIBUTE_MODE\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = d;\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AA0BA,aAAS,EAAE,MAAM;AAMf,YAAM,aAAa;AAAA,QACjB,UAAU,KAAK;AAAA,QACf,SACE;AAAA,QAQF,UACE;AAAA,QAGF,SACE;AAAA,MACJ;AAOA,YAAM,qBAAqB;AAC3B,YAAM,2BAA2B;AACjC,YAAM,oBAAoB;AAC1B,YAAM,wBAAwB;AAC9B,YAAM,yBAAyB,UAAU;AAEzC,YAAM,sBAAsB,eAAe,2BAA2B;AACtE,YAAM,mBAAmB,MAAM,2BAA2B,cAAc,sBAAsB,cACpE,2BAA2B,SAC/B,qBAAqB,sBAAsB;AAEjE,YAAM,uBAAuB,YACb,wBAAwB,QAAQ,wBAAwB,UAC/C,wBACV,eAAe,2BAA2B;AAEzD,YAAM,aAAa,MACf,qBAAqB,MACrB,oBAAoB,MACnB,yBACH;AAEF,YAAM,WAAW,MACb,uBAAuB,MACvB,mBACF;AAOF,YAAM,qBAAqB;AAc3B,YAAM,iBAAiB;AAAA,QACrB,WAAW;AAAA,QACX,OAAO,QAAQ,aAAa;AAAA,QAC5B,WAAW;AAAA,MACb;AAMA,YAAM,eAAe;AAAA,QACnB,WAAW;AAAA,QACX,OAAO,SACH,WAAW,0BACX,aAAa;AAAA,QAEjB,WAAW;AAAA,MACb;AAOA,YAAM,mBAAmB;AAAA,QACvB,WAAW;AAAA,QACX,OAAO,OAAQ,qBAAqB;AAAA,QACpC,KAAK;AAAA,QACL,SAAS;AAAA,MACX;AAOA,YAAM,oBAAoB;AAAA,QACxB,OAAO;AAAA,QACP,WAAW;AAAA,MACb;AAOA,YAAM,gBAAgB;AAAA,QACpB,WAAW;AAAA,QACX,OAAO;AAAA,QACP,UAAU,CAAC,iBAAiB;AAAA,QAC5B,KAAK;AAAA,MACP;AAOA,YAAM,kCAAkC;AAAA,QACtC,WAAW;AAAA,QACX,OAAO;AAAA,QACP,KAAK;AAAA,QACL,WAAW;AAAA,MACb;AAOA,YAAM,kCAAkC;AAAA,QACtC,WAAW;AAAA,QACX,OAAO;AAAA,QACP,KAAK;AAAA,MACP;AAOA,YAAM,oBAAoB;AAAA,QACxB,WAAW;AAAA,QACX,OAAO;AAAA,QACP,WAAW;AAAA,MACb;AAOA,YAAM,sBAAsB;AAAA,QAC1B,WAAW;AAAA,QACX,OAAO;AAAA,QACP,KAAK;AAAA,MACP;AAOA,YAAM,kBAAkB;AAAA,QACtB,WAAW;AAAA,QACX,OAAO;AAAA,QACP,KAAK;AAAA,QACL,WAAW;AAAA,MACb;AAOA,YAAM,gCAAgC;AAAA,QACpC,WAAW;AAAA,QACX,OAAO;AAAA,QACP,KAAK;AAAA,QACL,WAAW;AAAA,MACb;AAOA,YAAM,mBAAmB;AAAA,QACvB,WAAW;AAAA,QACX,OAAO;AAAA,MACT;AAOA,YAAM,yBAAyB,KAAK;AAAA,QAClC;AAAA,QACA;AAAA,QACA;AAAA,UACE,UAAU,CAAC,MAAM;AAAA,UACjB,WAAW;AAAA,QACb;AAAA,MACF;AAEA,aAAO;AAAA,QACL,MAAM;AAAA,QACN,UAAU;AAAA,QACV,UAAU;AAAA,UACR,KAAK;AAAA,UACL,KAAK;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
